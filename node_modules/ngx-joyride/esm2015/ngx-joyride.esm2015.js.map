{"version":3,"file":"ngx-joyride.esm2015.js","sources":["../../src/services/joyride-options.service.ts","../../src/services/joyride-steps-container.service.ts","../../src/models/joyride-error.class.ts","../../src/services/dom.service.ts","../../src/directives/joyride.directive.ts","../../src/services/document.service.ts","../../src/services/joyride-backdrop.service.ts","../../src/services/event-listener.service.ts","../../src/services/logger.service.ts","../../src/components/step/joyride-step.component.ts","../../src/services/step-drawer.service.ts","../../src/services/joyride-step.service.ts","../../../../node_modules/tslib/tslib.es6.js","../../../../node_modules/rxjs/_esm5/internal/util/errorObject.js","../../../../node_modules/rxjs/_esm5/internal/util/tryCatch.js","../../../../node_modules/rxjs/_esm5/internal/util/isFunction.js","../../../../node_modules/rxjs/_esm5/internal/config.js","../../../../node_modules/rxjs/_esm5/internal/util/hostReportError.js","../../../../node_modules/rxjs/_esm5/internal/Observer.js","../../../../node_modules/rxjs/_esm5/internal/util/isArray.js","../../../../node_modules/rxjs/_esm5/internal/util/isObject.js","../../../../node_modules/rxjs/_esm5/internal/util/UnsubscriptionError.js","../../../../node_modules/rxjs/_esm5/internal/Subscription.js","../../../../node_modules/rxjs/_esm5/internal/symbol/rxSubscriber.js","../../../../node_modules/rxjs/_esm5/internal/Subscriber.js","../../../../node_modules/rxjs/_esm5/internal/OuterSubscriber.js","../../../../node_modules/rxjs/_esm5/internal/InnerSubscriber.js","../../../../node_modules/rxjs/_esm5/internal/util/toSubscriber.js","../../../../node_modules/rxjs/_esm5/internal/symbol/observable.js","../../../../node_modules/rxjs/_esm5/internal/util/noop.js","../../../../node_modules/rxjs/_esm5/internal/util/pipe.js","../../../../node_modules/rxjs/_esm5/internal/Observable.js","../../../../node_modules/rxjs/_esm5/internal/util/subscribeToArray.js","../../../../node_modules/rxjs/_esm5/internal/util/subscribeToPromise.js","../../../../node_modules/rxjs/_esm5/internal/symbol/iterator.js","../../../../node_modules/rxjs/_esm5/internal/util/subscribeToIterable.js","../../../../node_modules/rxjs/_esm5/internal/util/subscribeToObservable.js","../../../../node_modules/rxjs/_esm5/internal/util/isArrayLike.js","../../../../node_modules/rxjs/_esm5/internal/util/isPromise.js","../../../../node_modules/rxjs/_esm5/internal/util/subscribeTo.js","../../../../node_modules/rxjs/_esm5/internal/util/subscribeToResult.js","../../../../node_modules/rxjs/_esm5/internal/operators/audit.js","../../../../node_modules/rxjs/_esm5/internal/scheduler/Action.js","../../../../node_modules/rxjs/_esm5/internal/scheduler/AsyncAction.js","../../../../node_modules/rxjs/_esm5/internal/Scheduler.js","../../../../node_modules/rxjs/_esm5/internal/scheduler/AsyncScheduler.js","../../../../node_modules/rxjs/_esm5/internal/scheduler/async.js","../../../../node_modules/rxjs/_esm5/internal/util/isNumeric.js","../../../../node_modules/rxjs/_esm5/internal/util/isScheduler.js","../../../../node_modules/rxjs/_esm5/internal/operators/buffer.js","../../../../node_modules/rxjs/_esm5/internal/operators/bufferCount.js","../../../../node_modules/rxjs/_esm5/internal/operators/bufferTime.js","../../../../node_modules/rxjs/_esm5/internal/operators/bufferToggle.js","../../../../node_modules/rxjs/_esm5/internal/operators/bufferWhen.js","../../../../node_modules/rxjs/_esm5/internal/operators/catchError.js","../../../../node_modules/rxjs/_esm5/internal/observable/fromArray.js","../../../../node_modules/rxjs/_esm5/internal/observable/combineLatest.js","../../../../node_modules/rxjs/_esm5/internal/observable/empty.js","../../../../node_modules/rxjs/_esm5/internal/observable/scalar.js","../../../../node_modules/rxjs/_esm5/internal/observable/of.js","../../../../node_modules/rxjs/_esm5/internal/operators/map.js","../../../../node_modules/rxjs/_esm5/internal/operators/mergeMap.js","../../../../node_modules/rxjs/_esm5/internal/operators/count.js","../../../../node_modules/rxjs/_esm5/internal/operators/debounce.js","../../../../node_modules/rxjs/_esm5/internal/operators/debounceTime.js","../../../../node_modules/rxjs/_esm5/internal/operators/defaultIfEmpty.js","../../../../node_modules/rxjs/_esm5/internal/observable/throwError.js","../../../../node_modules/rxjs/_esm5/internal/Notification.js","../../../../node_modules/rxjs/_esm5/internal/operators/delay.js","../../../../node_modules/rxjs/_esm5/internal/operators/delayWhen.js","../../../../node_modules/rxjs/_esm5/internal/operators/dematerialize.js","../../../../node_modules/rxjs/_esm5/internal/operators/distinct.js","../../../../node_modules/rxjs/_esm5/internal/operators/distinctUntilChanged.js","../../../../node_modules/rxjs/_esm5/internal/util/ArgumentOutOfRangeError.js","../../../../node_modules/rxjs/_esm5/internal/operators/filter.js","../../../../node_modules/rxjs/_esm5/internal/operators/tap.js","../../../../node_modules/rxjs/_esm5/internal/util/EmptyError.js","../../../../node_modules/rxjs/_esm5/internal/operators/take.js","../../../../node_modules/rxjs/_esm5/internal/operators/every.js","../../../../node_modules/rxjs/_esm5/internal/operators/exhaust.js","../../../../node_modules/rxjs/_esm5/internal/operators/exhaustMap.js","../../../../node_modules/rxjs/_esm5/internal/operators/expand.js","../../../../node_modules/rxjs/_esm5/internal/operators/finalize.js","../../../../node_modules/rxjs/_esm5/internal/operators/find.js","../../../../node_modules/rxjs/_esm5/internal/util/ObjectUnsubscribedError.js","../../../../node_modules/rxjs/_esm5/internal/SubjectSubscription.js","../../../../node_modules/rxjs/_esm5/internal/Subject.js","../../../../node_modules/rxjs/_esm5/internal/operators/groupBy.js","../../../../node_modules/rxjs/_esm5/internal/operators/ignoreElements.js","../../../../node_modules/rxjs/_esm5/internal/operators/isEmpty.js","../../../../node_modules/rxjs/_esm5/internal/operators/takeLast.js","../../../../node_modules/rxjs/_esm5/internal/operators/mapTo.js","../../../../node_modules/rxjs/_esm5/internal/operators/materialize.js","../../../../node_modules/rxjs/_esm5/internal/operators/scan.js","../../../../node_modules/rxjs/_esm5/internal/operators/mergeScan.js","../../../../node_modules/rxjs/_esm5/internal/operators/refCount.js","../../../../node_modules/rxjs/_esm5/internal/observable/ConnectableObservable.js","../../../../node_modules/rxjs/_esm5/internal/operators/observeOn.js","../../../../node_modules/rxjs/_esm5/internal/operators/onErrorResumeNext.js","../../../../node_modules/rxjs/_esm5/internal/operators/pairwise.js","../../../../node_modules/rxjs/_esm5/internal/BehaviorSubject.js","../../../../node_modules/rxjs/_esm5/internal/AsyncSubject.js","../../../../node_modules/rxjs/_esm5/internal/scheduler/QueueAction.js","../../../../node_modules/rxjs/_esm5/internal/scheduler/QueueScheduler.js","../../../../node_modules/rxjs/_esm5/internal/scheduler/queue.js","../../../../node_modules/rxjs/_esm5/internal/ReplaySubject.js","../../../../node_modules/rxjs/_esm5/internal/observable/race.js","../../../../node_modules/rxjs/_esm5/internal/operators/repeat.js","../../../../node_modules/rxjs/_esm5/internal/operators/repeatWhen.js","../../../../node_modules/rxjs/_esm5/internal/operators/retry.js","../../../../node_modules/rxjs/_esm5/internal/operators/retryWhen.js","../../../../node_modules/rxjs/_esm5/internal/operators/sample.js","../../../../node_modules/rxjs/_esm5/internal/operators/sampleTime.js","../../../../node_modules/rxjs/_esm5/internal/operators/sequenceEqual.js","../../../../node_modules/rxjs/_esm5/internal/operators/single.js","../../../../node_modules/rxjs/_esm5/internal/operators/skip.js","../../../../node_modules/rxjs/_esm5/internal/operators/skipLast.js","../../../../node_modules/rxjs/_esm5/internal/operators/skipUntil.js","../../../../node_modules/rxjs/_esm5/internal/operators/skipWhile.js","../../../../node_modules/rxjs/_esm5/internal/util/Immediate.js","../../../../node_modules/rxjs/_esm5/internal/scheduler/AsapAction.js","../../../../node_modules/rxjs/_esm5/internal/scheduler/AsapScheduler.js","../../../../node_modules/rxjs/_esm5/internal/scheduler/asap.js","../../../../node_modules/rxjs/_esm5/internal/observable/SubscribeOnObservable.js","../../../../node_modules/rxjs/_esm5/internal/operators/switchMap.js","../../../../node_modules/rxjs/_esm5/internal/operators/takeUntil.js","../../../../node_modules/rxjs/_esm5/internal/operators/takeWhile.js","../../../../node_modules/rxjs/_esm5/internal/operators/throttle.js","../../../../node_modules/rxjs/_esm5/internal/operators/throttleTime.js","../../../../node_modules/rxjs/_esm5/internal/util/TimeoutError.js","../../../../node_modules/rxjs/_esm5/internal/operators/timeoutWith.js","../../../../node_modules/rxjs/_esm5/internal/operators/window.js","../../../../node_modules/rxjs/_esm5/internal/operators/windowCount.js","../../../../node_modules/rxjs/_esm5/internal/operators/windowTime.js","../../../../node_modules/rxjs/_esm5/internal/operators/windowToggle.js","../../../../node_modules/rxjs/_esm5/internal/operators/windowWhen.js","../../../../node_modules/rxjs/_esm5/internal/operators/withLatestFrom.js","../../../../node_modules/rxjs/_esm5/internal/observable/zip.js","../../src/services/joyride.service.ts","../../src/components/button/button.component.ts","../../src/components/close-button/close-button.component.ts","../../src/components/arrow/arrow.component.ts","../../src/joyride.module.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { JoyrideOptions } from \"../models/joyride-options.class\";\r\n\r\nexport const DEFAULT_THEME_COLOR = \"#3b5560\";\r\nexport const THEME_COLOR = DEFAULT_THEME_COLOR;\r\nexport const STEP_DEFAULT_POSITION = \"bottom\";\r\n\r\n@Injectable()\r\nexport class JoyrideOptionsService {\r\n\r\n    private themeColor: string = THEME_COLOR;\r\n    private stepDefaultPosition: string = STEP_DEFAULT_POSITION;\r\n    private logsEnabled: boolean = true;\r\n    private showCounter: boolean = true;\r\n    private showPrevButton: boolean = true;\r\n    private stepsOrder: string[] = [];\r\n    setOptions(options: JoyrideOptions) {\r\n        this.stepsOrder = options.steps;\r\n        this.stepDefaultPosition = options.stepDefaultPosition ? options.stepDefaultPosition : this.stepDefaultPosition;\r\n        this.logsEnabled = typeof options.logsEnabled !== 'undefined' ? options.logsEnabled : this.logsEnabled;\r\n        this.showCounter = typeof options.showCounter !== 'undefined' ? options.showCounter : this.showCounter;\r\n        this.showPrevButton = typeof options.showPrevButton !== 'undefined' ? options.showPrevButton : this.showPrevButton;\r\n        this.themeColor = options.themeColor ? options.themeColor : this.themeColor;\r\n    }\r\n\r\n    getBackdropColor() {\r\n        return this.hexToRgb(this.themeColor);\r\n    }\r\n\r\n    getThemeColor() {\r\n        return this.themeColor;\r\n    }\r\n\r\n    getStepDefaultPosition() {\r\n        return this.stepDefaultPosition;\r\n    }\r\n\r\n    getStepsOrder() {\r\n        return this.stepsOrder;\r\n    }\r\n\r\n    areLogsEnabled() {\r\n        return this.logsEnabled;\r\n    }\r\n\r\n    isCounterVisible() {\r\n        return this.showCounter;\r\n    }\r\n\r\n    isPrevButtonVisible() {\r\n        return this.showPrevButton;\r\n    }\r\n\r\n    private hexToRgb(hex: any): string {\r\n        var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\r\n        hex = hex.replace(shorthandRegex, (m: any, r: any, g: any, b: any) => {\r\n            return r + r + g + g + b + b;\r\n        });\r\n\r\n        var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n        return result ?\r\n            `${parseInt(result[1], 16)}, ${parseInt(result[2], 16)}, ${parseInt(result[3], 16)}` : null;\r\n    }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { JoyrideStep } from \"../models/joyride-step.class\";\r\nimport { Subject } from \"rxjs\";\r\nimport { JoyrideOptionsService } from \"./joyride-options.service\";\r\n\r\nconst ROUTE_SEPARATOR = '@';\r\n\r\n@Injectable()\r\nexport class JoyrideStepsContainerService {\r\n    private steps: JoyrideStep[];\r\n    private stepsOriginal: JoyrideStep[];\r\n    stepHasBeenModified: Subject<JoyrideStep> = new Subject<JoyrideStep>();\r\n\r\n    constructor(\r\n        private readonly stepOptions: JoyrideOptionsService\r\n    ) {\r\n        this.stepsOriginal = [];\r\n        this.steps = [];\r\n    }\r\n\r\n    get(index: number): JoyrideStep {\r\n        return this.steps[index];\r\n    }\r\n\r\n    getStepRoute(index: number) {\r\n        let stepsOrder = this.stepOptions.getStepsOrder();\r\n        let stepID = stepsOrder[index];\r\n        let stepRoute = stepID && stepID.includes(ROUTE_SEPARATOR) ? stepID.split(ROUTE_SEPARATOR)[1] : \"\";\r\n        return stepRoute;\r\n    }\r\n\r\n    getStepPosition(step: JoyrideStep): number {\r\n        return this.getStepIndex(step) + 1;\r\n    }\r\n\r\n    addStep(stepToAdd: JoyrideStep) {\r\n        let stepExist = this.stepsOriginal.filter(step => step.name === stepToAdd.name).length > 0;\r\n        if (!stepExist) this.stepsOriginal.push(stepToAdd);\r\n        else {\r\n            let stepIndexToReplace = this.stepsOriginal.findIndex(step => step.name === stepToAdd.name);\r\n            this.stepsOriginal[stepIndexToReplace] = stepToAdd;\r\n        }\r\n    }\r\n\r\n    getNumberOfSteps() {\r\n        let stepsOrder = this.stepOptions.getStepsOrder();\r\n        return stepsOrder.length;\r\n    }\r\n\r\n    setPosition(step: JoyrideStep, position: string) {\r\n        let index = this.getStepIndex(step);\r\n        this.steps[index].position = position;\r\n        this.stepHasBeenModified.next(this.steps[index]);\r\n    }\r\n\r\n    initSteps() {\r\n        this.steps = [];\r\n        this.stepsOriginal.forEach((step) => this.steps.push({ ...step }));\r\n        this.sortSteps();\r\n    }\r\n\r\n    private sortSteps() {\r\n        let orderedSteps: JoyrideStep[] = [];\r\n        let stepsOrder = this.stepOptions.getStepsOrder();\r\n\r\n        stepsOrder.forEach((stepID) => {\r\n            let step = this.steps.find((step) => step.name === this.getStepName(stepID));\r\n            if (step) orderedSteps.push(step);\r\n        });\r\n\r\n        this.steps = [...orderedSteps];\r\n    }\r\n\r\n    private getStepIndex(step: JoyrideStep) {\r\n        return this.steps.findIndex((s) => step.name + step.route === s.name + s.route);\r\n    }\r\n\r\n    private getStepName(stepID: string): string {\r\n        let stepName = stepID && stepID.includes(ROUTE_SEPARATOR) ? stepID.split(ROUTE_SEPARATOR)[0] : stepID;\r\n        return stepName;\r\n    }\r\n}","export class JoyrideError extends Error {\r\n}","import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\r\nimport { isPlatformBrowser } from '@angular/common';\r\n\r\n@Injectable()\r\nexport class DomRefService {\r\n\r\n    private fakeDocument: Document = <Document>{ body: {}, documentElement: {} };\r\n    private fakeWindow: Window = <Window>{ document: this.fakeDocument};\r\n    constructor(\r\n        @Inject(PLATFORM_ID) private platformId: Object\r\n    ) { }\r\n    getNativeWindow(): Window {\r\n        if (isPlatformBrowser(this.platformId)) return window;\r\n        else return this.fakeWindow;\r\n    }\r\n\r\n    getNativeDocument() {\r\n        if (isPlatformBrowser(this.platformId)) return document;\r\n        else return this.fakeDocument;\r\n    }\r\n}","import { Directive, ElementRef, AfterViewInit, Input, ViewContainerRef, ViewChild, Renderer2, TemplateRef, Output, EventEmitter, Inject, PLATFORM_ID } from '@angular/core';\r\nimport { JoyrideStep } from \"../models/joyride-step.class\";\r\nimport { JoyrideStepsContainerService } from \"../services/joyride-steps-container.service\";\r\nimport { JoyrideError } from \"../models/joyride-error.class\";\r\nimport { Router } from '@angular/router';\r\nimport { DomRefService } from '../services/dom.service';\r\nimport { isPlatformBrowser } from '@angular/common';\r\n\r\nexport const NO_POSITION = \"NO_POSITION\";\r\n\r\n@Directive({\r\n    selector: 'joyrideStep, [joyrideStep]'\r\n})\r\nexport class JoyrideDirective implements AfterViewInit {\r\n\r\n    @Input(\"joyrideStep\")\r\n    name: string;\r\n\r\n    @Input()\r\n    nextStep?: string;\r\n\r\n    @Input()\r\n    title?: string;\r\n\r\n    @Input()\r\n    text?: string;\r\n\r\n    @Input()\r\n    stepPosition?: string = NO_POSITION;\r\n\r\n    @Input()\r\n    stepContent?: TemplateRef<any>;\r\n\r\n    @Input()\r\n    stepContentParams?: Object;\r\n\r\n    @Output()\r\n    prev?: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    @Output()\r\n    next?: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    @Output()\r\n    done?: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n    private windowRef: Window;\r\n\r\n\r\n    constructor(\r\n        private readonly joyrideStepsContainer: JoyrideStepsContainerService,\r\n        private readonly viewContainerRef: ViewContainerRef,\r\n        private readonly domService: DomRefService,\r\n        private readonly router: Router,\r\n        @Inject(PLATFORM_ID) private platformId: Object\r\n\r\n    ) {\r\n        this.windowRef = this.domService.getNativeWindow()\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        if (!isPlatformBrowser(this.platformId)) return;\r\n        let step = new JoyrideStep();\r\n        step.position = this.stepPosition;\r\n        step.targetViewContainer = this.viewContainerRef;\r\n        step.text = this.text;\r\n        step.title = this.title;\r\n        step.stepContent = this.stepContent;\r\n        step.stepContentParams = this.stepContentParams;\r\n        step.nextClicked = this.next;\r\n        step.prevCliked = this.prev;\r\n        step.tourDone = this.done;\r\n        if (!this.name) throw new JoyrideError(\"All the steps should have the 'joyrideStep' property set with a custom name.\");\r\n        step.name = this.name;\r\n        step.route = this.router.url.substr(0, 1) === '/' ? this.router.url.substr(1) : this.router.url;\r\n        step.transformCssStyle = this.windowRef.getComputedStyle(this.viewContainerRef.element.nativeElement).transform;\r\n        step.isElementOrAncestorFixed = this.isElementFixed(this.viewContainerRef.element) || this.isAncestorsFixed(this.viewContainerRef.element.nativeElement.parentElement);\r\n\r\n        this.joyrideStepsContainer.addStep(step);\r\n    }\r\n\r\n    private isElementFixed(element: ElementRef) {\r\n        return this.windowRef.getComputedStyle(element.nativeElement).position === 'fixed';\r\n    }\r\n\r\n    private isAncestorsFixed(nativeElement: any): boolean {\r\n        if (!nativeElement.parentElement) return false;\r\n        let isElementFixed = this.windowRef.getComputedStyle(nativeElement.parentElement).position === 'fixed';\r\n        if (nativeElement.nodeName === 'BODY') {\r\n            return isElementFixed;\r\n        }\r\n        if (isElementFixed) return true;\r\n        else return this.isAncestorsFixed(nativeElement.parentElement);\r\n    }\r\n\r\n}","import { Injectable, ElementRef } from \"@angular/core\";\r\nimport { DomRefService } from \"./dom.service\";\r\n\r\n@Injectable()\r\nexport class DocumentService {\r\n    private documentHeight: number;\r\n\r\n    constructor(private readonly DOMService: DomRefService) { \r\n        this.setDocumentHeight();\r\n    }\r\n\r\n    \r\n    getElementFixedTop(elementRef: ElementRef) {\r\n        return elementRef.nativeElement.getBoundingClientRect().top;\r\n    }\r\n\r\n    getElementFixedLeft(elementRef: ElementRef) {\r\n        return elementRef.nativeElement.getBoundingClientRect().left;\r\n    }\r\n\r\n    getElementAbsoluteTop(elementRef: ElementRef) {\r\n        var scrollOffsets = this.getScrollOffsets();\r\n        return elementRef.nativeElement.getBoundingClientRect().top + scrollOffsets.y;\r\n    }\r\n\r\n    getElementAbsoluteLeft(elementRef: ElementRef) {\r\n        var scrollOffsets = this.getScrollOffsets();\r\n        return elementRef.nativeElement.getBoundingClientRect().left + scrollOffsets.x;\r\n    }\r\n\r\n    getElementAbsoluteRight(elementRef: ElementRef) {\r\n        var scrollOffsets = this.getScrollOffsets();\r\n        return elementRef.nativeElement.getBoundingClientRect().right;\r\n    }\r\n\r\n    setDocumentHeight(){\r\n        this.documentHeight = this.calculateDocumentHeight();\r\n    }\r\n\r\n    getDocumentHeight(){\r\n        return this.documentHeight;\r\n    }\r\n\r\n    private calculateDocumentHeight() {\r\n        var doc = this.DOMService.getNativeDocument();\r\n        return Math.max(\r\n            doc.body.scrollHeight, doc.documentElement.scrollHeight,\r\n            doc.body.offsetHeight, doc.documentElement.offsetHeight,\r\n            doc.body.clientHeight, doc.documentElement.clientHeight\r\n        );\r\n    }\r\n\r\n    private getScrollOffsets() {\r\n        var w = this.DOMService.getNativeWindow();\r\n\r\n        // This works for all browsers except IE versions 8 and before\r\n        if (w.pageXOffset != null) return { x: w.pageXOffset, y: w.pageYOffset };\r\n        // For IE (or any browser) in Standards mode\r\n        var d = w.document;\r\n        if (document.compatMode == \"CSS1Compat\")\r\n            return { x: d.documentElement.scrollLeft, y: d.documentElement.scrollTop };\r\n        // For browsers in Quirks mode\r\n        return { x: d.body.scrollLeft, y: d.body.scrollTop };\r\n    }\r\n}","import { Injectable, Renderer2, ElementRef, RendererFactory2, ViewContainerRef, RendererType2 } from \"@angular/core\";\r\nimport { DocumentService } from \"./document.service\";\r\nimport { Scroll } from \"./event-listener.service\";\r\nimport { JoyrideOptionsService } from \"./joyride-options.service\";\r\nimport { JoyrideStep } from \"../models/joyride-step.class\";\r\n\r\n@Injectable()\r\nexport class JoyrideBackdropService {\r\n\r\n    private renderer: Renderer2;\r\n    private backdropContainer: any;\r\n    private backdropContent: any;\r\n    private backdropTop: any;\r\n    private backdropBottom: any;\r\n    private backdropMiddleContainer: any;\r\n    private backdropMiddleContent: any;\r\n    private leftBackdrop: any;\r\n    private targetBackdrop: any;\r\n    private rightBackdrop: any;\r\n    private elementRef: ViewContainerRef;\r\n    private targetAbsoluteTop: number;\r\n    private targetAbsoluteLeft: number;\r\n    private lastXScroll: number = 0;\r\n    private lastYScroll: number = 0;\r\n\r\n    constructor(\r\n        private readonly documentService: DocumentService,\r\n        private readonly optionsService: JoyrideOptionsService,\r\n        private readonly rendererFactory: RendererFactory2\r\n    ) {\r\n         this.setRenderer()\r\n    }\r\n\r\n    private setRenderer() {\r\n        this.renderer = this.rendererFactory.createRenderer(null, null);\r\n    }\r\n\r\n    show(step: JoyrideStep) {\r\n\r\n        this.elementRef = step.targetViewContainer;\r\n        this.targetAbsoluteTop = this.getTargetTotalTop(step);\r\n        this.targetAbsoluteLeft = this.getTargetTotalLeft(step);\r\n\r\n        this.backdropContainer = this.renderer.createElement('div');\r\n        this.renderer.addClass(this.backdropContainer, \"backdrop-container\");\r\n        this.renderer.setStyle(this.backdropContainer, \"position\", \"fixed\");\r\n        this.renderer.setStyle(this.backdropContainer, \"top\", \"0px\");\r\n        this.renderer.setStyle(this.backdropContainer, \"left\", \"0px\");\r\n        this.renderer.setStyle(this.backdropContainer, \"width\", \"100%\");\r\n        this.renderer.setStyle(this.backdropContainer, \"height\", \"100%\");\r\n        this.renderer.setStyle(this.backdropContainer, \"z-index\", \"1000\");\r\n        this.renderer.appendChild(document.body, this.backdropContainer);\r\n\r\n        this.backdropContent = this.renderer.createElement('div');\r\n        this.renderer.addClass(this.backdropContent, \"backdrop-content\");\r\n        this.renderer.setStyle(this.backdropContent, \"position\", \"relative\");\r\n        this.renderer.setStyle(this.backdropContent, \"height\", \"100%\");\r\n        this.renderer.setStyle(this.backdropContent, \"display\", \"flex\");\r\n        this.renderer.setStyle(this.backdropContent, \"flex-direction\", \"column\");\r\n        this.renderer.appendChild(this.backdropContainer, this.backdropContent);\r\n\r\n        this.backdropTop = this.renderer.createElement('div');\r\n        this.renderer.addClass(this.backdropTop, \"joyride-backdrop\");\r\n        this.renderer.addClass(this.backdropTop, \"backdrop-top\");\r\n        this.renderer.setStyle(this.backdropTop, \"width\", \"100%\");\r\n        this.renderer.setStyle(this.backdropTop, \"height\", this.targetAbsoluteTop - this.lastYScroll + 'px');\r\n        this.renderer.setStyle(this.backdropTop, \"flex-shrink\", \"0\");\r\n        this.renderer.setStyle(this.backdropTop, \"background-color\", `rgba(${this.optionsService.getBackdropColor()}, 0.7)`);\r\n        this.renderer.appendChild(this.backdropContent, this.backdropTop);\r\n\r\n        this.backdropMiddleContainer = this.renderer.createElement('div');\r\n        this.renderer.addClass(this.backdropMiddleContainer, \"backdrop-middle-container\");\r\n        this.renderer.setStyle(this.backdropMiddleContainer, \"height\", this.elementRef.element.nativeElement.offsetHeight + 'px');\r\n        this.renderer.setStyle(this.backdropMiddleContainer, \"width\", \"100%\");\r\n        this.renderer.setStyle(this.backdropMiddleContainer, \"flex-shrink\", \"0\");\r\n        this.renderer.appendChild(this.backdropContent, this.backdropMiddleContainer);\r\n\r\n        this.backdropMiddleContent = this.renderer.createElement('div');\r\n        this.renderer.addClass(this.backdropMiddleContent, \"backdrop-middle-content\");\r\n        this.renderer.setStyle(this.backdropMiddleContent, \"display\", \"flex\");\r\n        this.renderer.setStyle(this.backdropMiddleContent, \"width\", \"100%\");\r\n        this.renderer.setStyle(this.backdropMiddleContent, \"height\", \"100%\");\r\n        this.renderer.appendChild(this.backdropMiddleContainer, this.backdropMiddleContent);\r\n\r\n        this.leftBackdrop = this.renderer.createElement('div');\r\n        this.renderer.addClass(this.leftBackdrop, \"joyride-backdrop\");\r\n        this.renderer.addClass(this.leftBackdrop, \"backdrop-left\");\r\n        this.renderer.setStyle(this.leftBackdrop, \"flex-shrink\", \"0\");\r\n        this.renderer.setStyle(this.leftBackdrop, \"width\", this.targetAbsoluteLeft - this.lastXScroll + \"px\");\r\n        this.renderer.setStyle(this.leftBackdrop, \"background-color\", `rgba(${this.optionsService.getBackdropColor()}, 0.7)`);\r\n        this.renderer.appendChild(this.backdropMiddleContent, this.leftBackdrop);\r\n\r\n        this.targetBackdrop = this.renderer.createElement('div');\r\n        this.renderer.addClass(this.targetBackdrop, \"backdrop-target\");\r\n        this.renderer.setStyle(this.targetBackdrop, \"flex-shrink\", \"0\");\r\n        this.renderer.setStyle(this.targetBackdrop, \"width\", this.elementRef.element.nativeElement.offsetWidth + 'px');\r\n        this.renderer.appendChild(this.backdropMiddleContent, this.targetBackdrop);\r\n\r\n        this.rightBackdrop = this.renderer.createElement('div');\r\n        this.renderer.addClass(this.rightBackdrop, \"joyride-backdrop\");\r\n        this.renderer.addClass(this.rightBackdrop, \"backdrop-right\");\r\n        this.renderer.setStyle(this.rightBackdrop, \"width\", \"100%\");\r\n        this.renderer.setStyle(this.rightBackdrop, \"background-color\", `rgba(${this.optionsService.getBackdropColor()}, 0.7)`);\r\n        this.renderer.appendChild(this.backdropMiddleContent, this.rightBackdrop);\r\n\r\n        this.backdropBottom = this.renderer.createElement('div');\r\n        this.renderer.addClass(this.backdropBottom, \"joyride-backdrop\");\r\n        this.renderer.addClass(this.backdropBottom, \"backdrop-bottom\");\r\n        this.renderer.setStyle(this.backdropBottom, \"width\", \"100%\");\r\n        this.renderer.setStyle(this.backdropBottom, \"height\", \"100%\");\r\n        this.renderer.setStyle(this.backdropBottom, \"background-color\", `rgba(${this.optionsService.getBackdropColor()}, 0.7)`);\r\n        this.renderer.appendChild(this.backdropContent, this.backdropBottom);\r\n\r\n    }\r\n\r\n    hide() {\r\n        this.removeBackdrop();\r\n        this.elementRef = undefined;\r\n    }\r\n\r\n    redrawTarget(step: JoyrideStep) {\r\n        this.targetAbsoluteLeft = this.getTargetTotalLeft(step);\r\n        this.targetAbsoluteTop = this.getTargetTotalTop(step);\r\n        this.handleVerticalScroll(step);\r\n        this.handleHorizontalScroll(step);\r\n    }\r\n\r\n    private getTargetTotalTop(step: JoyrideStep) {\r\n        let targetVC = step.targetViewContainer;\r\n        return step.isElementOrAncestorFixed ?\r\n            this.documentService.getElementFixedTop(targetVC.element)\r\n            : this.documentService.getElementAbsoluteTop(targetVC.element)\r\n    }\r\n\r\n    private getTargetTotalLeft(step: JoyrideStep) {\r\n        let targetVC = step.targetViewContainer;\r\n\r\n        return step.isElementOrAncestorFixed ?\r\n            this.documentService.getElementFixedLeft(targetVC.element)\r\n            : this.documentService.getElementAbsoluteLeft(targetVC.element)\r\n    }\r\n    redraw(step: JoyrideStep, scroll: Scroll) {\r\n        if (this.lastYScroll !== scroll.scrollY) {\r\n            this.lastYScroll = scroll.scrollY;\r\n            if (this.elementRef) {\r\n                this.handleVerticalScroll(step);\r\n            }\r\n\r\n        }\r\n        if (this.lastXScroll !== scroll.scrollX) {\r\n            this.lastXScroll = scroll.scrollX;\r\n            if (this.elementRef) {\r\n                this.handleHorizontalScroll(step);\r\n            }\r\n        }\r\n    }\r\n\r\n    private handleHorizontalScroll(step: JoyrideStep) {\r\n        let newBackdropLeftWidth = step.isElementOrAncestorFixed ?\r\n            this.targetAbsoluteLeft :\r\n            this.targetAbsoluteLeft - this.lastXScroll;\r\n\r\n        if (newBackdropLeftWidth >= 0) {\r\n            this.renderer.setStyle(this.leftBackdrop, \"width\", newBackdropLeftWidth + 'px');\r\n            this.renderer.setStyle(this.targetBackdrop, \"width\", this.elementRef.element.nativeElement.offsetWidth + 'px')\r\n        }\r\n        else {\r\n            this.handleTargetPartialWidth(newBackdropLeftWidth);\r\n        }\r\n    }\r\n\r\n    private handleTargetPartialWidth(newBackdropLeftWidth: number) {\r\n        this.renderer.setStyle(this.leftBackdrop, \"width\", 0 + 'px');\r\n        let visibleTargetWidth = this.elementRef.element.nativeElement.offsetWidth + newBackdropLeftWidth;\r\n        if (visibleTargetWidth >= 0) {\r\n            this.renderer.setStyle(this.targetBackdrop, \"width\", visibleTargetWidth + 'px');\r\n\r\n        } else {\r\n            this.renderer.setStyle(this.targetBackdrop, \"width\", 0 + 'px');\r\n        }\r\n    }\r\n\r\n    private handleVerticalScroll(step: JoyrideStep) {\r\n        let newBackdropTopHeight = step.isElementOrAncestorFixed ?\r\n            this.targetAbsoluteTop :\r\n            this.targetAbsoluteTop - this.lastYScroll;\r\n\r\n        if (newBackdropTopHeight >= 0) {\r\n            this.renderer.setStyle(this.backdropTop, \"height\", newBackdropTopHeight + 'px');\r\n            this.renderer.setStyle(this.backdropMiddleContainer, \"height\", this.elementRef.element.nativeElement.offsetHeight + 'px')\r\n        }\r\n        else {\r\n            this.handleTargetPartialHeight(newBackdropTopHeight);\r\n        }\r\n    }\r\n\r\n    private handleTargetPartialHeight(newBackdropTopHeight: number) {\r\n        this.renderer.setStyle(this.backdropTop, \"height\", 0 + 'px');\r\n        let visibleTargetHeight = this.elementRef.element.nativeElement.offsetHeight + newBackdropTopHeight;\r\n        if (visibleTargetHeight >= 0) {\r\n            this.renderer.setStyle(this.backdropMiddleContainer, \"height\", visibleTargetHeight + 'px');\r\n\r\n        } else {\r\n            this.renderer.setStyle(this.backdropMiddleContainer, \"height\", 0 + 'px');\r\n        }\r\n    }\r\n\r\n    private removeBackdrop() {\r\n        this.renderer.removeChild(document.body, this.backdropContainer);\r\n    }\r\n}","import { Injectable, Renderer2, RendererFactory2 } from \"@angular/core\";\r\nimport { Subject } from \"rxjs\";\r\nimport { DomRefService } from \"./dom.service\";\r\n\r\nexport class Scroll {\r\n    scrollX: number;\r\n    scrollY: number;\r\n}\r\n\r\n@Injectable()\r\nexport class EventListenerService {\r\n\r\n    private renderer: Renderer2;\r\n    private scrollUnlisten: any;\r\n    private resizeUnlisten: any;\r\n\r\n    scrollEvent: Subject<Scroll> = new Subject<Scroll>();\r\n    resizeEvent: Subject<number> = new Subject<number>();\r\n\r\n    constructor(\r\n        private readonly rendererFactory: RendererFactory2,\r\n        private readonly DOMService: DomRefService\r\n    ) {\r\n        this.renderer = rendererFactory.createRenderer(null, null);\r\n    }\r\n\r\n    startListeningScrollEvents() {\r\n        this.scrollUnlisten = this.renderer.listen('document', 'scroll', (evt) => {\r\n            this.scrollEvent.next({ scrollX: this.DOMService.getNativeWindow().pageXOffset, scrollY: this.DOMService.getNativeWindow().pageYOffset });\r\n        })\r\n    }\r\n\r\n    startListeningResizeEvents() {\r\n        this.resizeUnlisten = this.renderer.listen('window', 'resize', (evt) => {\r\n            this.resizeEvent.next(null);\r\n        })\r\n    }\r\n\r\n    stopListeningScrollEvents() {\r\n        this.scrollUnlisten();\r\n    }\r\n\r\n    stopListeningResizeEvents() {\r\n        this.resizeUnlisten();\r\n    }\r\n\r\n}","import { Injectable } from '@angular/core';\r\nimport { JoyrideOptionsService } from './joyride-options.service';\r\n\r\nconst JOYRIDE = 'ngx-joyride:::';\r\n\r\n@Injectable()\r\nexport class LoggerService {\r\n\r\n    constructor(private readonly optionService: JoyrideOptionsService) { }\r\n\r\n    debug(message?: string, data: any = \"\") {\r\n        if (this.optionService.areLogsEnabled) {\r\n            console.debug(JOYRIDE + message, data);\r\n        }\r\n    }\r\n\r\n    info(message?: string, data: any = \"\") {\r\n        if (this.optionService.areLogsEnabled) {\r\n            console.info(JOYRIDE + message, data);\r\n        }\r\n    }\r\n\r\n    warn(message?: string, data: any = \"\") {\r\n        if (this.optionService.areLogsEnabled) {\r\n            console.warn(JOYRIDE + message, data);\r\n        }\r\n    }\r\n\r\n    error(message?: string, data: any = \"\") {\r\n        if (this.optionService.areLogsEnabled) {\r\n            console.error(JOYRIDE + message, data);\r\n        }\r\n    }\r\n\r\n}","import { Component, Input, AfterViewInit, ViewEncapsulation, OnInit, OnDestroy, ViewContainerRef, ElementRef, ViewChild, Renderer2, Injector, TemplateRef, Inject } from \"@angular/core\";\r\nimport { JoyrideStep } from \"../../models/joyride-step.class\";\r\nimport { JoyrideStepService, ARROW_SIZE, DISTANCE_FROM_TARGET, IJoyrideStepService } from \"../../services/joyride-step.service\";\r\nimport { JoyrideStepsContainerService } from \"../../services/joyride-steps-container.service\";\r\nimport { EventListenerService } from \"../../services/event-listener.service\";\r\nimport { Subscription } from \"rxjs\";\r\nimport { DocumentService } from \"../../services/document.service\";\r\nimport { JoyrideOptionsService } from \"../../services/joyride-options.service\";\r\nimport { LoggerService } from \"../../services/logger.service\";\r\n\r\nconst STEP_MIN_WIDTH = 200;\r\nconst STEP_MAX_WIDTH = 400;\r\nconst STEP_HEIGHT = 200;\r\nconst ASPECT_RATIO = 1.212;\r\nconst DEFAULT_DISTANCE_FROM_MARGIN_TOP = 2;\r\nconst DEFAULT_DISTANCE_FROM_MARGIN_LEFT = 2;\r\nconst DEFAULT_DISTANCE_FROM_MARGIN_BOTTOM = 5;\r\nconst DEFAULT_DISTANCE_FROM_MARGIN_RIGHT = 5;\r\n\r\n@Component({\r\n    selector: 'joyride-step',\r\n    templateUrl: './joyride-step.component.html',\r\n    styleUrls: ['./joyride-step.component.scss'],\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\n\r\nexport class JoyrideStepComponent implements OnInit, OnDestroy, AfterViewInit {\r\n\r\n    stepWidth: number = STEP_MIN_WIDTH;\r\n    stepHeight: number = STEP_HEIGHT;\r\n    leftPosition: number;\r\n    topPosition: number;\r\n    showArrow: boolean = true;\r\n    arrowPosition: string;\r\n    arrowLeftPosition: number;\r\n    arrowTopPosition: number;\r\n    title: string;\r\n    text: string;\r\n    counter: string;\r\n    isCounterVisible: boolean;\r\n    isPrevButtonVisible: boolean;\r\n    themeColor: string;\r\n    customContent: TemplateRef<any>;\r\n    ctx: Object;\r\n\r\n    private arrowSize: number = ARROW_SIZE;\r\n    private stepAbsoluteLeft: number;\r\n    private stepAbsoluteTop: number;\r\n    private targetWidth: number;\r\n    targetHeight: number;\r\n    private targetAbsoluteLeft: number;\r\n    private targetAbsoluteTop: number;\r\n\r\n    private subscriptions: Subscription[] = [];\r\n    joyrideStepService: IJoyrideStepService;\r\n\r\n    private positionAlreadyFixed: boolean;\r\n    private documentHeight: number;\r\n\r\n    @Input() step?: JoyrideStep;\r\n    @ViewChild('stepHolder') stepHolder: ElementRef;\r\n    @ViewChild('stepContainer') stepContainer: ElementRef;\r\n\r\n    constructor(\r\n        private injector: Injector,\r\n        private readonly stepsContainerService: JoyrideStepsContainerService,\r\n        private readonly eventListenerService: EventListenerService,\r\n        private readonly documentService: DocumentService,\r\n        private readonly renderer: Renderer2,\r\n        private readonly logger: LoggerService,\r\n        private readonly optionsService: JoyrideOptionsService\r\n    ) { }\r\n\r\n    \r\n    ngOnInit(): void {\r\n        // Need to Inject here otherwise you will obtain a circular dependency\r\n        this.joyrideStepService = this.injector.get(JoyrideStepService)\r\n        \r\n        this.documentHeight = this.documentService.getDocumentHeight();\r\n        this.subscriptions.push(this.subscribeToResizeEvents());\r\n        this.title = this.step.title;\r\n        this.text = this.step.text;\r\n        this.customContent = this.step.stepContent;\r\n        this.ctx = this.step.stepContentParams;\r\n        this.counter = this.getCounter();\r\n        this.isCounterVisible = this.optionsService.isCounterVisible();\r\n        this.isPrevButtonVisible = this.optionsService.isPrevButtonVisible();\r\n        this.themeColor = this.optionsService.getThemeColor();\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        if (this.step.stepContent) {\r\n            this.stepWidth = this.stepContainer.nativeElement.clientWidth;\r\n            this.stepHeight = this.stepContainer.nativeElement.clientHeight;\r\n        }\r\n        else {\r\n            this.renderer.setStyle(this.stepContainer.nativeElement, \"max-width\", STEP_MAX_WIDTH + 'px');\r\n            let dimensions = this.getDimensionsByAspectRatio(this.stepContainer.nativeElement.clientWidth, this.stepContainer.nativeElement.clientHeight, ASPECT_RATIO);\r\n            dimensions = this.adjustDimensions(dimensions.width, dimensions.height);\r\n            this.stepWidth = dimensions.width;\r\n            this.stepHeight = dimensions.height;\r\n            this.renderer.setStyle(this.stepContainer.nativeElement, \"width\", this.stepWidth + 'px');\r\n            this.renderer.setStyle(this.stepContainer.nativeElement, \"height\", this.stepHeight + 'px');\r\n        }\r\n        this.drawStep();\r\n    }\r\n\r\n    private drawStep() {\r\n        let position = this.step.isElementOrAncestorFixed ? 'fixed' : 'absolute';\r\n        this.renderer.setStyle(this.stepHolder.nativeElement, \"position\", position);\r\n        this.renderer.setStyle(this.stepHolder.nativeElement, \"transform\", this.step.transformCssStyle);\r\n        this.targetWidth = this.step.targetViewContainer.element.nativeElement.getBoundingClientRect().width;\r\n        this.targetHeight = this.step.targetViewContainer.element.nativeElement.getBoundingClientRect().height;\r\n        this.targetAbsoluteLeft = position === 'fixed' ?\r\n            this.documentService.getElementFixedLeft(this.step.targetViewContainer.element)\r\n            : this.documentService.getElementAbsoluteLeft(this.step.targetViewContainer.element);\r\n        this.targetAbsoluteTop = position === 'fixed' ?\r\n            this.documentService.getElementFixedTop(this.step.targetViewContainer.element)\r\n            : this.documentService.getElementAbsoluteTop(this.step.targetViewContainer.element);\r\n        this.setStepStyle();\r\n    }\r\n\r\n    private getCounter(): string {\r\n        let stepPosition = this.stepsContainerService.getStepPosition(this.step);\r\n        let numberOfSteps = this.stepsContainerService.getNumberOfSteps();\r\n        return stepPosition + '/' + numberOfSteps;\r\n    }\r\n\r\n    prev() {\r\n        this.joyrideStepService.prev()\r\n    }\r\n\r\n    next() {\r\n        this.joyrideStepService.next();\r\n    }\r\n\r\n    close() {\r\n        this.joyrideStepService.close();\r\n    }\r\n\r\n    isFirstStep() {\r\n        return this.joyrideStepService.isFirstStep();\r\n    }\r\n\r\n    isLastStep() {\r\n        return this.joyrideStepService.isLastStep();\r\n    }\r\n\r\n    private setStepStyle() {\r\n        switch (this.step.position) {\r\n            case 'top': {\r\n                this.setStyleTop();\r\n                break;\r\n            }\r\n            case 'bottom': {\r\n                this.setStyleBottom();\r\n                break;\r\n            }\r\n            case 'right': {\r\n                this.setStyleRight();\r\n                break;\r\n            }\r\n            case 'left': {\r\n                this.setStyleLeft();\r\n                break;\r\n            }\r\n            case 'center': {\r\n                this.setStyleCenter();\r\n                break;\r\n            }\r\n            default: {\r\n                this.setStyleBottom();\r\n            }\r\n        }\r\n    }\r\n\r\n    private setStyleTop() {\r\n        this.stepsContainerService.setPosition(this.step, 'top');\r\n        this.topPosition = this.targetAbsoluteTop - DISTANCE_FROM_TARGET - this.stepHeight;\r\n        this.stepAbsoluteTop = this.targetAbsoluteTop - DISTANCE_FROM_TARGET - this.stepHeight;\r\n        this.arrowTopPosition = this.stepHeight;\r\n\r\n        this.leftPosition = this.targetWidth / 2 - this.stepWidth / 2 + this.targetAbsoluteLeft;\r\n        this.stepAbsoluteLeft = this.targetWidth / 2 - this.stepWidth / 2 + this.targetAbsoluteLeft;\r\n        this.arrowLeftPosition = this.stepWidth / 2 - this.arrowSize;\r\n        this.adjustLeftPosition();\r\n        this.adjustRightPosition();\r\n        this.arrowPosition = 'bottom';\r\n        this.autofixTopPosition();\r\n    }\r\n\r\n    private setStyleRight() {\r\n        this.stepsContainerService.setPosition(this.step, 'right');\r\n        this.topPosition = this.targetAbsoluteTop + this.targetHeight / 2 - this.stepHeight / 2;\r\n        this.stepAbsoluteTop = this.targetAbsoluteTop + this.targetHeight / 2 - this.stepHeight / 2;\r\n        this.arrowTopPosition = this.stepHeight / 2 - this.arrowSize;\r\n\r\n        this.leftPosition = this.targetAbsoluteLeft + this.targetWidth + DISTANCE_FROM_TARGET;\r\n        this.stepAbsoluteLeft = this.targetAbsoluteLeft + this.targetWidth + DISTANCE_FROM_TARGET;\r\n        this.arrowLeftPosition = - this.arrowSize;\r\n        this.adjustTopPosition();\r\n        this.adjustBottomPosition();\r\n        this.arrowPosition = 'left';\r\n        this.autofixRightPosition();\r\n    }\r\n\r\n    private setStyleBottom() {\r\n        this.stepsContainerService.setPosition(this.step, 'bottom');\r\n        this.topPosition = this.targetAbsoluteTop + this.targetHeight + DISTANCE_FROM_TARGET;\r\n        this.stepAbsoluteTop = this.targetAbsoluteTop + this.targetHeight + DISTANCE_FROM_TARGET;\r\n        this.arrowTopPosition = -this.arrowSize;\r\n\r\n        this.arrowLeftPosition = this.stepWidth / 2 - this.arrowSize;\r\n        this.leftPosition = this.targetWidth / 2 - this.stepWidth / 2 + this.targetAbsoluteLeft;\r\n        this.stepAbsoluteLeft = this.targetWidth / 2 - this.stepWidth / 2 + this.targetAbsoluteLeft;\r\n        this.adjustLeftPosition();\r\n        this.adjustRightPosition();\r\n        this.arrowPosition = 'top';\r\n        this.autofixBottomPosition()\r\n    }\r\n\r\n    private setStyleLeft() {\r\n        this.stepsContainerService.setPosition(this.step, 'left');\r\n        this.topPosition = this.targetAbsoluteTop + this.targetHeight / 2 - this.stepHeight / 2;\r\n        this.stepAbsoluteTop = this.targetAbsoluteTop + this.targetHeight / 2 - this.stepHeight / 2;\r\n        this.arrowTopPosition = this.stepHeight / 2 - this.arrowSize;\r\n\r\n        this.leftPosition = this.targetAbsoluteLeft - this.stepWidth - DISTANCE_FROM_TARGET;\r\n        this.stepAbsoluteLeft = this.targetAbsoluteLeft - this.stepWidth - DISTANCE_FROM_TARGET;\r\n        this.arrowLeftPosition = this.stepWidth;\r\n        this.adjustTopPosition();\r\n        this.adjustBottomPosition();\r\n        this.arrowPosition = 'right';\r\n        this.autofixLeftPosition();\r\n    }\r\n\r\n    private setStyleCenter() {\r\n        this.renderer.setStyle(this.stepHolder.nativeElement, \"position\", \"fixed\");\r\n        this.renderer.setStyle(this.stepHolder.nativeElement, \"top\", \"50%\");\r\n        this.renderer.setStyle(this.stepHolder.nativeElement, \"left\", \"50%\");\r\n        this.renderer.setStyle(this.stepHolder.nativeElement, \"transform\", `translate(-${this.stepWidth / 2}px, -${this.stepHeight / 2}px)`);\r\n        this.showArrow = false;\r\n    }\r\n\r\n    private adjustLeftPosition() {\r\n        if (this.leftPosition < 0) {\r\n            this.arrowLeftPosition = this.arrowLeftPosition + this.leftPosition - DEFAULT_DISTANCE_FROM_MARGIN_LEFT;\r\n            this.leftPosition = DEFAULT_DISTANCE_FROM_MARGIN_LEFT;\r\n        }\r\n    }\r\n\r\n    private adjustRightPosition() {\r\n        let currentWindowWidth = document.body.clientWidth;\r\n        if (this.stepAbsoluteLeft + this.stepWidth > currentWindowWidth) {\r\n            let newLeftPos = this.leftPosition - (this.stepAbsoluteLeft + this.stepWidth + DEFAULT_DISTANCE_FROM_MARGIN_RIGHT - currentWindowWidth);\r\n            let deltaLeftPosition = newLeftPos - this.leftPosition;\r\n\r\n            this.leftPosition = newLeftPos;\r\n            this.arrowLeftPosition = this.arrowLeftPosition - deltaLeftPosition;\r\n        }\r\n    }\r\n\r\n    private adjustTopPosition() {\r\n        if (this.stepAbsoluteTop < 0) {\r\n            this.arrowTopPosition = this.arrowTopPosition + this.topPosition - DEFAULT_DISTANCE_FROM_MARGIN_TOP;\r\n            this.topPosition = DEFAULT_DISTANCE_FROM_MARGIN_TOP;\r\n        }\r\n    }\r\n\r\n    private adjustBottomPosition() {\r\n        if (this.stepAbsoluteTop + this.stepHeight > this.documentHeight) {\r\n            let newTopPos = this.topPosition - (this.stepAbsoluteTop + this.stepHeight + DEFAULT_DISTANCE_FROM_MARGIN_BOTTOM - this.documentHeight);\r\n            let deltaTopPosition = newTopPos - this.topPosition;\r\n\r\n            this.topPosition = newTopPos;\r\n            this.arrowTopPosition = this.arrowTopPosition - deltaTopPosition;\r\n        }\r\n    }\r\n\r\n    private autofixTopPosition() {\r\n        if (this.positionAlreadyFixed) {\r\n            this.logger.warn(\"No step positions found for this step. The step will be centered.\");\r\n        } else if (this.targetAbsoluteTop - this.stepHeight - this.arrowSize < 0) {\r\n            this.positionAlreadyFixed = true;\r\n            this.setStyleRight();\r\n        }\r\n    }\r\n\r\n    private autofixRightPosition() {\r\n        if (this.targetAbsoluteLeft + this.targetWidth + this.stepWidth + this.arrowSize > document.body.clientWidth) {\r\n            this.setStyleBottom();\r\n        }\r\n    }\r\n\r\n    private autofixBottomPosition() {\r\n        if (this.targetAbsoluteTop + this.stepHeight + this.arrowSize + this.targetHeight > this.documentHeight) {\r\n            this.setStyleLeft();\r\n        }\r\n    }\r\n\r\n    private autofixLeftPosition() {\r\n        if (this.targetAbsoluteLeft - this.stepWidth - this.arrowSize < 0) {\r\n            this.setStyleTop();\r\n        }\r\n    }\r\n\r\n    private subscribeToResizeEvents(): Subscription {\r\n        return this.eventListenerService.resizeEvent.subscribe(() => {\r\n            this.drawStep();\r\n        });\r\n    }\r\n\r\n    private getDimensionsByAspectRatio(width: number, height: number, aspectRatio: number) {\r\n        let calcHeight = (width + height) / (1 + aspectRatio);\r\n        let calcWidth = calcHeight * aspectRatio;\r\n        return {\r\n            width: calcWidth,\r\n            height: calcHeight\r\n        }\r\n    }\r\n    private adjustDimensions(width: number, height: number) {\r\n        let area = width * height;\r\n        let newWidth = width;\r\n        let newHeight = height;\r\n        if (width > STEP_MAX_WIDTH) {\r\n            newWidth = STEP_MAX_WIDTH;\r\n            newHeight = area / newWidth;\r\n        }\r\n        else if (width < STEP_MIN_WIDTH) {\r\n            newWidth = STEP_MIN_WIDTH;\r\n            newHeight = STEP_MIN_WIDTH / ASPECT_RATIO;\r\n        }\r\n        return {\r\n            width: newWidth,\r\n            height: newHeight\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.subscriptions.forEach((subscription) => {\r\n            subscription.unsubscribe();\r\n        });\r\n    }\r\n\r\n}","import { Injectable, ComponentFactory, ComponentRef, ComponentFactoryResolver, ViewContainerRef, ApplicationRef, Injector, EmbeddedViewRef } from '@angular/core';\r\nimport { JoyrideStepComponent } from \"../components/step/joyride-step.component\";\r\nimport { JoyrideStep } from '../models/joyride-step.class';\r\n\r\n@Injectable()\r\nexport class StepDrawerService {\r\n\r\n    mappa: { [key: string]: ComponentRef<JoyrideStepComponent>; } = {};\r\n\r\n    constructor(\r\n        private readonly componentFactoryResolver: ComponentFactoryResolver,\r\n        private appRef: ApplicationRef,\r\n        private injector: Injector\r\n    ) { }\r\n\r\n    draw(step: JoyrideStep) {\r\n        const factory: ComponentFactory<JoyrideStepComponent> = this.componentFactoryResolver.resolveComponentFactory(JoyrideStepComponent);\r\n\r\n        // 1. Create a component reference from the component \r\n        const ref: ComponentRef<JoyrideStepComponent> = this.componentFactoryResolver\r\n            .resolveComponentFactory(JoyrideStepComponent)\r\n            .create(this.injector);\r\n\r\n        // 2. Attach component to the appRef so that it's inside the ng component tree\r\n        this.appRef.attachView(ref.hostView);\r\n\r\n        // 3. Get DOM element from component\r\n        const domElem = (ref.hostView as EmbeddedViewRef<any>)\r\n            .rootNodes[0] as HTMLElement;\r\n\r\n        // 4. Append DOM element to the body\r\n        document.body.appendChild(domElem);\r\n\r\n        const instance: JoyrideStepComponent = ref.instance;\r\n        instance.step = step;\r\n        ref.changeDetectorRef.detectChanges();\r\n        step.stepInstance = instance;\r\n\r\n        this.mappa[step.name] = ref;\r\n\r\n    }\r\n\r\n    remove(step: JoyrideStep) {\r\n        this.appRef.detachView(this.mappa[step.name].hostView);\r\n        this.mappa[step.name].destroy();\r\n    }\r\n\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { JoyrideStep } from \"../models/joyride-step.class\";\r\nimport { JoyrideBackdropService } from \"./joyride-backdrop.service\";\r\nimport { EventListenerService } from \"./event-listener.service\";\r\nimport { JoyrideStepsContainerService } from \"./joyride-steps-container.service\";\r\nimport { DocumentService } from \"./document.service\";\r\nimport { StepDrawerService } from \"./step-drawer.service\";\r\nimport { DomRefService } from \"./dom.service\";\r\nimport { NO_POSITION } from \"../directives/joyride.directive\";\r\nimport { JoyrideOptionsService } from \"./joyride-options.service\";\r\nimport { Router } from '@angular/router';\r\nimport { ReplaySubject, Observable } from \"rxjs\";\r\nimport { JoyrideStepInfo } from \"../models/joyride-step-info.class\";\r\n\r\nconst SCROLLBAR_SIZE = 20;\r\nexport const DISTANCE_FROM_TARGET = 15;\r\nexport const ARROW_SIZE = 10;\r\n\r\nexport interface IJoyrideStepService {\r\n    startTour(): Observable<JoyrideStepInfo>;\r\n    close(): any;\r\n    prev(): any;\r\n    next(): any;\r\n    isFirstStep(): boolean;\r\n    isLastStep(): boolean;\r\n}\r\n\r\n@Injectable()\r\nexport class JoyrideStepService implements IJoyrideStepService {\r\n    private currentStepIndex: number;\r\n    private currentStep: JoyrideStep;\r\n\r\n    private winTopPosition: number = 0;\r\n    private winBottomPosition: number = 0;\r\n    private stepsObserver: ReplaySubject<JoyrideStepInfo> = new ReplaySubject<JoyrideStepInfo>();\r\n\r\n    constructor(\r\n        private readonly backDropService: JoyrideBackdropService,\r\n        private readonly eventListener: EventListenerService,\r\n        private readonly stepsContainerService: JoyrideStepsContainerService,\r\n        private readonly documentService: DocumentService,\r\n        private readonly DOMService: DomRefService,\r\n        private readonly stepDrawerService: StepDrawerService,\r\n        private readonly optionsService: JoyrideOptionsService,\r\n        private readonly router: Router\r\n    ) {\r\n        this.initViewportPositions();\r\n        this.subscribeToScrollEvents();\r\n        this.subscribeToResizeEvents();\r\n    }\r\n\r\n    private initViewportPositions() {\r\n        this.winTopPosition = 0;\r\n        this.winBottomPosition = this.DOMService.getNativeWindow().innerHeight - SCROLLBAR_SIZE;\r\n    }\r\n\r\n    private subscribeToScrollEvents() {\r\n        this.eventListener.startListeningScrollEvents();\r\n        this.eventListener.scrollEvent.subscribe((scroll) => {\r\n            this.winTopPosition = scroll.scrollY;\r\n            this.winBottomPosition = this.winTopPosition + this.DOMService.getNativeWindow().innerHeight - SCROLLBAR_SIZE;\r\n            this.backDropService.redraw(this.currentStep, scroll);\r\n        });\r\n    }\r\n\r\n    private subscribeToResizeEvents() {\r\n        this.eventListener.resizeEvent.subscribe(() => {\r\n            this.backDropService.redrawTarget(this.currentStep);\r\n        });\r\n    }\r\n\r\n    private drawStep(step: JoyrideStep) {\r\n        step.position = step.position === NO_POSITION ? this.optionsService.getStepDefaultPosition() : step.position;\r\n        this.stepDrawerService.draw(step);\r\n    }\r\n\r\n    startTour(): Observable<JoyrideStepInfo> {\r\n        this.stepsObserver = new ReplaySubject<JoyrideStepInfo>();\r\n        this.currentStepIndex = 0;\r\n        this.documentService.setDocumentHeight();\r\n        this.navigateToStepPage();\r\n        this.showStep('NEXT');\r\n        this.eventListener.startListeningResizeEvents();\r\n        this.subscribeToStepsUpdates();\r\n        return this.stepsObserver.asObservable();\r\n    }\r\n\r\n    close() {\r\n        this.removeCurrentStep();\r\n        this.notifyTourIsFinished();\r\n        this.DOMService.getNativeWindow().scrollTo(0, 0);\r\n        this.eventListener.stopListeningResizeEvents();\r\n    }\r\n\r\n    prev() {\r\n        this.removeCurrentStep();\r\n        this.currentStepIndex -= 1;\r\n        this.currentStep.prevCliked.emit();\r\n        this.navigateToStepPage();\r\n        this.showStep('PREV');\r\n    }\r\n\r\n    next() {\r\n        this.removeCurrentStep();\r\n        this.currentStepIndex += 1;\r\n        this.currentStep.nextClicked.emit();\r\n        this.navigateToStepPage();\r\n        this.showStep('NEXT');\r\n    }\r\n\r\n    isFirstStep() {\r\n        return this.currentStepIndex === 0;\r\n    }\r\n\r\n    isLastStep() {\r\n        return this.currentStepIndex === this.stepsContainerService.getNumberOfSteps() - 1;\r\n    }\r\n\r\n    private navigateToStepPage() {\r\n        let stepRoute = this.stepsContainerService.getStepRoute(this.currentStepIndex);\r\n        if (stepRoute) {\r\n            this.router.navigate([stepRoute]);\r\n        }\r\n    }\r\n\r\n    private subscribeToStepsUpdates() {\r\n        this.stepsContainerService.stepHasBeenModified.subscribe((updatedStep) => {\r\n            if (this.currentStep.name === updatedStep.name) {\r\n                this.currentStep = updatedStep;\r\n            }\r\n        });\r\n    }\r\n\r\n    private showStep(action: 'PREV' | 'NEXT') {\r\n        setTimeout(() => {\r\n            this.stepsContainerService.initSteps();\r\n            this.currentStep = this.stepsContainerService.get(this.currentStepIndex);\r\n            this.backDropService.show(this.currentStep);\r\n            this.drawStep(this.currentStep);\r\n            this.scrollIfTargetNotVisible();\r\n            this.notifyStepClicked(action)\r\n        }, 1)\r\n    }\r\n\r\n    private notifyStepClicked(action: 'PREV' | 'NEXT') {\r\n        let stepInfo: JoyrideStepInfo = {\r\n            number: this.currentStepIndex,\r\n            name: this.currentStep.name,\r\n            route: this.currentStep.route,\r\n            actionType: action\r\n        }\r\n        this.stepsObserver.next(stepInfo);\r\n    }\r\n\r\n    private notifyTourIsFinished() {\r\n        this.currentStep.tourDone.emit();\r\n        this.stepsObserver.complete();\r\n    }\r\n\r\n    private removeCurrentStep() {\r\n        this.backDropService.hide();\r\n        this.stepDrawerService.remove(this.currentStep);\r\n    }\r\n\r\n    private scrollIfTargetNotVisible() {\r\n        this.scrollWhenTargetIsHiddenBottom();\r\n        this.scrollWhenTargetIsHiddenTop();\r\n    }\r\n\r\n    private scrollWhenTargetIsHiddenBottom() {\r\n        let totalTargetBottom = this.getTotalTargetBottomPosition();\r\n        if (totalTargetBottom > this.winBottomPosition) {\r\n            this.DOMService.getNativeWindow().scrollBy(0, totalTargetBottom - this.winBottomPosition);\r\n        }\r\n    }\r\n\r\n    private scrollWhenTargetIsHiddenTop() {\r\n        let totalTargetTop = this.getTotalTargetTopPosition();\r\n        if (totalTargetTop < this.winTopPosition) {\r\n            this.DOMService.getNativeWindow().scrollBy(0, totalTargetTop - this.winTopPosition);\r\n        }\r\n    }\r\n\r\n    private getTotalTargetBottomPosition(): number {\r\n        let targetAbsoluteTop = this.documentService.getElementAbsoluteTop(this.currentStep.targetViewContainer.element);\r\n        if (this.currentStep.position === 'top') {\r\n            return targetAbsoluteTop + this.currentStep.stepInstance.targetHeight;\r\n        } else if (this.currentStep.position === 'bottom') {\r\n            return targetAbsoluteTop + this.currentStep.stepInstance.targetHeight + this.currentStep.stepInstance.stepHeight + ARROW_SIZE + DISTANCE_FROM_TARGET;\r\n        } else if (this.currentStep.position === 'right' || this.currentStep.position === 'left') {\r\n            return Math.max(targetAbsoluteTop + this.currentStep.stepInstance.targetHeight,\r\n                targetAbsoluteTop + this.currentStep.stepInstance.targetHeight / 2 + this.currentStep.stepInstance.stepHeight / 2);\r\n        }\r\n    }\r\n\r\n    private getTotalTargetTopPosition() {\r\n        let targetAbsoluteTop = this.documentService.getElementAbsoluteTop(this.currentStep.targetViewContainer.element);\r\n        if (this.currentStep.position === 'top') {\r\n            return targetAbsoluteTop - (this.currentStep.stepInstance.stepHeight + ARROW_SIZE + DISTANCE_FROM_TARGET);\r\n        } else if (this.currentStep.position === 'bottom') {\r\n            return targetAbsoluteTop;\r\n        } else if (this.currentStep.position === 'right' || this.currentStep.position === 'left') {\r\n            return Math.min(targetAbsoluteTop, targetAbsoluteTop + this.currentStep.stepInstance.targetHeight / 2 - this.currentStep.stepInstance.stepHeight / 2);\r\n        }\r\n    }\r\n\r\n}","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","// typeof any so that it we don't have to cast when comparing a result to the error object\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var errorObject = { e: {} };\n//# sourceMappingURL=errorObject.js.map\n","/** PURE_IMPORTS_START _errorObject PURE_IMPORTS_END */\nimport { errorObject } from './errorObject';\nvar tryCatchTarget;\nfunction tryCatcher() {\n    try {\n        return tryCatchTarget.apply(this, arguments);\n    }\n    catch (e) {\n        errorObject.e = e;\n        return errorObject;\n    }\n}\nexport function tryCatch(fn) {\n    tryCatchTarget = fn;\n    return tryCatcher;\n}\n//# sourceMappingURL=tryCatch.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function isFunction(x) {\n    return typeof x === 'function';\n}\n//# sourceMappingURL=isFunction.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar _enable_super_gross_mode_that_will_cause_bad_things = false;\n/**\n * The global configuration object for RxJS, used to configure things\n * like what Promise contructor should used to create Promises\n */\nexport var config = {\n    /**\n     * The promise constructor used by default for methods such as\n     * {@link toPromise} and {@link forEach}\n     */\n    Promise: undefined,\n    /**\n     * If true, turns on synchronous error rethrowing, which is a deprecated behavior\n     * in v6 and higher. This behavior enables bad patterns like wrapping a subscribe\n     * call in a try/catch block. It also enables producer interference, a nasty bug\n     * where a multicast can be broken for all observers by a downstream consumer with\n     * an unhandled error. DO NOT USE THIS FLAG UNLESS IT'S NEEDED TO BY TIME\n     * FOR MIGRATION REASONS.\n     */\n    set useDeprecatedSynchronousErrorHandling(value) {\n        if (value) {\n            var error = /*@__PURE__*/ new Error();\n            /*@__PURE__*/ console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \\n' + error.stack);\n        }\n        else if (_enable_super_gross_mode_that_will_cause_bad_things) {\n            /*@__PURE__*/ console.log('RxJS: Back to a better error behavior. Thank you. <3');\n        }\n        _enable_super_gross_mode_that_will_cause_bad_things = value;\n    },\n    get useDeprecatedSynchronousErrorHandling() {\n        return _enable_super_gross_mode_that_will_cause_bad_things;\n    },\n};\n//# sourceMappingURL=config.js.map\n","/**\n * Throws an error on another job so that it's picked up by the runtime's\n * uncaught error handling mechanism.\n * @param err the error to throw\n */\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function hostReportError(err) {\n    setTimeout(function () { throw err; });\n}\n//# sourceMappingURL=hostReportError.js.map\n","/** PURE_IMPORTS_START _config,_util_hostReportError PURE_IMPORTS_END */\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\nexport var empty = {\n    closed: true,\n    next: function (value) { },\n    error: function (err) {\n        if (config.useDeprecatedSynchronousErrorHandling) {\n            throw err;\n        }\n        else {\n            hostReportError(err);\n        }\n    },\n    complete: function () { }\n};\n//# sourceMappingURL=Observer.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });\n//# sourceMappingURL=isArray.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function isObject(x) {\n    return x != null && typeof x === 'object';\n}\n//# sourceMappingURL=isObject.js.map\n","/** PURE_IMPORTS_START tslib PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nvar UnsubscriptionError = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(UnsubscriptionError, _super);\n    function UnsubscriptionError(errors) {\n        var _this = _super.call(this, errors ?\n            errors.length + \" errors occurred during unsubscription:\\n  \" + errors.map(function (err, i) { return i + 1 + \") \" + err.toString(); }).join('\\n  ') : '') || this;\n        _this.errors = errors;\n        _this.name = 'UnsubscriptionError';\n        Object.setPrototypeOf(_this, UnsubscriptionError.prototype);\n        return _this;\n    }\n    return UnsubscriptionError;\n}(Error));\nexport { UnsubscriptionError };\n//# sourceMappingURL=UnsubscriptionError.js.map\n","/** PURE_IMPORTS_START _util_isArray,_util_isObject,_util_isFunction,_util_tryCatch,_util_errorObject,_util_UnsubscriptionError PURE_IMPORTS_END */\nimport { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nvar Subscription = /*@__PURE__*/ (function () {\n    /**\n     * @param {function(): void} [unsubscribe] A function describing how to\n     * perform the disposal of resources when the `unsubscribe` method is called.\n     */\n    function Subscription(unsubscribe) {\n        /**\n         * A flag to indicate whether this Subscription has already been unsubscribed.\n         * @type {boolean}\n         */\n        this.closed = false;\n        /** @internal */\n        this._parent = null;\n        /** @internal */\n        this._parents = null;\n        /** @internal */\n        this._subscriptions = null;\n        if (unsubscribe) {\n            this._unsubscribe = unsubscribe;\n        }\n    }\n    /**\n     * Disposes the resources held by the subscription. May, for instance, cancel\n     * an ongoing Observable execution or cancel any other type of work that\n     * started when the Subscription was created.\n     * @return {void}\n     */\n    Subscription.prototype.unsubscribe = function () {\n        var hasErrors = false;\n        var errors;\n        if (this.closed) {\n            return;\n        }\n        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;\n        this.closed = true;\n        this._parent = null;\n        this._parents = null;\n        // null out _subscriptions first so any child subscriptions that attempt\n        // to remove themselves from this subscription will noop\n        this._subscriptions = null;\n        var index = -1;\n        var len = _parents ? _parents.length : 0;\n        // if this._parent is null, then so is this._parents, and we\n        // don't have to remove ourselves from any parent subscriptions.\n        while (_parent) {\n            _parent.remove(this);\n            // if this._parents is null or index >= len,\n            // then _parent is set to null, and the loop exits\n            _parent = ++index < len && _parents[index] || null;\n        }\n        if (isFunction(_unsubscribe)) {\n            var trial = tryCatch(_unsubscribe).call(this);\n            if (trial === errorObject) {\n                hasErrors = true;\n                errors = errors || (errorObject.e instanceof UnsubscriptionError ?\n                    flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]);\n            }\n        }\n        if (isArray(_subscriptions)) {\n            index = -1;\n            len = _subscriptions.length;\n            while (++index < len) {\n                var sub = _subscriptions[index];\n                if (isObject(sub)) {\n                    var trial = tryCatch(sub.unsubscribe).call(sub);\n                    if (trial === errorObject) {\n                        hasErrors = true;\n                        errors = errors || [];\n                        var err = errorObject.e;\n                        if (err instanceof UnsubscriptionError) {\n                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n                        }\n                        else {\n                            errors.push(err);\n                        }\n                    }\n                }\n            }\n        }\n        if (hasErrors) {\n            throw new UnsubscriptionError(errors);\n        }\n    };\n    /**\n     * Adds a tear down to be called during the unsubscribe() of this\n     * Subscription.\n     *\n     * If the tear down being added is a subscription that is already\n     * unsubscribed, is the same reference `add` is being called on, or is\n     * `Subscription.EMPTY`, it will not be added.\n     *\n     * If this subscription is already in an `closed` state, the passed\n     * tear down logic will be executed immediately.\n     *\n     * @param {TeardownLogic} teardown The additional logic to execute on\n     * teardown.\n     * @return {Subscription} Returns the Subscription used or created to be\n     * added to the inner subscriptions list. This Subscription can be used with\n     * `remove()` to remove the passed teardown logic from the inner subscriptions\n     * list.\n     */\n    Subscription.prototype.add = function (teardown) {\n        if (!teardown || (teardown === Subscription.EMPTY)) {\n            return Subscription.EMPTY;\n        }\n        if (teardown === this) {\n            return this;\n        }\n        var subscription = teardown;\n        switch (typeof teardown) {\n            case 'function':\n                subscription = new Subscription(teardown);\n            case 'object':\n                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n                    return subscription;\n                }\n                else if (this.closed) {\n                    subscription.unsubscribe();\n                    return subscription;\n                }\n                else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n                    var tmp = subscription;\n                    subscription = new Subscription();\n                    subscription._subscriptions = [tmp];\n                }\n                break;\n            default:\n                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n        }\n        var subscriptions = this._subscriptions || (this._subscriptions = []);\n        subscriptions.push(subscription);\n        subscription._addParent(this);\n        return subscription;\n    };\n    /**\n     * Removes a Subscription from the internal list of subscriptions that will\n     * unsubscribe during the unsubscribe process of this Subscription.\n     * @param {Subscription} subscription The subscription to remove.\n     * @return {void}\n     */\n    Subscription.prototype.remove = function (subscription) {\n        var subscriptions = this._subscriptions;\n        if (subscriptions) {\n            var subscriptionIndex = subscriptions.indexOf(subscription);\n            if (subscriptionIndex !== -1) {\n                subscriptions.splice(subscriptionIndex, 1);\n            }\n        }\n    };\n    /** @internal */\n    Subscription.prototype._addParent = function (parent) {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        if (!_parent || _parent === parent) {\n            // If we don't have a parent, or the new parent is the same as the\n            // current parent, then set this._parent to the new parent.\n            this._parent = parent;\n        }\n        else if (!_parents) {\n            // If there's already one parent, but not multiple, allocate an Array to\n            // store the rest of the parent Subscriptions.\n            this._parents = [parent];\n        }\n        else if (_parents.indexOf(parent) === -1) {\n            // Only add the new parent to the _parents list if it's not already there.\n            _parents.push(parent);\n        }\n    };\n    /** @nocollapse */\n    Subscription.EMPTY = (function (empty) {\n        empty.closed = true;\n        return empty;\n    }(new Subscription()));\n    return Subscription;\n}());\nexport { Subscription };\nfunction flattenUnsubscriptionErrors(errors) {\n    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError) ? err.errors : err); }, []);\n}\n//# sourceMappingURL=Subscription.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function')\n    ? /*@__PURE__*/ Symbol.for('rxSubscriber')\n    : '@@rxSubscriber';\n/**\n * @deprecated use rxSubscriber instead\n */\nexport var $$rxSubscriber = rxSubscriber;\n//# sourceMappingURL=rxSubscriber.js.map\n","/** PURE_IMPORTS_START tslib,_util_isFunction,_Observer,_Subscription,_internal_symbol_rxSubscriber,_config,_util_hostReportError PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { isFunction } from './util/isFunction';\nimport { empty as emptyObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nvar Subscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(Subscriber, _super);\n    /**\n     * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n     * defined Observer or a `next` callback function.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     */\n    function Subscriber(destinationOrNext, error, complete) {\n        var _this = _super.call(this) || this;\n        /** @internal */ _this.syncErrorValue = null;\n        /** @internal */ _this.syncErrorThrown = false;\n        /** @internal */ _this.syncErrorThrowable = false;\n        _this.isStopped = false;\n        switch (arguments.length) {\n            case 0:\n                _this.destination = emptyObserver;\n                break;\n            case 1:\n                if (!destinationOrNext) {\n                    _this.destination = emptyObserver;\n                    break;\n                }\n                if (typeof destinationOrNext === 'object') {\n                    // HACK(benlesh): For situations where Node has multiple copies of rxjs in\n                    // node_modules, we cannot rely on `instanceof` checks\n                    if (isTrustedSubscriber(destinationOrNext)) {\n                        var trustedSubscriber = destinationOrNext[rxSubscriberSymbol]();\n                        _this.syncErrorThrowable = trustedSubscriber.syncErrorThrowable;\n                        _this.destination = trustedSubscriber;\n                        trustedSubscriber.add(_this);\n                    }\n                    else {\n                        _this.syncErrorThrowable = true;\n                        _this.destination = new SafeSubscriber(_this, destinationOrNext);\n                    }\n                    break;\n                }\n            default:\n                _this.syncErrorThrowable = true;\n                _this.destination = new SafeSubscriber(_this, destinationOrNext, error, complete);\n                break;\n        }\n        return _this;\n    }\n    Subscriber.prototype[rxSubscriberSymbol] = function () { return this; };\n    /**\n     * A static factory for a Subscriber, given a (potentially partial) definition\n     * of an Observer.\n     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n     * Observer represented by the given arguments.\n     * @nocollapse\n     */\n    Subscriber.create = function (next, error, complete) {\n        var subscriber = new Subscriber(next, error, complete);\n        subscriber.syncErrorThrowable = false;\n        return subscriber;\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `next` from\n     * the Observable, with a value. The Observable may call this method 0 or more\n     * times.\n     * @param {T} [value] The `next` value.\n     * @return {void}\n     */\n    Subscriber.prototype.next = function (value) {\n        if (!this.isStopped) {\n            this._next(value);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `error` from\n     * the Observable, with an attached {@link Error}. Notifies the Observer that\n     * the Observable has experienced an error condition.\n     * @param {any} [err] The `error` exception.\n     * @return {void}\n     */\n    Subscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._error(err);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive a valueless notification of type\n     * `complete` from the Observable. Notifies the Observer that the Observable\n     * has finished sending push-based notifications.\n     * @return {void}\n     */\n    Subscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._complete();\n        }\n    };\n    Subscriber.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.isStopped = true;\n        _super.prototype.unsubscribe.call(this);\n    };\n    Subscriber.prototype._next = function (value) {\n        this.destination.next(value);\n    };\n    Subscriber.prototype._error = function (err) {\n        this.destination.error(err);\n        this.unsubscribe();\n    };\n    Subscriber.prototype._complete = function () {\n        this.destination.complete();\n        this.unsubscribe();\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    Subscriber.prototype._unsubscribeAndRecycle = function () {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        this._parent = null;\n        this._parents = null;\n        this.unsubscribe();\n        this.closed = false;\n        this.isStopped = false;\n        this._parent = _parent;\n        this._parents = _parents;\n        return this;\n    };\n    return Subscriber;\n}(Subscription));\nexport { Subscriber };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SafeSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SafeSubscriber, _super);\n    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {\n        var _this = _super.call(this) || this;\n        _this._parentSubscriber = _parentSubscriber;\n        var next;\n        var context = _this;\n        if (isFunction(observerOrNext)) {\n            next = observerOrNext;\n        }\n        else if (observerOrNext) {\n            next = observerOrNext.next;\n            error = observerOrNext.error;\n            complete = observerOrNext.complete;\n            if (observerOrNext !== emptyObserver) {\n                context = Object.create(observerOrNext);\n                if (isFunction(context.unsubscribe)) {\n                    _this.add(context.unsubscribe.bind(context));\n                }\n                context.unsubscribe = _this.unsubscribe.bind(_this);\n            }\n        }\n        _this._context = context;\n        _this._next = next;\n        _this._error = error;\n        _this._complete = complete;\n        return _this;\n    }\n    SafeSubscriber.prototype.next = function (value) {\n        if (!this.isStopped && this._next) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                this.__tryOrUnsub(this._next, value);\n            }\n            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            var useDeprecatedSynchronousErrorHandling = config.useDeprecatedSynchronousErrorHandling;\n            if (this._error) {\n                if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(this._error, err);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, this._error, err);\n                    this.unsubscribe();\n                }\n            }\n            else if (!_parentSubscriber.syncErrorThrowable) {\n                this.unsubscribe();\n                if (useDeprecatedSynchronousErrorHandling) {\n                    throw err;\n                }\n                hostReportError(err);\n            }\n            else {\n                if (useDeprecatedSynchronousErrorHandling) {\n                    _parentSubscriber.syncErrorValue = err;\n                    _parentSubscriber.syncErrorThrown = true;\n                }\n                else {\n                    hostReportError(err);\n                }\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.complete = function () {\n        var _this = this;\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._complete) {\n                var wrappedComplete = function () { return _this._complete.call(_this._context); };\n                if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(wrappedComplete);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n                    this.unsubscribe();\n                }\n            }\n            else {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            this.unsubscribe();\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                throw err;\n            }\n            else {\n                hostReportError(err);\n            }\n        }\n    };\n    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n        if (!config.useDeprecatedSynchronousErrorHandling) {\n            throw new Error('bad call');\n        }\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                parent.syncErrorValue = err;\n                parent.syncErrorThrown = true;\n                return true;\n            }\n            else {\n                hostReportError(err);\n                return true;\n            }\n        }\n        return false;\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    SafeSubscriber.prototype._unsubscribe = function () {\n        var _parentSubscriber = this._parentSubscriber;\n        this._context = null;\n        this._parentSubscriber = null;\n        _parentSubscriber.unsubscribe();\n    };\n    return SafeSubscriber;\n}(Subscriber));\nfunction isTrustedSubscriber(obj) {\n    return obj instanceof Subscriber || ('syncErrorThrowable' in obj && obj[rxSubscriberSymbol]);\n}\n//# sourceMappingURL=Subscriber.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from './Subscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar OuterSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(OuterSubscriber, _super);\n    function OuterSubscriber() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    };\n    OuterSubscriber.prototype.notifyError = function (error, innerSub) {\n        this.destination.error(error);\n    };\n    OuterSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.destination.complete();\n    };\n    return OuterSubscriber;\n}(Subscriber));\nexport { OuterSubscriber };\n//# sourceMappingURL=OuterSubscriber.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from './Subscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar InnerSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(InnerSubscriber, _super);\n    function InnerSubscriber(parent, outerValue, outerIndex) {\n        var _this = _super.call(this) || this;\n        _this.parent = parent;\n        _this.outerValue = outerValue;\n        _this.outerIndex = outerIndex;\n        _this.index = 0;\n        return _this;\n    }\n    InnerSubscriber.prototype._next = function (value) {\n        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n    };\n    InnerSubscriber.prototype._error = function (error) {\n        this.parent.notifyError(error, this);\n        this.unsubscribe();\n    };\n    InnerSubscriber.prototype._complete = function () {\n        this.parent.notifyComplete(this);\n        this.unsubscribe();\n    };\n    return InnerSubscriber;\n}(Subscriber));\nexport { InnerSubscriber };\n//# sourceMappingURL=InnerSubscriber.js.map\n","/** PURE_IMPORTS_START _Subscriber,_symbol_rxSubscriber,_Observer PURE_IMPORTS_END */\nimport { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { empty as emptyObserver } from '../Observer';\nexport function toSubscriber(nextOrObserver, error, complete) {\n    if (nextOrObserver) {\n        if (nextOrObserver instanceof Subscriber) {\n            return nextOrObserver;\n        }\n        if (nextOrObserver[rxSubscriberSymbol]) {\n            return nextOrObserver[rxSubscriberSymbol]();\n        }\n    }\n    if (!nextOrObserver && !error && !complete) {\n        return new Subscriber(emptyObserver);\n    }\n    return new Subscriber(nextOrObserver, error, complete);\n}\n//# sourceMappingURL=toSubscriber.js.map\n","/** Symbol.observable or a string \"@@observable\". Used for interop */\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var observable = typeof Symbol === 'function' && Symbol.observable || '@@observable';\n//# sourceMappingURL=observable.js.map\n","/* tslint:disable:no-empty */\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function noop() { }\n//# sourceMappingURL=noop.js.map\n","/** PURE_IMPORTS_START _noop PURE_IMPORTS_END */\nimport { noop } from './noop';\n/* tslint:enable:max-line-length */\nexport function pipe() {\n    var fns = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        fns[_i] = arguments[_i];\n    }\n    return pipeFromArray(fns);\n}\n/* @internal */\nexport function pipeFromArray(fns) {\n    if (!fns) {\n        return noop;\n    }\n    if (fns.length === 1) {\n        return fns[0];\n    }\n    return function piped(input) {\n        return fns.reduce(function (prev, fn) { return fn(prev); }, input);\n    };\n}\n//# sourceMappingURL=pipe.js.map\n","/** PURE_IMPORTS_START _util_toSubscriber,_internal_symbol_observable,_util_pipe,_config PURE_IMPORTS_END */\nimport { toSubscriber } from './util/toSubscriber';\nimport { observable as Symbol_observable } from '../internal/symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nvar Observable = /*@__PURE__*/ (function () {\n    /**\n     * @constructor\n     * @param {Function} subscribe the function that is called when the Observable is\n     * initially subscribed to. This function is given a Subscriber, to which new values\n     * can be `next`ed, or an `error` method can be called to raise an error, or\n     * `complete` can be called to notify of a successful completion.\n     */\n    function Observable(subscribe) {\n        /** Internal implementation detail, do not use directly. */\n        this._isScalar = false;\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    /**\n     * Creates a new Observable, with this Observable as the source, and the passed\n     * operator defined as the new observable's operator.\n     * @method lift\n     * @param {Operator} operator the operator defining the operation to take on the observable\n     * @return {Observable} a new observable with the Operator applied\n     */\n    Observable.prototype.lift = function (operator) {\n        var observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    };\n    /**\n     * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n     *\n     * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n     *\n     * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n     * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n     * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n     * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n     * thought.\n     *\n     * Apart from starting the execution of an Observable, this method allows you to listen for values\n     * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n     * following ways.\n     *\n     * The first way is creating an object that implements {@link Observer} interface. It should have methods\n     * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n     * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n     * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n     * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n     * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n     * be left uncaught.\n     *\n     * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n     * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n     * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n     * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n     * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n     * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n     *\n     * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n     * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n     * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n     * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n     *\n     * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n     * It is an Observable itself that decides when these functions will be called. For example {@link of}\n     * by default emits all its values synchronously. Always check documentation for how given Observable\n     * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n     *\n     * @example <caption>Subscribe with an Observer</caption>\n     * const sumObserver = {\n     *   sum: 0,\n     *   next(value) {\n     *     console.log('Adding: ' + value);\n     *     this.sum = this.sum + value;\n     *   },\n     *   error() { // We actually could just remove this method,\n     *   },        // since we do not really care about errors right now.\n     *   complete() {\n     *     console.log('Sum equals: ' + this.sum);\n     *   }\n     * };\n     *\n     * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n     * .subscribe(sumObserver);\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Subscribe with functions</caption>\n     * let sum = 0;\n     *\n     * Rx.Observable.of(1, 2, 3)\n     * .subscribe(\n     *   function(value) {\n     *     console.log('Adding: ' + value);\n     *     sum = sum + value;\n     *   },\n     *   undefined,\n     *   function() {\n     *     console.log('Sum equals: ' + sum);\n     *   }\n     * );\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Cancel a subscription</caption>\n     * const subscription = Rx.Observable.interval(1000).subscribe(\n     *   num => console.log(num),\n     *   undefined,\n     *   () => console.log('completed!') // Will not be called, even\n     * );                                // when cancelling subscription\n     *\n     *\n     * setTimeout(() => {\n     *   subscription.unsubscribe();\n     *   console.log('unsubscribed!');\n     * }, 2500);\n     *\n     * // Logs:\n     * // 0 after 1s\n     * // 1 after 2s\n     * // \"unsubscribed!\" after 2.5s\n     *\n     *\n     * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n     *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n     *  Observable.\n     * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n     *  the error will be thrown as unhandled.\n     * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n     * @return {ISubscription} a subscription reference to the registered handlers\n     * @method subscribe\n     */\n    Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n        var operator = this.operator;\n        var sink = toSubscriber(observerOrNext, error, complete);\n        if (operator) {\n            operator.call(sink, this.source);\n        }\n        else {\n            sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n        }\n        if (config.useDeprecatedSynchronousErrorHandling) {\n            if (sink.syncErrorThrowable) {\n                sink.syncErrorThrowable = false;\n                if (sink.syncErrorThrown) {\n                    throw sink.syncErrorValue;\n                }\n            }\n        }\n        return sink;\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    Observable.prototype._trySubscribe = function (sink) {\n        try {\n            return this._subscribe(sink);\n        }\n        catch (err) {\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                sink.syncErrorThrown = true;\n                sink.syncErrorValue = err;\n            }\n            sink.error(err);\n        }\n    };\n    /**\n     * @method forEach\n     * @param {Function} next a handler for each value emitted by the observable\n     * @param {PromiseConstructor} [promiseCtor] a constructor function used to instantiate the Promise\n     * @return {Promise} a promise that either resolves on observable completion or\n     *  rejects with the handled error\n     */\n    Observable.prototype.forEach = function (next, promiseCtor) {\n        var _this = this;\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor(function (resolve, reject) {\n            // Must be declared in a separate statement to avoid a RefernceError when\n            // accessing subscription below in the closure due to Temporal Dead Zone.\n            var subscription;\n            subscription = _this.subscribe(function (value) {\n                try {\n                    next(value);\n                }\n                catch (err) {\n                    reject(err);\n                    if (subscription) {\n                        subscription.unsubscribe();\n                    }\n                }\n            }, reject, resolve);\n        });\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    Observable.prototype._subscribe = function (subscriber) {\n        var source = this.source;\n        return source && source.subscribe(subscriber);\n    };\n    /**\n     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n     * @method Symbol.observable\n     * @return {Observable} this instance of the observable\n     */\n    Observable.prototype[Symbol_observable] = function () {\n        return this;\n    };\n    /* tslint:enable:max-line-length */\n    /**\n     * Used to stitch together functional operators into a chain.\n     * @method pipe\n     * @return {Observable} the Observable result of all of the operators having\n     * been called in the order they were passed in.\n     *\n     * @example\n     *\n     * import { map, filter, scan } from 'rxjs/operators';\n     *\n     * Rx.Observable.interval(1000)\n     *   .pipe(\n     *     filter(x => x % 2 === 0),\n     *     map(x => x + x),\n     *     scan((acc, x) => acc + x)\n     *   )\n     *   .subscribe(x => console.log(x))\n     */\n    Observable.prototype.pipe = function () {\n        var operations = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            operations[_i] = arguments[_i];\n        }\n        if (operations.length === 0) {\n            return this;\n        }\n        return pipeFromArray(operations)(this);\n    };\n    /* tslint:enable:max-line-length */\n    Observable.prototype.toPromise = function (promiseCtor) {\n        var _this = this;\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor(function (resolve, reject) {\n            var value;\n            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });\n        });\n    };\n    // HACK: Since TypeScript inherits static properties too, we have to\n    // fight against TypeScript here so Subject can have a different static create signature\n    /**\n     * Creates a new cold Observable by calling the Observable constructor\n     * @static true\n     * @owner Observable\n     * @method create\n     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n     * @return {Observable} a new cold observable\n     * @nocollapse\n     */\n    Observable.create = function (subscribe) {\n        return new Observable(subscribe);\n    };\n    return Observable;\n}());\nexport { Observable };\n/**\n * Decides between a passed promise constructor from consuming code,\n * A default configured promise constructor, and the native promise\n * constructor and returns it. If nothing can be found, it will throw\n * an error.\n * @param promiseCtor The optional promise constructor to passed by consuming code\n */\nfunction getPromiseCtor(promiseCtor) {\n    if (!promiseCtor) {\n        promiseCtor = config.Promise || Promise;\n    }\n    if (!promiseCtor) {\n        throw new Error('no Promise impl found');\n    }\n    return promiseCtor;\n}\n//# sourceMappingURL=Observable.js.map\n","/**\n * Subscribes to an ArrayLike with a subscriber\n * @param array The array or array-like to subscribe to\n */\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var subscribeToArray = function (array) {\n    return function (subscriber) {\n        for (var i = 0, len = array.length; i < len && !subscriber.closed; i++) {\n            subscriber.next(array[i]);\n        }\n        if (!subscriber.closed) {\n            subscriber.complete();\n        }\n    };\n};\n//# sourceMappingURL=subscribeToArray.js.map\n","/** PURE_IMPORTS_START _hostReportError PURE_IMPORTS_END */\nimport { hostReportError } from './hostReportError';\nexport var subscribeToPromise = function (promise) {\n    return function (subscriber) {\n        promise.then(function (value) {\n            if (!subscriber.closed) {\n                subscriber.next(value);\n                subscriber.complete();\n            }\n        }, function (err) { return subscriber.error(err); })\n            .then(null, hostReportError);\n        return subscriber;\n    };\n};\n//# sourceMappingURL=subscribeToPromise.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function getSymbolIterator() {\n    if (typeof Symbol !== 'function' || !Symbol.iterator) {\n        return '@@iterator';\n    }\n    return Symbol.iterator;\n}\nexport var iterator = /*@__PURE__*/ getSymbolIterator();\n/**\n * @deprecated use {@link iterator} instead\n */\nexport var $$iterator = iterator;\n//# sourceMappingURL=iterator.js.map\n","/** PURE_IMPORTS_START _symbol_iterator PURE_IMPORTS_END */\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nexport var subscribeToIterable = function (iterable) {\n    return function (subscriber) {\n        var iterator = iterable[Symbol_iterator]();\n        do {\n            var item = iterator.next();\n            if (item.done) {\n                subscriber.complete();\n                break;\n            }\n            subscriber.next(item.value);\n            if (subscriber.closed) {\n                break;\n            }\n        } while (true);\n        // Finalize the iterator if it happens to be a Generator\n        if (typeof iterator.return === 'function') {\n            subscriber.add(function () {\n                if (iterator.return) {\n                    iterator.return();\n                }\n            });\n        }\n        return subscriber;\n    };\n};\n//# sourceMappingURL=subscribeToIterable.js.map\n","/** PURE_IMPORTS_START _symbol_observable PURE_IMPORTS_END */\nimport { observable as Symbol_observable } from '../symbol/observable';\n/**\n * Subscribes to an object that implements Symbol.observable with the given\n * Subscriber.\n * @param obj An object that implements Symbol.observable\n */\nexport var subscribeToObservable = function (obj) {\n    return function (subscriber) {\n        var obs = obj[Symbol_observable]();\n        if (typeof obs.subscribe !== 'function') {\n            // Should be caught by observable subscribe function error handling.\n            throw new TypeError('Provided object does not correctly implement Symbol.observable');\n        }\n        else {\n            return obs.subscribe(subscriber);\n        }\n    };\n};\n//# sourceMappingURL=subscribeToObservable.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var isArrayLike = (function (x) { return x && typeof x.length === 'number' && typeof x !== 'function'; });\n//# sourceMappingURL=isArrayLike.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function isPromise(value) {\n    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';\n}\n//# sourceMappingURL=isPromise.js.map\n","/** PURE_IMPORTS_START _Observable,_subscribeToArray,_subscribeToPromise,_subscribeToIterable,_subscribeToObservable,_isArrayLike,_isPromise,_isObject,_symbol_iterator,_symbol_observable PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { subscribeToArray } from './subscribeToArray';\nimport { subscribeToPromise } from './subscribeToPromise';\nimport { subscribeToIterable } from './subscribeToIterable';\nimport { subscribeToObservable } from './subscribeToObservable';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport var subscribeTo = function (result) {\n    if (result instanceof Observable) {\n        return function (subscriber) {\n            if (result._isScalar) {\n                subscriber.next(result.value);\n                subscriber.complete();\n                return undefined;\n            }\n            else {\n                return result.subscribe(subscriber);\n            }\n        };\n    }\n    else if (isArrayLike(result)) {\n        return subscribeToArray(result);\n    }\n    else if (isPromise(result)) {\n        return subscribeToPromise(result);\n    }\n    else if (result && typeof result[Symbol_iterator] === 'function') {\n        return subscribeToIterable(result);\n    }\n    else if (result && typeof result[Symbol_observable] === 'function') {\n        return subscribeToObservable(result);\n    }\n    else {\n        var value = isObject(result) ? 'an invalid object' : \"'\" + result + \"'\";\n        var msg = \"You provided \" + value + \" where a stream was expected.\"\n            + ' You can provide an Observable, Promise, Array, or Iterable.';\n        throw new TypeError(msg);\n    }\n};\n//# sourceMappingURL=subscribeTo.js.map\n","/** PURE_IMPORTS_START _InnerSubscriber,_subscribeTo PURE_IMPORTS_END */\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeTo } from './subscribeTo';\nexport function subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {\n    var destination = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n    return subscribeTo(result)(destination);\n}\n//# sourceMappingURL=subscribeToResult.js.map\n","/** PURE_IMPORTS_START tslib,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/audit.png\" width=\"100%\">\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value or completes, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.audit(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return {Observable<T>} An Observable that performs rate-limiting of\n * emissions from the source Observable.\n * @method audit\n * @owner Observable\n */\nexport function audit(durationSelector) {\n    return function auditOperatorFunction(source) {\n        return source.lift(new AuditOperator(durationSelector));\n    };\n}\nvar AuditOperator = /*@__PURE__*/ (function () {\n    function AuditOperator(durationSelector) {\n        this.durationSelector = durationSelector;\n    }\n    AuditOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new AuditSubscriber(subscriber, this.durationSelector));\n    };\n    return AuditOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AuditSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(AuditSubscriber, _super);\n    function AuditSubscriber(destination, durationSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.durationSelector = durationSelector;\n        _this.hasValue = false;\n        return _this;\n    }\n    AuditSubscriber.prototype._next = function (value) {\n        this.value = value;\n        this.hasValue = true;\n        if (!this.throttled) {\n            var duration = tryCatch(this.durationSelector)(value);\n            if (duration === errorObject) {\n                this.destination.error(errorObject.e);\n            }\n            else {\n                var innerSubscription = subscribeToResult(this, duration);\n                if (!innerSubscription || innerSubscription.closed) {\n                    this.clearThrottle();\n                }\n                else {\n                    this.add(this.throttled = innerSubscription);\n                }\n            }\n        }\n    };\n    AuditSubscriber.prototype.clearThrottle = function () {\n        var _a = this, value = _a.value, hasValue = _a.hasValue, throttled = _a.throttled;\n        if (throttled) {\n            this.remove(throttled);\n            this.throttled = null;\n            throttled.unsubscribe();\n        }\n        if (hasValue) {\n            this.value = null;\n            this.hasValue = false;\n            this.destination.next(value);\n        }\n    };\n    AuditSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {\n        this.clearThrottle();\n    };\n    AuditSubscriber.prototype.notifyComplete = function () {\n        this.clearThrottle();\n    };\n    return AuditSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=audit.js.map\n","/** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscription } from '../Subscription';\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nvar Action = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(Action, _super);\n    function Action(scheduler, work) {\n        return _super.call(this) || this;\n    }\n    /**\n     * Schedules this action on its parent Scheduler for execution. May be passed\n     * some context object, `state`. May happen at some point in the future,\n     * according to the `delay` parameter, if specified.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler.\n     * @return {void}\n     */\n    Action.prototype.schedule = function (state, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        return this;\n    };\n    return Action;\n}(Subscription));\nexport { Action };\n//# sourceMappingURL=Action.js.map\n","/** PURE_IMPORTS_START tslib,_Action PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Action } from './Action';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AsyncAction = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(AsyncAction, _super);\n    function AsyncAction(scheduler, work) {\n        var _this = _super.call(this, scheduler, work) || this;\n        _this.scheduler = scheduler;\n        _this.work = work;\n        _this.pending = false;\n        return _this;\n    }\n    AsyncAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        if (this.closed) {\n            return this;\n        }\n        // Always replace the current state with the new state.\n        this.state = state;\n        var id = this.id;\n        var scheduler = this.scheduler;\n        //\n        // Important implementation note:\n        //\n        // Actions only execute once by default, unless rescheduled from within the\n        // scheduled callback. This allows us to implement single and repeat\n        // actions via the same code path, without adding API surface area, as well\n        // as mimic traditional recursion but across asynchronous boundaries.\n        //\n        // However, JS runtimes and timers distinguish between intervals achieved by\n        // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n        // serial `setTimeout` calls can be individually delayed, which delays\n        // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n        // guarantee the interval callback will be invoked more precisely to the\n        // interval period, regardless of load.\n        //\n        // Therefore, we use `setInterval` to schedule single and repeat actions.\n        // If the action reschedules itself with the same delay, the interval is not\n        // canceled. If the action doesn't reschedule, or reschedules with a\n        // different delay, the interval will be canceled after scheduled callback\n        // execution.\n        //\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, delay);\n        }\n        // Set the pending flag indicating that this action has been scheduled, or\n        // has recursively rescheduled itself.\n        this.pending = true;\n        this.delay = delay;\n        // If this action has already an async Id, don't request a new one.\n        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n        return this;\n    };\n    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        return setInterval(scheduler.flush.bind(scheduler, this), delay);\n    };\n    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        // If this action is rescheduled with the same delay time, don't clear the interval id.\n        if (delay !== null && this.delay === delay && this.pending === false) {\n            return id;\n        }\n        // Otherwise, if the action's delay time is different from the current delay,\n        // or the action has been rescheduled before it's executed, clear the interval id\n        return clearInterval(id) && undefined || undefined;\n    };\n    /**\n     * Immediately executes this action and the `work` it contains.\n     * @return {any}\n     */\n    AsyncAction.prototype.execute = function (state, delay) {\n        if (this.closed) {\n            return new Error('executing a cancelled action');\n        }\n        this.pending = false;\n        var error = this._execute(state, delay);\n        if (error) {\n            return error;\n        }\n        else if (this.pending === false && this.id != null) {\n            // Dequeue if the action didn't reschedule itself. Don't call\n            // unsubscribe(), because the action could reschedule later.\n            // For example:\n            // ```\n            // scheduler.schedule(function doWork(counter) {\n            //   /* ... I'm a busy worker bee ... */\n            //   var originalAction = this;\n            //   /* wait 100ms before rescheduling the action */\n            //   setTimeout(function () {\n            //     originalAction.schedule(counter + 1);\n            //   }, 100);\n            // }, 1000);\n            // ```\n            this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n        }\n    };\n    AsyncAction.prototype._execute = function (state, delay) {\n        var errored = false;\n        var errorValue = undefined;\n        try {\n            this.work(state);\n        }\n        catch (e) {\n            errored = true;\n            errorValue = !!e && e || new Error(e);\n        }\n        if (errored) {\n            this.unsubscribe();\n            return errorValue;\n        }\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    AsyncAction.prototype._unsubscribe = function () {\n        var id = this.id;\n        var scheduler = this.scheduler;\n        var actions = scheduler.actions;\n        var index = actions.indexOf(this);\n        this.work = null;\n        this.state = null;\n        this.pending = false;\n        this.scheduler = null;\n        if (index !== -1) {\n            actions.splice(index, 1);\n        }\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, null);\n        }\n        this.delay = null;\n    };\n    return AsyncAction;\n}(Action));\nexport { AsyncAction };\n//# sourceMappingURL=AsyncAction.js.map\n","/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n * @deprecated Scheduler is an internal implementation detail of RxJS, and\n * should not be used directly. Rather, create your own class and implement\n * {@link SchedulerLike}\n */\nvar Scheduler = /*@__PURE__*/ (function () {\n    function Scheduler(SchedulerAction, now) {\n        if (now === void 0) {\n            now = Scheduler.now;\n        }\n        this.SchedulerAction = SchedulerAction;\n        this.now = now;\n    }\n    /**\n     * Schedules a function, `work`, for execution. May happen at some point in\n     * the future, according to the `delay` parameter, if specified. May be passed\n     * some context object, `state`, which will be passed to the `work` function.\n     *\n     * The given arguments will be processed an stored as an Action object in a\n     * queue of actions.\n     *\n     * @param {function(state: ?T): ?Subscription} work A function representing a\n     * task, or some unit of work to be executed by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler itself.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @return {Subscription} A subscription in order to be able to unsubscribe\n     * the scheduled work.\n     */\n    Scheduler.prototype.schedule = function (work, delay, state) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        return new this.SchedulerAction(this, work).schedule(state, delay);\n    };\n    /** @nocollapse */\n    Scheduler.now = Date.now ? Date.now : function () { return +new Date(); };\n    return Scheduler;\n}());\nexport { Scheduler };\n//# sourceMappingURL=Scheduler.js.map\n","/** PURE_IMPORTS_START tslib,_Scheduler PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Scheduler } from '../Scheduler';\nvar AsyncScheduler = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(AsyncScheduler, _super);\n    function AsyncScheduler(SchedulerAction, now) {\n        if (now === void 0) {\n            now = Scheduler.now;\n        }\n        var _this = _super.call(this, SchedulerAction, function () {\n            if (AsyncScheduler.delegate && AsyncScheduler.delegate !== _this) {\n                return AsyncScheduler.delegate.now();\n            }\n            else {\n                return now();\n            }\n        }) || this;\n        _this.actions = [];\n        /**\n         * A flag to indicate whether the Scheduler is currently executing a batch of\n         * queued actions.\n         * @type {boolean}\n         * @deprecated internal use only\n         */\n        _this.active = false;\n        /**\n         * An internal ID used to track the latest asynchronous task such as those\n         * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n         * others.\n         * @type {any}\n         * @deprecated internal use only\n         */\n        _this.scheduled = undefined;\n        return _this;\n    }\n    AsyncScheduler.prototype.schedule = function (work, delay, state) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {\n            return AsyncScheduler.delegate.schedule(work, delay, state);\n        }\n        else {\n            return _super.prototype.schedule.call(this, work, delay, state);\n        }\n    };\n    AsyncScheduler.prototype.flush = function (action) {\n        var actions = this.actions;\n        if (this.active) {\n            actions.push(action);\n            return;\n        }\n        var error;\n        this.active = true;\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (action = actions.shift()); // exhaust the scheduler queue\n        this.active = false;\n        if (error) {\n            while (action = actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AsyncScheduler;\n}(Scheduler));\nexport { AsyncScheduler };\n//# sourceMappingURL=AsyncScheduler.js.map\n","/** PURE_IMPORTS_START _AsyncAction,_AsyncScheduler PURE_IMPORTS_END */\nimport { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asap} scheduler.\n *\n * @example <caption>Use async scheduler to delay task</caption>\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n *\n *\n * @example <caption>Use async scheduler to repeat task in intervals</caption>\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\nexport var async = /*@__PURE__*/ new AsyncScheduler(AsyncAction);\n//# sourceMappingURL=async.js.map\n","/** PURE_IMPORTS_START _isArray PURE_IMPORTS_END */\nimport { isArray } from './isArray';\nexport function isNumeric(val) {\n    // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n    // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n    // subtraction forces infinities to NaN\n    // adding 1 corrects loss of precision from parseFloat (#15100)\n    return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n}\n//# sourceMappingURL=isNumeric.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function isScheduler(value) {\n    return value && typeof value.schedule === 'function';\n}\n//# sourceMappingURL=isScheduler.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * <img src=\"./img/buffer.png\" width=\"100%\">\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * @example <caption>On every click, emit array of most recent interval events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var buffered = interval.buffer(clicks);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return {Observable<T[]>} An Observable of buffers, which are arrays of\n * values.\n * @method buffer\n * @owner Observable\n */\nexport function buffer(closingNotifier) {\n    return function bufferOperatorFunction(source) {\n        return source.lift(new BufferOperator(closingNotifier));\n    };\n}\nvar BufferOperator = /*@__PURE__*/ (function () {\n    function BufferOperator(closingNotifier) {\n        this.closingNotifier = closingNotifier;\n    }\n    BufferOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));\n    };\n    return BufferOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(BufferSubscriber, _super);\n    function BufferSubscriber(destination, closingNotifier) {\n        var _this = _super.call(this, destination) || this;\n        _this.buffer = [];\n        _this.add(subscribeToResult(_this, closingNotifier));\n        return _this;\n    }\n    BufferSubscriber.prototype._next = function (value) {\n        this.buffer.push(value);\n    };\n    BufferSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var buffer = this.buffer;\n        this.buffer = [];\n        this.destination.next(buffer);\n    };\n    return BufferSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=buffer.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * <img src=\"./img/bufferCount.png\" width=\"100%\">\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * @example <caption>Emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>On every click, emit the last two click events as an array</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferCount(2, 1);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return {Observable<T[]>} An Observable of arrays of buffered values.\n * @method bufferCount\n * @owner Observable\n */\nexport function bufferCount(bufferSize, startBufferEvery) {\n    if (startBufferEvery === void 0) {\n        startBufferEvery = null;\n    }\n    return function bufferCountOperatorFunction(source) {\n        return source.lift(new BufferCountOperator(bufferSize, startBufferEvery));\n    };\n}\nvar BufferCountOperator = /*@__PURE__*/ (function () {\n    function BufferCountOperator(bufferSize, startBufferEvery) {\n        this.bufferSize = bufferSize;\n        this.startBufferEvery = startBufferEvery;\n        if (!startBufferEvery || bufferSize === startBufferEvery) {\n            this.subscriberClass = BufferCountSubscriber;\n        }\n        else {\n            this.subscriberClass = BufferSkipCountSubscriber;\n        }\n    }\n    BufferCountOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));\n    };\n    return BufferCountOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferCountSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(BufferCountSubscriber, _super);\n    function BufferCountSubscriber(destination, bufferSize) {\n        var _this = _super.call(this, destination) || this;\n        _this.bufferSize = bufferSize;\n        _this.buffer = [];\n        return _this;\n    }\n    BufferCountSubscriber.prototype._next = function (value) {\n        var buffer = this.buffer;\n        buffer.push(value);\n        if (buffer.length == this.bufferSize) {\n            this.destination.next(buffer);\n            this.buffer = [];\n        }\n    };\n    BufferCountSubscriber.prototype._complete = function () {\n        var buffer = this.buffer;\n        if (buffer.length > 0) {\n            this.destination.next(buffer);\n        }\n        _super.prototype._complete.call(this);\n    };\n    return BufferCountSubscriber;\n}(Subscriber));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferSkipCountSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(BufferSkipCountSubscriber, _super);\n    function BufferSkipCountSubscriber(destination, bufferSize, startBufferEvery) {\n        var _this = _super.call(this, destination) || this;\n        _this.bufferSize = bufferSize;\n        _this.startBufferEvery = startBufferEvery;\n        _this.buffers = [];\n        _this.count = 0;\n        return _this;\n    }\n    BufferSkipCountSubscriber.prototype._next = function (value) {\n        var _a = this, bufferSize = _a.bufferSize, startBufferEvery = _a.startBufferEvery, buffers = _a.buffers, count = _a.count;\n        this.count++;\n        if (count % startBufferEvery === 0) {\n            buffers.push([]);\n        }\n        for (var i = buffers.length; i--;) {\n            var buffer = buffers[i];\n            buffer.push(value);\n            if (buffer.length === bufferSize) {\n                buffers.splice(i, 1);\n                this.destination.next(buffer);\n            }\n        }\n    };\n    BufferSkipCountSubscriber.prototype._complete = function () {\n        var _a = this, buffers = _a.buffers, destination = _a.destination;\n        while (buffers.length > 0) {\n            var buffer = buffers.shift();\n            if (buffer.length > 0) {\n                destination.next(buffer);\n            }\n        }\n        _super.prototype._complete.call(this);\n    };\n    return BufferSkipCountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=bufferCount.js.map\n","/** PURE_IMPORTS_START tslib,_scheduler_async,_Subscriber,_util_isScheduler PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\n/* tslint:enable:max-line-length */\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * <img src=\"./img/bufferTime.png\" width=\"100%\">\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * @example <caption>Every second, emit an array of the recent click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(1000);\n * buffered.subscribe(x => console.log(x));\n *\n * @example <caption>Every 5 seconds, emit the click events from the next 2 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferTime(2000, 5000);\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {Scheduler} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferTime\n * @owner Observable\n */\nexport function bufferTime(bufferTimeSpan) {\n    var length = arguments.length;\n    var scheduler = async;\n    if (isScheduler(arguments[arguments.length - 1])) {\n        scheduler = arguments[arguments.length - 1];\n        length--;\n    }\n    var bufferCreationInterval = null;\n    if (length >= 2) {\n        bufferCreationInterval = arguments[1];\n    }\n    var maxBufferSize = Number.POSITIVE_INFINITY;\n    if (length >= 3) {\n        maxBufferSize = arguments[2];\n    }\n    return function bufferTimeOperatorFunction(source) {\n        return source.lift(new BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n    };\n}\nvar BufferTimeOperator = /*@__PURE__*/ (function () {\n    function BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n        this.bufferTimeSpan = bufferTimeSpan;\n        this.bufferCreationInterval = bufferCreationInterval;\n        this.maxBufferSize = maxBufferSize;\n        this.scheduler = scheduler;\n    }\n    BufferTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferTimeSubscriber(subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler));\n    };\n    return BufferTimeOperator;\n}());\nvar Context = /*@__PURE__*/ (function () {\n    function Context() {\n        this.buffer = [];\n    }\n    return Context;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferTimeSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(BufferTimeSubscriber, _super);\n    function BufferTimeSubscriber(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.bufferTimeSpan = bufferTimeSpan;\n        _this.bufferCreationInterval = bufferCreationInterval;\n        _this.maxBufferSize = maxBufferSize;\n        _this.scheduler = scheduler;\n        _this.contexts = [];\n        var context = _this.openContext();\n        _this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n        if (_this.timespanOnly) {\n            var timeSpanOnlyState = { subscriber: _this, context: context, bufferTimeSpan: bufferTimeSpan };\n            _this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n        }\n        else {\n            var closeState = { subscriber: _this, context: context };\n            var creationState = { bufferTimeSpan: bufferTimeSpan, bufferCreationInterval: bufferCreationInterval, subscriber: _this, scheduler: scheduler };\n            _this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n            _this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n        }\n        return _this;\n    }\n    BufferTimeSubscriber.prototype._next = function (value) {\n        var contexts = this.contexts;\n        var len = contexts.length;\n        var filledBufferContext;\n        for (var i = 0; i < len; i++) {\n            var context_1 = contexts[i];\n            var buffer = context_1.buffer;\n            buffer.push(value);\n            if (buffer.length == this.maxBufferSize) {\n                filledBufferContext = context_1;\n            }\n        }\n        if (filledBufferContext) {\n            this.onBufferFull(filledBufferContext);\n        }\n    };\n    BufferTimeSubscriber.prototype._error = function (err) {\n        this.contexts.length = 0;\n        _super.prototype._error.call(this, err);\n    };\n    BufferTimeSubscriber.prototype._complete = function () {\n        var _a = this, contexts = _a.contexts, destination = _a.destination;\n        while (contexts.length > 0) {\n            var context_2 = contexts.shift();\n            destination.next(context_2.buffer);\n        }\n        _super.prototype._complete.call(this);\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    BufferTimeSubscriber.prototype._unsubscribe = function () {\n        this.contexts = null;\n    };\n    BufferTimeSubscriber.prototype.onBufferFull = function (context) {\n        this.closeContext(context);\n        var closeAction = context.closeAction;\n        closeAction.unsubscribe();\n        this.remove(closeAction);\n        if (!this.closed && this.timespanOnly) {\n            context = this.openContext();\n            var bufferTimeSpan = this.bufferTimeSpan;\n            var timeSpanOnlyState = { subscriber: this, context: context, bufferTimeSpan: bufferTimeSpan };\n            this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n        }\n    };\n    BufferTimeSubscriber.prototype.openContext = function () {\n        var context = new Context();\n        this.contexts.push(context);\n        return context;\n    };\n    BufferTimeSubscriber.prototype.closeContext = function (context) {\n        this.destination.next(context.buffer);\n        var contexts = this.contexts;\n        var spliceIndex = contexts ? contexts.indexOf(context) : -1;\n        if (spliceIndex >= 0) {\n            contexts.splice(contexts.indexOf(context), 1);\n        }\n    };\n    return BufferTimeSubscriber;\n}(Subscriber));\nfunction dispatchBufferTimeSpanOnly(state) {\n    var subscriber = state.subscriber;\n    var prevContext = state.context;\n    if (prevContext) {\n        subscriber.closeContext(prevContext);\n    }\n    if (!subscriber.closed) {\n        state.context = subscriber.openContext();\n        state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n    }\n}\nfunction dispatchBufferCreation(state) {\n    var bufferCreationInterval = state.bufferCreationInterval, bufferTimeSpan = state.bufferTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler;\n    var context = subscriber.openContext();\n    var action = this;\n    if (!subscriber.closed) {\n        subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, { subscriber: subscriber, context: context }));\n        action.schedule(state, bufferCreationInterval);\n    }\n}\nfunction dispatchBufferClose(arg) {\n    var subscriber = arg.subscriber, context = arg.context;\n    subscriber.closeContext(context);\n}\n//# sourceMappingURL=bufferTime.js.map\n","/** PURE_IMPORTS_START tslib,_Subscription,_util_subscribeToResult,_OuterSubscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * <img src=\"./img/bufferToggle.png\" width=\"100%\">\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var buffered = clicks.bufferToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param {SubscribableOrPromise<O>} openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param {function(value: O): SubscribableOrPromise} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferToggle\n * @owner Observable\n */\nexport function bufferToggle(openings, closingSelector) {\n    return function bufferToggleOperatorFunction(source) {\n        return source.lift(new BufferToggleOperator(openings, closingSelector));\n    };\n}\nvar BufferToggleOperator = /*@__PURE__*/ (function () {\n    function BufferToggleOperator(openings, closingSelector) {\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n    }\n    BufferToggleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n    };\n    return BufferToggleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferToggleSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(BufferToggleSubscriber, _super);\n    function BufferToggleSubscriber(destination, openings, closingSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.openings = openings;\n        _this.closingSelector = closingSelector;\n        _this.contexts = [];\n        _this.add(subscribeToResult(_this, openings));\n        return _this;\n    }\n    BufferToggleSubscriber.prototype._next = function (value) {\n        var contexts = this.contexts;\n        var len = contexts.length;\n        for (var i = 0; i < len; i++) {\n            contexts[i].buffer.push(value);\n        }\n    };\n    BufferToggleSubscriber.prototype._error = function (err) {\n        var contexts = this.contexts;\n        while (contexts.length > 0) {\n            var context_1 = contexts.shift();\n            context_1.subscription.unsubscribe();\n            context_1.buffer = null;\n            context_1.subscription = null;\n        }\n        this.contexts = null;\n        _super.prototype._error.call(this, err);\n    };\n    BufferToggleSubscriber.prototype._complete = function () {\n        var contexts = this.contexts;\n        while (contexts.length > 0) {\n            var context_2 = contexts.shift();\n            this.destination.next(context_2.buffer);\n            context_2.subscription.unsubscribe();\n            context_2.buffer = null;\n            context_2.subscription = null;\n        }\n        this.contexts = null;\n        _super.prototype._complete.call(this);\n    };\n    BufferToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n    };\n    BufferToggleSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.closeBuffer(innerSub.context);\n    };\n    BufferToggleSubscriber.prototype.openBuffer = function (value) {\n        try {\n            var closingSelector = this.closingSelector;\n            var closingNotifier = closingSelector.call(this, value);\n            if (closingNotifier) {\n                this.trySubscribe(closingNotifier);\n            }\n        }\n        catch (err) {\n            this._error(err);\n        }\n    };\n    BufferToggleSubscriber.prototype.closeBuffer = function (context) {\n        var contexts = this.contexts;\n        if (contexts && context) {\n            var buffer = context.buffer, subscription = context.subscription;\n            this.destination.next(buffer);\n            contexts.splice(contexts.indexOf(context), 1);\n            this.remove(subscription);\n            subscription.unsubscribe();\n        }\n    };\n    BufferToggleSubscriber.prototype.trySubscribe = function (closingNotifier) {\n        var contexts = this.contexts;\n        var buffer = [];\n        var subscription = new Subscription();\n        var context = { buffer: buffer, subscription: subscription };\n        contexts.push(context);\n        var innerSubscription = subscribeToResult(this, closingNotifier, context);\n        if (!innerSubscription || innerSubscription.closed) {\n            this.closeBuffer(context);\n        }\n        else {\n            innerSubscription.context = context;\n            this.add(innerSubscription);\n            subscription.add(innerSubscription);\n        }\n    };\n    return BufferToggleSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=bufferToggle.js.map\n","/** PURE_IMPORTS_START tslib,_Subscription,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nexport function bufferWhen(closingSelector) {\n    return function (source) {\n        return source.lift(new BufferWhenOperator(closingSelector));\n    };\n}\nvar BufferWhenOperator = /*@__PURE__*/ (function () {\n    function BufferWhenOperator(closingSelector) {\n        this.closingSelector = closingSelector;\n    }\n    BufferWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n    };\n    return BufferWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferWhenSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(BufferWhenSubscriber, _super);\n    function BufferWhenSubscriber(destination, closingSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.closingSelector = closingSelector;\n        _this.subscribing = false;\n        _this.openBuffer();\n        return _this;\n    }\n    BufferWhenSubscriber.prototype._next = function (value) {\n        this.buffer.push(value);\n    };\n    BufferWhenSubscriber.prototype._complete = function () {\n        var buffer = this.buffer;\n        if (buffer) {\n            this.destination.next(buffer);\n        }\n        _super.prototype._complete.call(this);\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    BufferWhenSubscriber.prototype._unsubscribe = function () {\n        this.buffer = null;\n        this.subscribing = false;\n    };\n    BufferWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.openBuffer();\n    };\n    BufferWhenSubscriber.prototype.notifyComplete = function () {\n        if (this.subscribing) {\n            this.complete();\n        }\n        else {\n            this.openBuffer();\n        }\n    };\n    BufferWhenSubscriber.prototype.openBuffer = function () {\n        var closingSubscription = this.closingSubscription;\n        if (closingSubscription) {\n            this.remove(closingSubscription);\n            closingSubscription.unsubscribe();\n        }\n        var buffer = this.buffer;\n        if (this.buffer) {\n            this.destination.next(buffer);\n        }\n        this.buffer = [];\n        var closingNotifier = tryCatch(this.closingSelector)();\n        if (closingNotifier === errorObject) {\n            this.error(errorObject.e);\n        }\n        else {\n            closingSubscription = new Subscription();\n            this.closingSubscription = closingSubscription;\n            this.add(closingSubscription);\n            this.subscribing = true;\n            closingSubscription.add(subscribeToResult(this, closingNotifier));\n            this.subscribing = false;\n        }\n    };\n    return BufferWhenSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=bufferWhen.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function catchError(selector) {\n    return function catchErrorOperatorFunction(source) {\n        var operator = new CatchOperator(selector);\n        var caught = source.lift(operator);\n        return (operator.caught = caught);\n    };\n}\nvar CatchOperator = /*@__PURE__*/ (function () {\n    function CatchOperator(selector) {\n        this.selector = selector;\n    }\n    CatchOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));\n    };\n    return CatchOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar CatchSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(CatchSubscriber, _super);\n    function CatchSubscriber(destination, selector, caught) {\n        var _this = _super.call(this, destination) || this;\n        _this.selector = selector;\n        _this.caught = caught;\n        return _this;\n    }\n    // NOTE: overriding `error` instead of `_error` because we don't want\n    // to have this flag this subscriber as `isStopped`. We can mimic the\n    // behavior of the RetrySubscriber (from the `retry` operator), where\n    // we unsubscribe from our source chain, reset our Subscriber flags,\n    // then subscribe to the selector result.\n    CatchSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var result = void 0;\n            try {\n                result = this.selector(err, this.caught);\n            }\n            catch (err2) {\n                _super.prototype.error.call(this, err2);\n                return;\n            }\n            this._unsubscribeAndRecycle();\n            this.add(subscribeToResult(this, result));\n        }\n    };\n    return CatchSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=catchError.js.map\n","/** PURE_IMPORTS_START _Observable,_Subscription,_util_subscribeToArray PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { subscribeToArray } from '../util/subscribeToArray';\nexport function fromArray(input, scheduler) {\n    if (!scheduler) {\n        return new Observable(subscribeToArray(input));\n    }\n    else {\n        return new Observable(function (subscriber) {\n            var sub = new Subscription();\n            var i = 0;\n            sub.add(scheduler.schedule(function () {\n                if (i === input.length) {\n                    subscriber.complete();\n                    return;\n                }\n                subscriber.next(input[i++]);\n                if (!subscriber.closed) {\n                    sub.add(this.schedule());\n                }\n            }));\n            return sub;\n        });\n    }\n}\n//# sourceMappingURL=fromArray.js.map\n","/** PURE_IMPORTS_START tslib,_util_isScheduler,_util_isArray,_OuterSubscriber,_util_subscribeToResult,_fromArray PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { isScheduler } from '../util/isScheduler';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { fromArray } from './fromArray';\nvar NONE = {};\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable in order and,\n * whenever any Observable emits, collecting an array of the most recent\n * values from each Observable. So if you pass `n` Observables to operator,\n * returned Observable will always emit an array of `n` values, in order\n * corresponding to order of passed Observables (value from the first Observable\n * on the first place and so on).\n *\n * Static version of `combineLatest` accepts either an array of Observables\n * or each Observable can be put directly as an argument. Note that array of\n * Observables is good choice, if you don't know beforehand how many Observables\n * you will combine. Passing empty array will result in Observable that\n * completes immediately.\n *\n * To ensure output array has always the same length, `combineLatest` will\n * actually wait for all input Observables to emit at least once,\n * before it starts emitting results. This means if some Observable emits\n * values before other Observables started emitting, all that values but last\n * will be lost. On the other hand, is some Observable does not emit value but\n * completes, resulting Observable will complete at the same moment without\n * emitting anything, since it will be now impossible to include value from\n * completed Observable in resulting array. Also, if some input Observable does\n * not emit any value and never completes, `combineLatest` will also never emit\n * and never complete, since, again, it will wait for all streams to emit some\n * value.\n *\n * If at least one Observable was passed to `combineLatest` and all passed Observables\n * emitted something, resulting Observable will complete when all combined\n * streams complete. So even if some Observable completes, result of\n * `combineLatest` will still emit values when other Observables do. In case\n * of completed Observable, its value from now on will always be the last\n * emitted value. On the other hand, if any Observable errors, `combineLatest`\n * will error immediately as well, and all other Observables will be unsubscribed.\n *\n * `combineLatest` accepts as optional parameter `project` function, which takes\n * as arguments all values that would normally be emitted by resulting Observable.\n * `project` can return any kind of value, which will be then emitted by Observable\n * instead of default array. Note that `project` does not take as argument that array\n * of values, but values themselves. That means default `project` can be imagined\n * as function that takes all its arguments and puts them into an array.\n *\n *\n * @example <caption>Combine two timer Observables</caption>\n * const firstTimer = Rx.Observable.timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\n * const secondTimer = Rx.Observable.timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\n * const combinedTimers = Rx.Observable.combineLatest(firstTimer, secondTimer);\n * combinedTimers.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0] after 0.5s\n * // [1, 0] after 1s\n * // [1, 1] after 1.5s\n * // [2, 1] after 2s\n *\n *\n * @example <caption>Combine an array of Observables</caption>\n * const observables = [1, 5, 10].map(\n *   n => Rx.Observable.of(n).delay(n * 1000).startWith(0) // emit 0 and then emit n after n seconds\n * );\n * const combined = Rx.Observable.combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0, 0] immediately\n * // [1, 0, 0] after 1s\n * // [1, 5, 0] after 5s\n * // [1, 5, 10] after 10s\n *\n *\n * @example <caption>Use project function to dynamically calculate the Body-Mass Index</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} observable1 An input Observable to combine with other Observables.\n * @param {ObservableInput} observable2 An input Observable to combine with other Observables.\n * More than one input Observables may be given as arguments\n * or an array of Observables may be given as the first argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n */\nexport function combineLatest() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i] = arguments[_i];\n    }\n    var resultSelector = null;\n    var scheduler = null;\n    if (isScheduler(observables[observables.length - 1])) {\n        scheduler = observables.pop();\n    }\n    if (typeof observables[observables.length - 1] === 'function') {\n        resultSelector = observables.pop();\n    }\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `combineLatest([obs1, obs2, obs3], resultSelector)`\n    if (observables.length === 1 && isArray(observables[0])) {\n        observables = observables[0];\n    }\n    return fromArray(observables, scheduler).lift(new CombineLatestOperator(resultSelector));\n}\nvar CombineLatestOperator = /*@__PURE__*/ (function () {\n    function CombineLatestOperator(resultSelector) {\n        this.resultSelector = resultSelector;\n    }\n    CombineLatestOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new CombineLatestSubscriber(subscriber, this.resultSelector));\n    };\n    return CombineLatestOperator;\n}());\nexport { CombineLatestOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar CombineLatestSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(CombineLatestSubscriber, _super);\n    function CombineLatestSubscriber(destination, resultSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.resultSelector = resultSelector;\n        _this.active = 0;\n        _this.values = [];\n        _this.observables = [];\n        return _this;\n    }\n    CombineLatestSubscriber.prototype._next = function (observable) {\n        this.values.push(NONE);\n        this.observables.push(observable);\n    };\n    CombineLatestSubscriber.prototype._complete = function () {\n        var observables = this.observables;\n        var len = observables.length;\n        if (len === 0) {\n            this.destination.complete();\n        }\n        else {\n            this.active = len;\n            this.toRespond = len;\n            for (var i = 0; i < len; i++) {\n                var observable = observables[i];\n                this.add(subscribeToResult(this, observable, observable, i));\n            }\n        }\n    };\n    CombineLatestSubscriber.prototype.notifyComplete = function (unused) {\n        if ((this.active -= 1) === 0) {\n            this.destination.complete();\n        }\n    };\n    CombineLatestSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var values = this.values;\n        var oldVal = values[outerIndex];\n        var toRespond = !this.toRespond\n            ? 0\n            : oldVal === NONE ? --this.toRespond : this.toRespond;\n        values[outerIndex] = innerValue;\n        if (toRespond === 0) {\n            if (this.resultSelector) {\n                this._tryResultSelector(values);\n            }\n            else {\n                this.destination.next(values.slice());\n            }\n        }\n    };\n    CombineLatestSubscriber.prototype._tryResultSelector = function (values) {\n        var result;\n        try {\n            result = this.resultSelector.apply(this, values);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return CombineLatestSubscriber;\n}(OuterSubscriber));\nexport { CombineLatestSubscriber };\n//# sourceMappingURL=combineLatest.js.map\n","/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\n/**\n * The same Observable instance returned by any call to {@link empty} without a\n * {@link Scheduler}. It is preferrable to use this over `empty()`.\n */\nexport var EMPTY = /*@__PURE__*/ new Observable(function (subscriber) { return subscriber.complete(); });\n/**\n * Creates an Observable that emits no items to the Observer and immediately\n * emits a complete notification.\n *\n * <span class=\"informal\">Just emits 'complete', and nothing else.\n * </span>\n *\n * <img src=\"./img/empty.png\" width=\"100%\">\n *\n * This static operator is useful for creating a simple Observable that only\n * emits the complete notification. It can be used for composing with other\n * Observables, such as in a {@link mergeMap}.\n *\n * @example <caption>Emit the number 7, then complete.</caption>\n * var result = Rx.Observable.empty().startWith(7);\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n * var interval = Rx.Observable.interval(1000);\n * var result = interval.mergeMap(x =>\n *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following to the console:\n * // x is equal to the count on the interval eg(0,1,2,3,...)\n * // x will occur every 1000ms\n * // if x % 2 is equal to 1 print abc\n * // if x % 2 is not equal to 1 nothing will be output\n *\n * @see {@link create}\n * @see {@link never}\n * @see {@link of}\n * @see {@link throw}\n *\n * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n * the emission of the complete notification.\n * @return {Observable} An \"empty\" Observable: emits only the complete\n * notification.\n * @static true\n * @name empty\n * @owner Observable\n * @deprecated Deprecated in favor of using EMPTY constant.\n */\nexport function empty(scheduler) {\n    return scheduler ? emptyScheduled(scheduler) : EMPTY;\n}\nexport function emptyScheduled(scheduler) {\n    return new Observable(function (subscriber) { return scheduler.schedule(function () { return subscriber.complete(); }); });\n}\n//# sourceMappingURL=empty.js.map\n","/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nexport function scalar(value) {\n    var result = new Observable(function (subscriber) {\n        subscriber.next(value);\n        subscriber.complete();\n    });\n    result._isScalar = true;\n    result.value = value;\n    return result;\n}\n//# sourceMappingURL=scalar.js.map\n","/** PURE_IMPORTS_START _util_isScheduler,_fromArray,_empty,_scalar PURE_IMPORTS_END */\nimport { isScheduler } from '../util/isScheduler';\nimport { fromArray } from './fromArray';\nimport { empty } from './empty';\nimport { scalar } from './scalar';\nexport function of() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    var scheduler = args[args.length - 1];\n    if (isScheduler(scheduler)) {\n        args.pop();\n    }\n    else {\n        scheduler = undefined;\n    }\n    switch (args.length) {\n        case 0:\n            return empty(scheduler);\n        case 1:\n            return scheduler ? fromArray(args, scheduler) : scalar(args[0]);\n        default:\n            return fromArray(args, scheduler);\n    }\n}\n//# sourceMappingURL=of.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map(project, thisArg) {\n    return function mapOperation(source) {\n        if (typeof project !== 'function') {\n            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n        }\n        return source.lift(new MapOperator(project, thisArg));\n    };\n}\nvar MapOperator = /*@__PURE__*/ (function () {\n    function MapOperator(project, thisArg) {\n        this.project = project;\n        this.thisArg = thisArg;\n    }\n    MapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n    };\n    return MapOperator;\n}());\nexport { MapOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MapSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MapSubscriber, _super);\n    function MapSubscriber(destination, project, thisArg) {\n        var _this = _super.call(this, destination) || this;\n        _this.project = project;\n        _this.count = 0;\n        _this.thisArg = thisArg || _this;\n        return _this;\n    }\n    // NOTE: This looks unoptimized, but it's actually purposefully NOT\n    // using try/catch optimizations.\n    MapSubscriber.prototype._next = function (value) {\n        var result;\n        try {\n            result = this.project.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return MapSubscriber;\n}(Subscriber));\n//# sourceMappingURL=map.js.map\n","/** PURE_IMPORTS_START tslib,_util_subscribeToResult,_OuterSubscriber,_map,_observable_from PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { map } from './map';\nimport { from } from '../observable/from';\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap(project, resultSelector, concurrent) {\n    if (concurrent === void 0) {\n        concurrent = Number.POSITIVE_INFINITY;\n    }\n    if (typeof resultSelector === 'function') {\n        // DEPRECATED PATH\n        return function (source) { return source.pipe(mergeMap(function (a, i) { return from(project(a, i)).pipe(map(function (b, ii) { return resultSelector(a, b, i, ii); })); }, concurrent)); };\n    }\n    else if (typeof resultSelector === 'number') {\n        concurrent = resultSelector;\n    }\n    return function (source) { return source.lift(new MergeMapOperator(project, concurrent)); };\n}\nvar MergeMapOperator = /*@__PURE__*/ (function () {\n    function MergeMapOperator(project, concurrent) {\n        if (concurrent === void 0) {\n            concurrent = Number.POSITIVE_INFINITY;\n        }\n        this.project = project;\n        this.concurrent = concurrent;\n    }\n    MergeMapOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));\n    };\n    return MergeMapOperator;\n}());\nexport { MergeMapOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MergeMapSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MergeMapSubscriber, _super);\n    function MergeMapSubscriber(destination, project, concurrent) {\n        if (concurrent === void 0) {\n            concurrent = Number.POSITIVE_INFINITY;\n        }\n        var _this = _super.call(this, destination) || this;\n        _this.project = project;\n        _this.concurrent = concurrent;\n        _this.hasCompleted = false;\n        _this.buffer = [];\n        _this.active = 0;\n        _this.index = 0;\n        return _this;\n    }\n    MergeMapSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            this._tryNext(value);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeMapSubscriber.prototype._tryNext = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.active++;\n        this._innerSub(result, value, index);\n    };\n    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {\n        this.add(subscribeToResult(this, ish, value, index));\n    };\n    MergeMapSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n    };\n    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    };\n    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return MergeMapSubscriber;\n}(OuterSubscriber));\nexport { MergeMapSubscriber };\n//# sourceMappingURL=mergeMap.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * <img src=\"./img/count.png\" width=\"100%\">\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * @example <caption>Counts how many seconds have passed before the first click happened</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var secondsBeforeClick = seconds.takeUntil(clicks);\n * var result = secondsBeforeClick.count();\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Counts how many odd numbers are there between 1 and 7</caption>\n * var numbers = Rx.Observable.range(1, 7);\n * var result = numbers.count(i => i % 2 === 1);\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 4\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param {function(value: T, i: number, source: Observable<T>): boolean} [predicate] A\n * boolean function to select what values are to be counted. It is provided with\n * arguments of:\n * - `value`: the value from the source Observable.\n * - `index`: the (zero-based) \"index\" of the value from the source Observable.\n * - `source`: the source Observable instance itself.\n * @return {Observable} An Observable of one number that represents the count as\n * described above.\n * @method count\n * @owner Observable\n */\nexport function count(predicate) {\n    return function (source) { return source.lift(new CountOperator(predicate, source)); };\n}\nvar CountOperator = /*@__PURE__*/ (function () {\n    function CountOperator(predicate, source) {\n        this.predicate = predicate;\n        this.source = source;\n    }\n    CountOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n    };\n    return CountOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar CountSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(CountSubscriber, _super);\n    function CountSubscriber(destination, predicate, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.source = source;\n        _this.count = 0;\n        _this.index = 0;\n        return _this;\n    }\n    CountSubscriber.prototype._next = function (value) {\n        if (this.predicate) {\n            this._tryPredicate(value);\n        }\n        else {\n            this.count++;\n        }\n    };\n    CountSubscriber.prototype._tryPredicate = function (value) {\n        var result;\n        try {\n            result = this.predicate(value, this.index++, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this.count++;\n        }\n    };\n    CountSubscriber.prototype._complete = function () {\n        this.destination.next(this.count);\n        this.destination.complete();\n    };\n    return CountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=count.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Emits a value from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * <img src=\"./img/debounce.png\" width=\"100%\">\n *\n * `debounce` delays values emitted by the source Observable, but drops previous\n * pending delayed emissions if a new value arrives on the source Observable.\n * This operator keeps track of the most recent value from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The value is emitted only when the duration\n * Observable emits a value or completes, and if no other value was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * value appears before the duration Observable emits, the previous value will\n * be dropped and will not be emitted on the output Observable.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounce(() => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n * @see {@link throttle}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n * @method debounce\n * @owner Observable\n */\nexport function debounce(durationSelector) {\n    return function (source) { return source.lift(new DebounceOperator(durationSelector)); };\n}\nvar DebounceOperator = /*@__PURE__*/ (function () {\n    function DebounceOperator(durationSelector) {\n        this.durationSelector = durationSelector;\n    }\n    DebounceOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n    };\n    return DebounceOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DebounceSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(DebounceSubscriber, _super);\n    function DebounceSubscriber(destination, durationSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.durationSelector = durationSelector;\n        _this.hasValue = false;\n        _this.durationSubscription = null;\n        return _this;\n    }\n    DebounceSubscriber.prototype._next = function (value) {\n        try {\n            var result = this.durationSelector.call(this, value);\n            if (result) {\n                this._tryNext(value, result);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    DebounceSubscriber.prototype._complete = function () {\n        this.emitValue();\n        this.destination.complete();\n    };\n    DebounceSubscriber.prototype._tryNext = function (value, duration) {\n        var subscription = this.durationSubscription;\n        this.value = value;\n        this.hasValue = true;\n        if (subscription) {\n            subscription.unsubscribe();\n            this.remove(subscription);\n        }\n        subscription = subscribeToResult(this, duration);\n        if (subscription && !subscription.closed) {\n            this.add(this.durationSubscription = subscription);\n        }\n    };\n    DebounceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.emitValue();\n    };\n    DebounceSubscriber.prototype.notifyComplete = function () {\n        this.emitValue();\n    };\n    DebounceSubscriber.prototype.emitValue = function () {\n        if (this.hasValue) {\n            var value = this.value;\n            var subscription = this.durationSubscription;\n            if (subscription) {\n                this.durationSubscription = null;\n                subscription.unsubscribe();\n                this.remove(subscription);\n            }\n            // This must be done *before* passing the value\n            // along to the destination because it's possible for\n            // the value to synchronously re-enter this operator\n            // recursively if the duration selector Observable\n            // emits synchronously\n            this.value = null;\n            this.hasValue = false;\n            _super.prototype._next.call(this, value);\n        }\n    };\n    return DebounceSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=debounce.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\n/**\n * Emits a value from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent value from each burst of emissions.</span>\n *\n * <img src=\"./img/debounceTime.png\" width=\"100%\">\n *\n * `debounceTime` delays values emitted by the source Observable, but drops\n * previous pending delayed emissions if a new value arrives on the source\n * Observable. This operator keeps track of the most recent value from the\n * source Observable, and emits that only when `dueTime` enough time has passed\n * without any other value appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous value will be dropped\n * and will not be emitted on the output Observable.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * value to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link IScheduler} for\n * managing timers.\n *\n * @example <caption>Emit the most recent click after a burst of clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.debounceTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the timeout for each value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified `dueTime`, and may drop some values if they occur\n * too frequently.\n * @method debounceTime\n * @owner Observable\n */\nexport function debounceTime(dueTime, scheduler) {\n    if (scheduler === void 0) {\n        scheduler = async;\n    }\n    return function (source) { return source.lift(new DebounceTimeOperator(dueTime, scheduler)); };\n}\nvar DebounceTimeOperator = /*@__PURE__*/ (function () {\n    function DebounceTimeOperator(dueTime, scheduler) {\n        this.dueTime = dueTime;\n        this.scheduler = scheduler;\n    }\n    DebounceTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));\n    };\n    return DebounceTimeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DebounceTimeSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(DebounceTimeSubscriber, _super);\n    function DebounceTimeSubscriber(destination, dueTime, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.dueTime = dueTime;\n        _this.scheduler = scheduler;\n        _this.debouncedSubscription = null;\n        _this.lastValue = null;\n        _this.hasValue = false;\n        return _this;\n    }\n    DebounceTimeSubscriber.prototype._next = function (value) {\n        this.clearDebounce();\n        this.lastValue = value;\n        this.hasValue = true;\n        this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));\n    };\n    DebounceTimeSubscriber.prototype._complete = function () {\n        this.debouncedNext();\n        this.destination.complete();\n    };\n    DebounceTimeSubscriber.prototype.debouncedNext = function () {\n        this.clearDebounce();\n        if (this.hasValue) {\n            var lastValue = this.lastValue;\n            // This must be done *before* passing the value\n            // along to the destination because it's possible for\n            // the value to synchronously re-enter this operator\n            // recursively when scheduled with things like\n            // VirtualScheduler/TestScheduler.\n            this.lastValue = null;\n            this.hasValue = false;\n            this.destination.next(lastValue);\n        }\n    };\n    DebounceTimeSubscriber.prototype.clearDebounce = function () {\n        var debouncedSubscription = this.debouncedSubscription;\n        if (debouncedSubscription !== null) {\n            this.remove(debouncedSubscription);\n            debouncedSubscription.unsubscribe();\n            this.debouncedSubscription = null;\n        }\n    };\n    return DebounceTimeSubscriber;\n}(Subscriber));\nfunction dispatchNext(subscriber) {\n    subscriber.debouncedNext();\n}\n//# sourceMappingURL=debounceTime.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/* tslint:enable:max-line-length */\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * <img src=\"./img/defaultIfEmpty.png\" width=\"100%\">\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * @example <caption>If no clicks happen in 5 seconds, then emit \"no clicks\"</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksBeforeFive = clicks.takeUntil(Rx.Observable.interval(5000));\n * var result = clicksBeforeFive.defaultIfEmpty('no clicks');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param {any} [defaultValue=null] The default value used if the source\n * Observable is empty.\n * @return {Observable} An Observable that emits either the specified\n * `defaultValue` if the source Observable emits no items, or the values emitted\n * by the source Observable.\n * @method defaultIfEmpty\n * @owner Observable\n */\nexport function defaultIfEmpty(defaultValue) {\n    if (defaultValue === void 0) {\n        defaultValue = null;\n    }\n    return function (source) { return source.lift(new DefaultIfEmptyOperator(defaultValue)); };\n}\nvar DefaultIfEmptyOperator = /*@__PURE__*/ (function () {\n    function DefaultIfEmptyOperator(defaultValue) {\n        this.defaultValue = defaultValue;\n    }\n    DefaultIfEmptyOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));\n    };\n    return DefaultIfEmptyOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DefaultIfEmptySubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(DefaultIfEmptySubscriber, _super);\n    function DefaultIfEmptySubscriber(destination, defaultValue) {\n        var _this = _super.call(this, destination) || this;\n        _this.defaultValue = defaultValue;\n        _this.isEmpty = true;\n        return _this;\n    }\n    DefaultIfEmptySubscriber.prototype._next = function (value) {\n        this.isEmpty = false;\n        this.destination.next(value);\n    };\n    DefaultIfEmptySubscriber.prototype._complete = function () {\n        if (this.isEmpty) {\n            this.destination.next(this.defaultValue);\n        }\n        this.destination.complete();\n    };\n    return DefaultIfEmptySubscriber;\n}(Subscriber));\n//# sourceMappingURL=defaultIfEmpty.js.map\n","/** PURE_IMPORTS_START _Observable PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\n/**\n * Creates an Observable that emits no items to the Observer and immediately\n * emits an error notification.\n *\n * <span class=\"informal\">Just emits 'error', and nothing else.\n * </span>\n *\n * <img src=\"./img/throw.png\" width=\"100%\">\n *\n * This static operator is useful for creating a simple Observable that only\n * emits the error notification. It can be used for composing with other\n * Observables, such as in a {@link mergeMap}.\n *\n * @example <caption>Emit the number 7, then emit an error.</caption>\n * import { throwError, concat, of } from 'rxjs/create';\n *\n * const result = concat(of(7), throwError(new Error('oops!')));\n * result.subscribe(x => console.log(x), e => console.error(e));\n *\n * @example <caption>Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 13</caption>\n * import { throwError, interval, of } from 'rxjs/create';\n * import { mergeMap } from 'rxjs/operators';\n *\n * interval(1000).pipe(\n *   mergeMap(x => x === 13 ?\n *     throwError('Thirteens are bad') :\n *     of('a', 'b', 'c')\n *   )\n * ).subscribe(x => console.log(x), e => console.error(e));\n *\n * @see {@link create}\n * @see {@link empty}\n * @see {@link never}\n * @see {@link of}\n *\n * @param {any} error The particular Error to pass to the error notification.\n * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n * the emission of the error notification.\n * @return {Observable} An error Observable: emits only the error notification\n * using the given error argument.\n * @static true\n * @name throw\n * @owner Observable\n */\nexport function throwError(error, scheduler) {\n    if (!scheduler) {\n        return new Observable(function (subscriber) { return subscriber.error(error); });\n    }\n    else {\n        return new Observable(function (subscriber) { return scheduler.schedule(dispatch, 0, { error: error, subscriber: subscriber }); });\n    }\n}\nfunction dispatch(_a) {\n    var error = _a.error, subscriber = _a.subscriber;\n    subscriber.error(error);\n}\n//# sourceMappingURL=throwError.js.map\n","/** PURE_IMPORTS_START _observable_empty,_observable_of,_observable_throwError PURE_IMPORTS_END */\nimport { empty } from './observable/empty';\nimport { of } from './observable/of';\nimport { throwError } from './observable/throwError';\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nvar Notification = /*@__PURE__*/ (function () {\n    function Notification(kind, value, error) {\n        this.kind = kind;\n        this.value = value;\n        this.error = error;\n        this.hasValue = kind === 'N';\n    }\n    /**\n     * Delivers to the given `observer` the value wrapped by this Notification.\n     * @param {Observer} observer\n     * @return\n     */\n    Notification.prototype.observe = function (observer) {\n        switch (this.kind) {\n            case 'N':\n                return observer.next && observer.next(this.value);\n            case 'E':\n                return observer.error && observer.error(this.error);\n            case 'C':\n                return observer.complete && observer.complete();\n        }\n    };\n    /**\n     * Given some {@link Observer} callbacks, deliver the value represented by the\n     * current Notification to the correctly corresponding callback.\n     * @param {function(value: T): void} next An Observer `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    Notification.prototype.do = function (next, error, complete) {\n        var kind = this.kind;\n        switch (kind) {\n            case 'N':\n                return next && next(this.value);\n            case 'E':\n                return error && error(this.error);\n            case 'C':\n                return complete && complete();\n        }\n    };\n    /**\n     * Takes an Observer or its individual callback functions, and calls `observe`\n     * or `do` methods accordingly.\n     * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n     * the `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    Notification.prototype.accept = function (nextOrObserver, error, complete) {\n        if (nextOrObserver && typeof nextOrObserver.next === 'function') {\n            return this.observe(nextOrObserver);\n        }\n        else {\n            return this.do(nextOrObserver, error, complete);\n        }\n    };\n    /**\n     * Returns a simple Observable that just delivers the notification represented\n     * by this Notification instance.\n     * @return {any}\n     */\n    Notification.prototype.toObservable = function () {\n        var kind = this.kind;\n        switch (kind) {\n            case 'N':\n                return of(this.value);\n            case 'E':\n                return throwError(this.error);\n            case 'C':\n                return empty();\n        }\n        throw new Error('unexpected notification kind value');\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `next` from a\n     * given value.\n     * @param {T} value The `next` value.\n     * @return {Notification<T>} The \"next\" Notification representing the\n     * argument.\n     * @nocollapse\n     */\n    Notification.createNext = function (value) {\n        if (typeof value !== 'undefined') {\n            return new Notification('N', value);\n        }\n        return Notification.undefinedValueNotification;\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `error` from a\n     * given error.\n     * @param {any} [err] The `error` error.\n     * @return {Notification<T>} The \"error\" Notification representing the\n     * argument.\n     * @nocollapse\n     */\n    Notification.createError = function (err) {\n        return new Notification('E', undefined, err);\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `complete`.\n     * @return {Notification<any>} The valueless \"complete\" Notification.\n     * @nocollapse\n     */\n    Notification.createComplete = function () {\n        return Notification.completeNotification;\n    };\n    Notification.completeNotification = new Notification('C');\n    Notification.undefinedValueNotification = new Notification('N', undefined);\n    return Notification;\n}());\nexport { Notification };\n//# sourceMappingURL=Notification.js.map\n","/** PURE_IMPORTS_START tslib,_scheduler_async,_util_isDate,_Subscriber,_Notification PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * <img src=\"./img/delay.png\" width=\"100%\">\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * @example <caption>Delay each click by one second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delay(1000); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @example <caption>Delay all clicks until a future date happens</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var date = new Date('March 15, 2050 12:00:00'); // in the future\n * var delayedClicks = clicks.delay(date); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounceTime}\n * @see {@link delayWhen}\n *\n * @param {number|Date} delay The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {Scheduler} [scheduler=async] The IScheduler to use for\n * managing the timers that handle the time-shift for each item.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by the specified timeout or Date.\n * @method delay\n * @owner Observable\n */\nexport function delay(delay, scheduler) {\n    if (scheduler === void 0) {\n        scheduler = async;\n    }\n    var absoluteDelay = isDate(delay);\n    var delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(delay);\n    return function (source) { return source.lift(new DelayOperator(delayFor, scheduler)); };\n}\nvar DelayOperator = /*@__PURE__*/ (function () {\n    function DelayOperator(delay, scheduler) {\n        this.delay = delay;\n        this.scheduler = scheduler;\n    }\n    DelayOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n    };\n    return DelayOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DelaySubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(DelaySubscriber, _super);\n    function DelaySubscriber(destination, delay, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.delay = delay;\n        _this.scheduler = scheduler;\n        _this.queue = [];\n        _this.active = false;\n        _this.errored = false;\n        return _this;\n    }\n    DelaySubscriber.dispatch = function (state) {\n        var source = state.source;\n        var queue = source.queue;\n        var scheduler = state.scheduler;\n        var destination = state.destination;\n        while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n            queue.shift().notification.observe(destination);\n        }\n        if (queue.length > 0) {\n            var delay_1 = Math.max(0, queue[0].time - scheduler.now());\n            this.schedule(state, delay_1);\n        }\n        else {\n            this.unsubscribe();\n            source.active = false;\n        }\n    };\n    DelaySubscriber.prototype._schedule = function (scheduler) {\n        this.active = true;\n        this.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {\n            source: this, destination: this.destination, scheduler: scheduler\n        }));\n    };\n    DelaySubscriber.prototype.scheduleNotification = function (notification) {\n        if (this.errored === true) {\n            return;\n        }\n        var scheduler = this.scheduler;\n        var message = new DelayMessage(scheduler.now() + this.delay, notification);\n        this.queue.push(message);\n        if (this.active === false) {\n            this._schedule(scheduler);\n        }\n    };\n    DelaySubscriber.prototype._next = function (value) {\n        this.scheduleNotification(Notification.createNext(value));\n    };\n    DelaySubscriber.prototype._error = function (err) {\n        this.errored = true;\n        this.queue = [];\n        this.destination.error(err);\n    };\n    DelaySubscriber.prototype._complete = function () {\n        this.scheduleNotification(Notification.createComplete());\n    };\n    return DelaySubscriber;\n}(Subscriber));\nvar DelayMessage = /*@__PURE__*/ (function () {\n    function DelayMessage(time, notification) {\n        this.time = time;\n        this.notification = notification;\n    }\n    return DelayMessage;\n}());\n//# sourceMappingURL=delay.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_Observable,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nexport function delayWhen(delayDurationSelector, subscriptionDelay) {\n    if (subscriptionDelay) {\n        return function (source) {\n            return new SubscriptionDelayObservable(source, subscriptionDelay)\n                .lift(new DelayWhenOperator(delayDurationSelector));\n        };\n    }\n    return function (source) { return source.lift(new DelayWhenOperator(delayDurationSelector)); };\n}\nvar DelayWhenOperator = /*@__PURE__*/ (function () {\n    function DelayWhenOperator(delayDurationSelector) {\n        this.delayDurationSelector = delayDurationSelector;\n    }\n    DelayWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n    };\n    return DelayWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DelayWhenSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(DelayWhenSubscriber, _super);\n    function DelayWhenSubscriber(destination, delayDurationSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.delayDurationSelector = delayDurationSelector;\n        _this.completed = false;\n        _this.delayNotifierSubscriptions = [];\n        _this.values = [];\n        return _this;\n    }\n    DelayWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(outerValue);\n        this.removeSubscription(innerSub);\n        this.tryComplete();\n    };\n    DelayWhenSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    DelayWhenSubscriber.prototype.notifyComplete = function (innerSub) {\n        var value = this.removeSubscription(innerSub);\n        if (value) {\n            this.destination.next(value);\n        }\n        this.tryComplete();\n    };\n    DelayWhenSubscriber.prototype._next = function (value) {\n        try {\n            var delayNotifier = this.delayDurationSelector(value);\n            if (delayNotifier) {\n                this.tryDelay(delayNotifier, value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    DelayWhenSubscriber.prototype._complete = function () {\n        this.completed = true;\n        this.tryComplete();\n    };\n    DelayWhenSubscriber.prototype.removeSubscription = function (subscription) {\n        subscription.unsubscribe();\n        var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n        var value = null;\n        if (subscriptionIdx !== -1) {\n            value = this.values[subscriptionIdx];\n            this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n            this.values.splice(subscriptionIdx, 1);\n        }\n        return value;\n    };\n    DelayWhenSubscriber.prototype.tryDelay = function (delayNotifier, value) {\n        var notifierSubscription = subscribeToResult(this, delayNotifier, value);\n        if (notifierSubscription && !notifierSubscription.closed) {\n            this.add(notifierSubscription);\n            this.delayNotifierSubscriptions.push(notifierSubscription);\n        }\n        this.values.push(value);\n    };\n    DelayWhenSubscriber.prototype.tryComplete = function () {\n        if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n            this.destination.complete();\n        }\n    };\n    return DelayWhenSubscriber;\n}(OuterSubscriber));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubscriptionDelayObservable = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SubscriptionDelayObservable, _super);\n    function SubscriptionDelayObservable(source, subscriptionDelay) {\n        var _this = _super.call(this) || this;\n        _this.source = source;\n        _this.subscriptionDelay = subscriptionDelay;\n        return _this;\n    }\n    /** @deprecated This is an internal implementation detail, do not use. */\n    SubscriptionDelayObservable.prototype._subscribe = function (subscriber) {\n        this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n    };\n    return SubscriptionDelayObservable;\n}(Observable));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubscriptionDelaySubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SubscriptionDelaySubscriber, _super);\n    function SubscriptionDelaySubscriber(parent, source) {\n        var _this = _super.call(this) || this;\n        _this.parent = parent;\n        _this.source = source;\n        _this.sourceSubscribed = false;\n        return _this;\n    }\n    SubscriptionDelaySubscriber.prototype._next = function (unused) {\n        this.subscribeToSource();\n    };\n    SubscriptionDelaySubscriber.prototype._error = function (err) {\n        this.unsubscribe();\n        this.parent.error(err);\n    };\n    SubscriptionDelaySubscriber.prototype._complete = function () {\n        this.subscribeToSource();\n    };\n    SubscriptionDelaySubscriber.prototype.subscribeToSource = function () {\n        if (!this.sourceSubscribed) {\n            this.sourceSubscribed = true;\n            this.unsubscribe();\n            this.source.subscribe(this.parent);\n        }\n    };\n    return SubscriptionDelaySubscriber;\n}(Subscriber));\n//# sourceMappingURL=delayWhen.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Converts an Observable of {@link Notification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link Notification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * <img src=\"./img/dematerialize.png\" width=\"100%\">\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link Notification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * @example <caption>Convert an Observable of Notifications to an actual Observable</caption>\n * var notifA = new Rx.Notification('N', 'A');\n * var notifB = new Rx.Notification('N', 'B');\n * var notifE = new Rx.Notification('E', void 0,\n *   new TypeError('x.toUpperCase is not a function')\n * );\n * var materialized = Rx.Observable.of(notifA, notifB, notifE);\n * var upperCase = materialized.dematerialize();\n * upperCase.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n *\n * @see {@link Notification}\n * @see {@link materialize}\n *\n * @return {Observable} An Observable that emits items and notifications\n * embedded in Notification objects emitted by the source Observable.\n * @method dematerialize\n * @owner Observable\n */\nexport function dematerialize() {\n    return function dematerializeOperatorFunction(source) {\n        return source.lift(new DeMaterializeOperator());\n    };\n}\nvar DeMaterializeOperator = /*@__PURE__*/ (function () {\n    function DeMaterializeOperator() {\n    }\n    DeMaterializeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DeMaterializeSubscriber(subscriber));\n    };\n    return DeMaterializeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DeMaterializeSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(DeMaterializeSubscriber, _super);\n    function DeMaterializeSubscriber(destination) {\n        return _super.call(this, destination) || this;\n    }\n    DeMaterializeSubscriber.prototype._next = function (value) {\n        value.observe(this.destination);\n    };\n    return DeMaterializeSubscriber;\n}(Subscriber));\n//# sourceMappingURL=dematerialize.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nexport function distinct(keySelector, flushes) {\n    return function (source) { return source.lift(new DistinctOperator(keySelector, flushes)); };\n}\nvar DistinctOperator = /*@__PURE__*/ (function () {\n    function DistinctOperator(keySelector, flushes) {\n        this.keySelector = keySelector;\n        this.flushes = flushes;\n    }\n    DistinctOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n    };\n    return DistinctOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DistinctSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(DistinctSubscriber, _super);\n    function DistinctSubscriber(destination, keySelector, flushes) {\n        var _this = _super.call(this, destination) || this;\n        _this.keySelector = keySelector;\n        _this.values = new Set();\n        if (flushes) {\n            _this.add(subscribeToResult(_this, flushes));\n        }\n        return _this;\n    }\n    DistinctSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values.clear();\n    };\n    DistinctSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    DistinctSubscriber.prototype._next = function (value) {\n        if (this.keySelector) {\n            this._useKeySelector(value);\n        }\n        else {\n            this._finalizeNext(value, value);\n        }\n    };\n    DistinctSubscriber.prototype._useKeySelector = function (value) {\n        var key;\n        var destination = this.destination;\n        try {\n            key = this.keySelector(value);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        this._finalizeNext(key, value);\n    };\n    DistinctSubscriber.prototype._finalizeNext = function (key, value) {\n        var values = this.values;\n        if (!values.has(key)) {\n            values.add(key);\n            this.destination.next(value);\n        }\n    };\n    return DistinctSubscriber;\n}(OuterSubscriber));\nexport { DistinctSubscriber };\n//# sourceMappingURL=distinct.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_util_tryCatch,_util_errorObject PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 1, 2, 3, 3, 4)\n *   .distinctUntilChanged()\n *   .subscribe(x => console.log(x)); // 1, 2, 1, 2, 3, 4\n *\n * @example <caption>An example using a compare function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     { age: 6, name: 'Foo'})\n *     .distinctUntilChanged((p: Person, q: Person) => p.name === q.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n *\n * @see {@link distinct}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinctUntilChanged\n * @owner Observable\n */\nexport function distinctUntilChanged(compare, keySelector) {\n    return function (source) { return source.lift(new DistinctUntilChangedOperator(compare, keySelector)); };\n}\nvar DistinctUntilChangedOperator = /*@__PURE__*/ (function () {\n    function DistinctUntilChangedOperator(compare, keySelector) {\n        this.compare = compare;\n        this.keySelector = keySelector;\n    }\n    DistinctUntilChangedOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n    };\n    return DistinctUntilChangedOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DistinctUntilChangedSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(DistinctUntilChangedSubscriber, _super);\n    function DistinctUntilChangedSubscriber(destination, compare, keySelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.keySelector = keySelector;\n        _this.hasKey = false;\n        if (typeof compare === 'function') {\n            _this.compare = compare;\n        }\n        return _this;\n    }\n    DistinctUntilChangedSubscriber.prototype.compare = function (x, y) {\n        return x === y;\n    };\n    DistinctUntilChangedSubscriber.prototype._next = function (value) {\n        var keySelector = this.keySelector;\n        var key = value;\n        if (keySelector) {\n            key = tryCatch(this.keySelector)(value);\n            if (key === errorObject) {\n                return this.destination.error(errorObject.e);\n            }\n        }\n        var result = false;\n        if (this.hasKey) {\n            result = tryCatch(this.compare)(this.key, key);\n            if (result === errorObject) {\n                return this.destination.error(errorObject.e);\n            }\n        }\n        else {\n            this.hasKey = true;\n        }\n        if (Boolean(result) === false) {\n            this.key = key;\n            this.destination.next(value);\n        }\n    };\n    return DistinctUntilChangedSubscriber;\n}(Subscriber));\n//# sourceMappingURL=distinctUntilChanged.js.map\n","/** PURE_IMPORTS_START tslib PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\n/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nvar ArgumentOutOfRangeError = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ArgumentOutOfRangeError, _super);\n    function ArgumentOutOfRangeError() {\n        var _this = _super.call(this, 'argument out of range') || this;\n        _this.name = 'ArgumentOutOfRangeError';\n        Object.setPrototypeOf(_this, ArgumentOutOfRangeError.prototype);\n        return _this;\n    }\n    return ArgumentOutOfRangeError;\n}(Error));\nexport { ArgumentOutOfRangeError };\n//# sourceMappingURL=ArgumentOutOfRangeError.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/* tslint:enable:max-line-length */\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter(predicate, thisArg) {\n    return function filterOperatorFunction(source) {\n        return source.lift(new FilterOperator(predicate, thisArg));\n    };\n}\nvar FilterOperator = /*@__PURE__*/ (function () {\n    function FilterOperator(predicate, thisArg) {\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n    }\n    FilterOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n    };\n    return FilterOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FilterSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(FilterSubscriber, _super);\n    function FilterSubscriber(destination, predicate, thisArg) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.thisArg = thisArg;\n        _this.count = 0;\n        return _this;\n    }\n    // the try catch block below is left specifically for\n    // optimization and perf reasons. a tryCatcher is not necessary here.\n    FilterSubscriber.prototype._next = function (value) {\n        var result;\n        try {\n            result = this.predicate.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this.destination.next(value);\n        }\n    };\n    return FilterSubscriber;\n}(Subscriber));\n//# sourceMappingURL=filter.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_util_noop,_util_isFunction PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { noop } from '../util/noop';\nimport { isFunction } from '../util/isFunction';\n/* tslint:enable:max-line-length */\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\nexport function tap(nextOrObserver, error, complete) {\n    return function tapOperatorFunction(source) {\n        return source.lift(new DoOperator(nextOrObserver, error, complete));\n    };\n}\nvar DoOperator = /*@__PURE__*/ (function () {\n    function DoOperator(nextOrObserver, error, complete) {\n        this.nextOrObserver = nextOrObserver;\n        this.error = error;\n        this.complete = complete;\n    }\n    DoOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TapSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n    };\n    return DoOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TapSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(TapSubscriber, _super);\n    function TapSubscriber(destination, observerOrNext, error, complete) {\n        var _this = _super.call(this, destination) || this;\n        _this._tapNext = noop;\n        _this._tapError = noop;\n        _this._tapComplete = noop;\n        _this._tapError = error || noop;\n        _this._tapComplete = complete || noop;\n        if (isFunction(observerOrNext)) {\n            _this._context = _this;\n            _this._tapNext = observerOrNext;\n        }\n        else if (observerOrNext) {\n            _this._context = observerOrNext;\n            _this._tapNext = observerOrNext.next || noop;\n            _this._tapError = observerOrNext.error || noop;\n            _this._tapComplete = observerOrNext.complete || noop;\n        }\n        return _this;\n    }\n    TapSubscriber.prototype._next = function (value) {\n        try {\n            this._tapNext.call(this._context, value);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(value);\n    };\n    TapSubscriber.prototype._error = function (err) {\n        try {\n            this._tapError.call(this._context, err);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.error(err);\n    };\n    TapSubscriber.prototype._complete = function () {\n        try {\n            this._tapComplete.call(this._context);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        return this.destination.complete();\n    };\n    return TapSubscriber;\n}(Subscriber));\n//# sourceMappingURL=tap.js.map\n","/** PURE_IMPORTS_START tslib PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\n/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nvar EmptyError = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(EmptyError, _super);\n    function EmptyError() {\n        var _this = _super.call(this, 'no elements in sequence') || this;\n        _this.name = 'EmptyError';\n        Object.setPrototypeOf(_this, EmptyError.prototype);\n        return _this;\n    }\n    return EmptyError;\n}(Error));\nexport { EmptyError };\n//# sourceMappingURL=EmptyError.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError,_observable_empty PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take(count) {\n    return function (source) {\n        if (count === 0) {\n            return empty();\n        }\n        else {\n            return source.lift(new TakeOperator(count));\n        }\n    };\n}\nvar TakeOperator = /*@__PURE__*/ (function () {\n    function TakeOperator(total) {\n        this.total = total;\n        if (this.total < 0) {\n            throw new ArgumentOutOfRangeError;\n        }\n    }\n    TakeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeSubscriber(subscriber, this.total));\n    };\n    return TakeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(TakeSubscriber, _super);\n    function TakeSubscriber(destination, total) {\n        var _this = _super.call(this, destination) || this;\n        _this.total = total;\n        _this.count = 0;\n        return _this;\n    }\n    TakeSubscriber.prototype._next = function (value) {\n        var total = this.total;\n        var count = ++this.count;\n        if (count <= total) {\n            this.destination.next(value);\n            if (count === total) {\n                this.destination.complete();\n                this.unsubscribe();\n            }\n        }\n    };\n    return TakeSubscriber;\n}(Subscriber));\n//# sourceMappingURL=take.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * @example <caption>A simple example emitting true if all elements are less than 5, false otherwise</caption>\n *  Observable.of(1, 2, 3, 4, 5, 6)\n *     .every(x => x < 5)\n *     .subscribe(x => console.log(x)); // -> false\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return {Observable} An Observable of booleans that determines if all items of the source Observable meet the condition specified.\n * @method every\n * @owner Observable\n */\nexport function every(predicate, thisArg) {\n    return function (source) { return source.lift(new EveryOperator(predicate, thisArg, source)); };\n}\nvar EveryOperator = /*@__PURE__*/ (function () {\n    function EveryOperator(predicate, thisArg, source) {\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.source = source;\n    }\n    EveryOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n    };\n    return EveryOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar EverySubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(EverySubscriber, _super);\n    function EverySubscriber(destination, predicate, thisArg, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.thisArg = thisArg;\n        _this.source = source;\n        _this.index = 0;\n        _this.thisArg = thisArg || _this;\n        return _this;\n    }\n    EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {\n        this.destination.next(everyValueMatch);\n        this.destination.complete();\n    };\n    EverySubscriber.prototype._next = function (value) {\n        var result = false;\n        try {\n            result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (!result) {\n            this.notifyComplete(false);\n        }\n    };\n    EverySubscriber.prototype._complete = function () {\n        this.notifyComplete(true);\n    };\n    return EverySubscriber;\n}(Subscriber));\n//# sourceMappingURL=every.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * <img src=\"./img/exhaust.png\" width=\"100%\">\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(5));\n * var result = higherOrder.exhaust();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link switch}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable that takes a source of Observables and propagates the first observable\n * exclusively until it completes before subscribing to the next.\n * @method exhaust\n * @owner Observable\n */\nexport function exhaust() {\n    return function (source) { return source.lift(new SwitchFirstOperator()); };\n}\nvar SwitchFirstOperator = /*@__PURE__*/ (function () {\n    function SwitchFirstOperator() {\n    }\n    SwitchFirstOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SwitchFirstSubscriber(subscriber));\n    };\n    return SwitchFirstOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchFirstSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SwitchFirstSubscriber, _super);\n    function SwitchFirstSubscriber(destination) {\n        var _this = _super.call(this, destination) || this;\n        _this.hasCompleted = false;\n        _this.hasSubscription = false;\n        return _this;\n    }\n    SwitchFirstSubscriber.prototype._next = function (value) {\n        if (!this.hasSubscription) {\n            this.hasSubscription = true;\n            this.add(subscribeToResult(this, value));\n        }\n    };\n    SwitchFirstSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (!this.hasSubscription) {\n            this.destination.complete();\n        }\n    };\n    SwitchFirstSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.hasSubscription = false;\n        if (this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return SwitchFirstSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=exhaust.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult,_map,_observable_from PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { map } from './map';\nimport { from } from '../observable/from';\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * <img src=\"./img/exhaustMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * @example <caption>Run a finite timer for each click, only if there is no currently active timer</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.exhaustMap((ev) => Rx.Observable.interval(1000).take(5));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @return {Observable} An Observable containing projected Observables\n * of each item of the source, ignoring projected Observables that start before\n * their preceding Observable has completed.\n * @method exhaustMap\n * @owner Observable\n */\nexport function exhaustMap(project, resultSelector) {\n    if (resultSelector) {\n        // DEPRECATED PATH\n        return function (source) { return source.pipe(exhaustMap(function (a, i) { return from(project(a, i)).pipe(map(function (b, ii) { return resultSelector(a, b, i, ii); })); })); };\n    }\n    return function (source) {\n        return source.lift(new ExhauseMapOperator(project));\n    };\n}\nvar ExhauseMapOperator = /*@__PURE__*/ (function () {\n    function ExhauseMapOperator(project) {\n        this.project = project;\n    }\n    ExhauseMapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ExhaustMapSubscriber(subscriber, this.project));\n    };\n    return ExhauseMapOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ExhaustMapSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ExhaustMapSubscriber, _super);\n    function ExhaustMapSubscriber(destination, project) {\n        var _this = _super.call(this, destination) || this;\n        _this.project = project;\n        _this.hasSubscription = false;\n        _this.hasCompleted = false;\n        _this.index = 0;\n        return _this;\n    }\n    ExhaustMapSubscriber.prototype._next = function (value) {\n        if (!this.hasSubscription) {\n            this.tryNext(value);\n        }\n    };\n    ExhaustMapSubscriber.prototype.tryNext = function (value) {\n        var index = this.index++;\n        var destination = this.destination;\n        try {\n            var result = this.project(value, index);\n            this.hasSubscription = true;\n            this.add(subscribeToResult(this, result, value, index));\n        }\n        catch (err) {\n            destination.error(err);\n        }\n    };\n    ExhaustMapSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (!this.hasSubscription) {\n            this.destination.complete();\n        }\n    };\n    ExhaustMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    };\n    ExhaustMapSubscriber.prototype.notifyError = function (err) {\n        this.destination.error(err);\n    };\n    ExhaustMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.hasSubscription = false;\n        if (this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return ExhaustMapSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=exhaustMap.js.map\n","/** PURE_IMPORTS_START tslib,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/* tslint:enable:max-line-length */\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * <img src=\"./img/expand.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * @example <caption>Start emitting the powers of two on every click, at most 10 of them</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var powersOfTwo = clicks\n *   .mapTo(1)\n *   .expand(x => Rx.Observable.of(2 * x).delay(1000))\n *   .take(10);\n * powersOfTwo.subscribe(x => console.log(x));\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each projected inner Observable.\n * @return {Observable} An Observable that emits the source values and also\n * result of applying the projection function to each value emitted on the\n * output Observable and and merging the results of the Observables obtained\n * from this transformation.\n * @method expand\n * @owner Observable\n */\nexport function expand(project, concurrent, scheduler) {\n    if (concurrent === void 0) {\n        concurrent = Number.POSITIVE_INFINITY;\n    }\n    if (scheduler === void 0) {\n        scheduler = undefined;\n    }\n    concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;\n    return function (source) { return source.lift(new ExpandOperator(project, concurrent, scheduler)); };\n}\nvar ExpandOperator = /*@__PURE__*/ (function () {\n    function ExpandOperator(project, concurrent, scheduler) {\n        this.project = project;\n        this.concurrent = concurrent;\n        this.scheduler = scheduler;\n    }\n    ExpandOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));\n    };\n    return ExpandOperator;\n}());\nexport { ExpandOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ExpandSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ExpandSubscriber, _super);\n    function ExpandSubscriber(destination, project, concurrent, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.project = project;\n        _this.concurrent = concurrent;\n        _this.scheduler = scheduler;\n        _this.index = 0;\n        _this.active = 0;\n        _this.hasCompleted = false;\n        if (concurrent < Number.POSITIVE_INFINITY) {\n            _this.buffer = [];\n        }\n        return _this;\n    }\n    ExpandSubscriber.dispatch = function (arg) {\n        var subscriber = arg.subscriber, result = arg.result, value = arg.value, index = arg.index;\n        subscriber.subscribeToProjection(result, value, index);\n    };\n    ExpandSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        if (destination.closed) {\n            this._complete();\n            return;\n        }\n        var index = this.index++;\n        if (this.active < this.concurrent) {\n            destination.next(value);\n            var result = tryCatch(this.project)(value, index);\n            if (result === errorObject) {\n                destination.error(errorObject.e);\n            }\n            else if (!this.scheduler) {\n                this.subscribeToProjection(result, value, index);\n            }\n            else {\n                var state = { subscriber: this, result: result, value: value, index: index };\n                this.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));\n            }\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    ExpandSubscriber.prototype.subscribeToProjection = function (result, value, index) {\n        this.active++;\n        this.add(subscribeToResult(this, result, value, index));\n    };\n    ExpandSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.hasCompleted && this.active === 0) {\n            this.destination.complete();\n        }\n    };\n    ExpandSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this._next(innerValue);\n    };\n    ExpandSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer && buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        if (this.hasCompleted && this.active === 0) {\n            this.destination.complete();\n        }\n    };\n    return ExpandSubscriber;\n}(OuterSubscriber));\nexport { ExpandSubscriber };\n//# sourceMappingURL=expand.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_Subscription PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * @param {function} callback Function to be called when source terminates.\n * @return {Observable} An Observable that mirrors the source, but will call the specified function on termination.\n * @method finally\n * @owner Observable\n */\nexport function finalize(callback) {\n    return function (source) { return source.lift(new FinallyOperator(callback)); };\n}\nvar FinallyOperator = /*@__PURE__*/ (function () {\n    function FinallyOperator(callback) {\n        this.callback = callback;\n    }\n    FinallyOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new FinallySubscriber(subscriber, this.callback));\n    };\n    return FinallyOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FinallySubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(FinallySubscriber, _super);\n    function FinallySubscriber(destination, callback) {\n        var _this = _super.call(this, destination) || this;\n        _this.add(new Subscription(callback));\n        return _this;\n    }\n    return FinallySubscriber;\n}(Subscriber));\n//# sourceMappingURL=finalize.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * <img src=\"./img/find.png\" width=\"100%\">\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * @example <caption>Find and emit the first click that happens on a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.find(ev => ev.target.tagName === 'DIV');\n * result.subscribe(x => console.log(x));\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable<T>} An Observable of the first item that matches the\n * condition.\n * @method find\n * @owner Observable\n */\nexport function find(predicate, thisArg) {\n    if (typeof predicate !== 'function') {\n        throw new TypeError('predicate is not a function');\n    }\n    return function (source) { return source.lift(new FindValueOperator(predicate, source, false, thisArg)); };\n}\nvar FindValueOperator = /*@__PURE__*/ (function () {\n    function FindValueOperator(predicate, source, yieldIndex, thisArg) {\n        this.predicate = predicate;\n        this.source = source;\n        this.yieldIndex = yieldIndex;\n        this.thisArg = thisArg;\n    }\n    FindValueOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n    };\n    return FindValueOperator;\n}());\nexport { FindValueOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FindValueSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(FindValueSubscriber, _super);\n    function FindValueSubscriber(destination, predicate, source, yieldIndex, thisArg) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.source = source;\n        _this.yieldIndex = yieldIndex;\n        _this.thisArg = thisArg;\n        _this.index = 0;\n        return _this;\n    }\n    FindValueSubscriber.prototype.notifyComplete = function (value) {\n        var destination = this.destination;\n        destination.next(value);\n        destination.complete();\n    };\n    FindValueSubscriber.prototype._next = function (value) {\n        var _a = this, predicate = _a.predicate, thisArg = _a.thisArg;\n        var index = this.index++;\n        try {\n            var result = predicate.call(thisArg || this, value, index, this.source);\n            if (result) {\n                this.notifyComplete(this.yieldIndex ? index : value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    FindValueSubscriber.prototype._complete = function () {\n        this.notifyComplete(this.yieldIndex ? -1 : undefined);\n    };\n    return FindValueSubscriber;\n}(Subscriber));\nexport { FindValueSubscriber };\n//# sourceMappingURL=find.js.map\n","/** PURE_IMPORTS_START tslib PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\n/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nvar ObjectUnsubscribedError = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ObjectUnsubscribedError, _super);\n    function ObjectUnsubscribedError() {\n        var _this = _super.call(this, 'object unsubscribed') || this;\n        _this.name = 'ObjectUnsubscribedError';\n        Object.setPrototypeOf(_this, ObjectUnsubscribedError.prototype);\n        return _this;\n    }\n    return ObjectUnsubscribedError;\n}(Error));\nexport { ObjectUnsubscribedError };\n//# sourceMappingURL=ObjectUnsubscribedError.js.map\n","/** PURE_IMPORTS_START tslib,_Subscription PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscription } from './Subscription';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubjectSubscription = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SubjectSubscription, _super);\n    function SubjectSubscription(subject, subscriber) {\n        var _this = _super.call(this) || this;\n        _this.subject = subject;\n        _this.subscriber = subscriber;\n        _this.closed = false;\n        return _this;\n    }\n    SubjectSubscription.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.closed = true;\n        var subject = this.subject;\n        var observers = subject.observers;\n        this.subject = null;\n        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n            return;\n        }\n        var subscriberIndex = observers.indexOf(this.subscriber);\n        if (subscriberIndex !== -1) {\n            observers.splice(subscriberIndex, 1);\n        }\n    };\n    return SubjectSubscription;\n}(Subscription));\nexport { SubjectSubscription };\n//# sourceMappingURL=SubjectSubscription.js.map\n","/** PURE_IMPORTS_START tslib,_Observable,_Subscriber,_Subscription,_util_ObjectUnsubscribedError,_SubjectSubscription,_internal_symbol_rxSubscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\n/**\n * @class SubjectSubscriber<T>\n */\nvar SubjectSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SubjectSubscriber, _super);\n    function SubjectSubscriber(destination) {\n        var _this = _super.call(this, destination) || this;\n        _this.destination = destination;\n        return _this;\n    }\n    return SubjectSubscriber;\n}(Subscriber));\nexport { SubjectSubscriber };\n/**\n * @class Subject<T>\n */\nvar Subject = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(Subject, _super);\n    function Subject() {\n        var _this = _super.call(this) || this;\n        _this.observers = [];\n        _this.closed = false;\n        _this.isStopped = false;\n        _this.hasError = false;\n        _this.thrownError = null;\n        return _this;\n    }\n    Subject.prototype[rxSubscriberSymbol] = function () {\n        return new SubjectSubscriber(this);\n    };\n    Subject.prototype.lift = function (operator) {\n        var subject = new AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n    };\n    Subject.prototype.next = function (value) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        if (!this.isStopped) {\n            var observers = this.observers;\n            var len = observers.length;\n            var copy = observers.slice();\n            for (var i = 0; i < len; i++) {\n                copy[i].next(value);\n            }\n        }\n    };\n    Subject.prototype.error = function (err) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        this.hasError = true;\n        this.thrownError = err;\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].error(err);\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.complete = function () {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].complete();\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.unsubscribe = function () {\n        this.isStopped = true;\n        this.closed = true;\n        this.observers = null;\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    Subject.prototype._trySubscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else {\n            return _super.prototype._trySubscribe.call(this, subscriber);\n        }\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    Subject.prototype._subscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription.EMPTY;\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n            return Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            return new SubjectSubscription(this, subscriber);\n        }\n    };\n    Subject.prototype.asObservable = function () {\n        var observable = new Observable();\n        observable.source = this;\n        return observable;\n    };\n    /**@nocollapse */\n    Subject.create = function (destination, source) {\n        return new AnonymousSubject(destination, source);\n    };\n    return Subject;\n}(Observable));\nexport { Subject };\n/**\n * @class AnonymousSubject<T>\n */\nvar AnonymousSubject = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(AnonymousSubject, _super);\n    function AnonymousSubject(destination, source) {\n        var _this = _super.call(this) || this;\n        _this.destination = destination;\n        _this.source = source;\n        return _this;\n    }\n    AnonymousSubject.prototype.next = function (value) {\n        var destination = this.destination;\n        if (destination && destination.next) {\n            destination.next(value);\n        }\n    };\n    AnonymousSubject.prototype.error = function (err) {\n        var destination = this.destination;\n        if (destination && destination.error) {\n            this.destination.error(err);\n        }\n    };\n    AnonymousSubject.prototype.complete = function () {\n        var destination = this.destination;\n        if (destination && destination.complete) {\n            this.destination.complete();\n        }\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    AnonymousSubject.prototype._subscribe = function (subscriber) {\n        var source = this.source;\n        if (source) {\n            return this.source.subscribe(subscriber);\n        }\n        else {\n            return Subscription.EMPTY;\n        }\n    };\n    return AnonymousSubject;\n}(Subject));\nexport { AnonymousSubject };\n//# sourceMappingURL=Subject.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_Subscription,_Observable,_Subject PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\n/* tslint:enable:max-line-length */\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * <img src=\"./img/groupBy.png\" width=\"100%\">\n *\n * @example <caption>Group objects by id and return as array</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs3'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *     )\n *     .groupBy(p => p.id)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], []))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'aze1' },\n * //   { id: 1, name: 'erg1' },\n * //   { id: 1, name: 'df1' } ]\n * //\n * // [ { id: 2, name: 'sf2' },\n * //   { id: 2, name: 'dg2' },\n * //   { id: 2, name: 'sfqfb2' },\n * //   { id: 2, name: 'qsgqsfg2' } ]\n * //\n * // [ { id: 3, name: 'qfs3' } ]\n *\n * @example <caption>Pivot data on the id field</caption>\n * Observable.of<Obj>({id: 1, name: 'aze1'},\n *                    {id: 2, name: 'sf2'},\n *                    {id: 2, name: 'dg2'},\n *                    {id: 1, name: 'erg1'},\n *                    {id: 1, name: 'df1'},\n *                    {id: 2, name: 'sfqfb2'},\n *                    {id: 3, name: 'qfs1'},\n *                    {id: 2, name: 'qsgqsfg2'}\n *                   )\n *     .groupBy(p => p.id, p => p.name)\n *     .flatMap( (group$) => group$.reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))\n *     .map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)}))\n *     .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'aze1', 'erg1', 'df1' ] }\n * // { id: 2, values: [ 'sf2', 'dg2', 'sfqfb2', 'qsgqsfg2' ] }\n * // { id: 3, values: [ 'qfs1' ] }\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {\n    return function (source) {\n        return source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n    };\n}\nvar GroupByOperator = /*@__PURE__*/ (function () {\n    function GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector) {\n        this.keySelector = keySelector;\n        this.elementSelector = elementSelector;\n        this.durationSelector = durationSelector;\n        this.subjectSelector = subjectSelector;\n    }\n    GroupByOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));\n    };\n    return GroupByOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar GroupBySubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(GroupBySubscriber, _super);\n    function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.keySelector = keySelector;\n        _this.elementSelector = elementSelector;\n        _this.durationSelector = durationSelector;\n        _this.subjectSelector = subjectSelector;\n        _this.groups = null;\n        _this.attemptedToUnsubscribe = false;\n        _this.count = 0;\n        return _this;\n    }\n    GroupBySubscriber.prototype._next = function (value) {\n        var key;\n        try {\n            key = this.keySelector(value);\n        }\n        catch (err) {\n            this.error(err);\n            return;\n        }\n        this._group(value, key);\n    };\n    GroupBySubscriber.prototype._group = function (value, key) {\n        var groups = this.groups;\n        if (!groups) {\n            groups = this.groups = new Map();\n        }\n        var group = groups.get(key);\n        var element;\n        if (this.elementSelector) {\n            try {\n                element = this.elementSelector(value);\n            }\n            catch (err) {\n                this.error(err);\n            }\n        }\n        else {\n            element = value;\n        }\n        if (!group) {\n            group = (this.subjectSelector ? this.subjectSelector() : new Subject());\n            groups.set(key, group);\n            var groupedObservable = new GroupedObservable(key, group, this);\n            this.destination.next(groupedObservable);\n            if (this.durationSelector) {\n                var duration = void 0;\n                try {\n                    duration = this.durationSelector(new GroupedObservable(key, group));\n                }\n                catch (err) {\n                    this.error(err);\n                    return;\n                }\n                this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n            }\n        }\n        if (!group.closed) {\n            group.next(element);\n        }\n    };\n    GroupBySubscriber.prototype._error = function (err) {\n        var groups = this.groups;\n        if (groups) {\n            groups.forEach(function (group, key) {\n                group.error(err);\n            });\n            groups.clear();\n        }\n        this.destination.error(err);\n    };\n    GroupBySubscriber.prototype._complete = function () {\n        var groups = this.groups;\n        if (groups) {\n            groups.forEach(function (group, key) {\n                group.complete();\n            });\n            groups.clear();\n        }\n        this.destination.complete();\n    };\n    GroupBySubscriber.prototype.removeGroup = function (key) {\n        this.groups.delete(key);\n    };\n    GroupBySubscriber.prototype.unsubscribe = function () {\n        if (!this.closed) {\n            this.attemptedToUnsubscribe = true;\n            if (this.count === 0) {\n                _super.prototype.unsubscribe.call(this);\n            }\n        }\n    };\n    return GroupBySubscriber;\n}(Subscriber));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar GroupDurationSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(GroupDurationSubscriber, _super);\n    function GroupDurationSubscriber(key, group, parent) {\n        var _this = _super.call(this, group) || this;\n        _this.key = key;\n        _this.group = group;\n        _this.parent = parent;\n        return _this;\n    }\n    GroupDurationSubscriber.prototype._next = function (value) {\n        this.complete();\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    GroupDurationSubscriber.prototype._unsubscribe = function () {\n        var _a = this, parent = _a.parent, key = _a.key;\n        this.key = this.parent = null;\n        if (parent) {\n            parent.removeGroup(key);\n        }\n    };\n    return GroupDurationSubscriber;\n}(Subscriber));\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nvar GroupedObservable = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(GroupedObservable, _super);\n    /** @deprecated Do not construct this type. Internal use only */\n    function GroupedObservable(key, groupSubject, refCountSubscription) {\n        var _this = _super.call(this) || this;\n        _this.key = key;\n        _this.groupSubject = groupSubject;\n        _this.refCountSubscription = refCountSubscription;\n        return _this;\n    }\n    /** @deprecated This is an internal implementation detail, do not use. */\n    GroupedObservable.prototype._subscribe = function (subscriber) {\n        var subscription = new Subscription();\n        var _a = this, refCountSubscription = _a.refCountSubscription, groupSubject = _a.groupSubject;\n        if (refCountSubscription && !refCountSubscription.closed) {\n            subscription.add(new InnerRefCountSubscription(refCountSubscription));\n        }\n        subscription.add(groupSubject.subscribe(subscriber));\n        return subscription;\n    };\n    return GroupedObservable;\n}(Observable));\nexport { GroupedObservable };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar InnerRefCountSubscription = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(InnerRefCountSubscription, _super);\n    function InnerRefCountSubscription(parent) {\n        var _this = _super.call(this) || this;\n        _this.parent = parent;\n        parent.count++;\n        return _this;\n    }\n    InnerRefCountSubscription.prototype.unsubscribe = function () {\n        var parent = this.parent;\n        if (!parent.closed && !this.closed) {\n            _super.prototype.unsubscribe.call(this);\n            parent.count -= 1;\n            if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n                parent.unsubscribe();\n            }\n        }\n    };\n    return InnerRefCountSubscription;\n}(Subscription));\n//# sourceMappingURL=groupBy.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * <img src=\"./img/ignoreElements.png\" width=\"100%\">\n *\n * @return {Observable} An empty Observable that only calls `complete`\n * or `error`, based on which one is called by the source Observable.\n * @method ignoreElements\n * @owner Observable\n */\nexport function ignoreElements() {\n    return function ignoreElementsOperatorFunction(source) {\n        return source.lift(new IgnoreElementsOperator());\n    };\n}\nvar IgnoreElementsOperator = /*@__PURE__*/ (function () {\n    function IgnoreElementsOperator() {\n    }\n    IgnoreElementsOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new IgnoreElementsSubscriber(subscriber));\n    };\n    return IgnoreElementsOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar IgnoreElementsSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(IgnoreElementsSubscriber, _super);\n    function IgnoreElementsSubscriber() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    IgnoreElementsSubscriber.prototype._next = function (unused) {\n        // Do nothing\n    };\n    return IgnoreElementsSubscriber;\n}(Subscriber));\n//# sourceMappingURL=ignoreElements.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function isEmpty() {\n    return function (source) { return source.lift(new IsEmptyOperator()); };\n}\nvar IsEmptyOperator = /*@__PURE__*/ (function () {\n    function IsEmptyOperator() {\n    }\n    IsEmptyOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new IsEmptySubscriber(observer));\n    };\n    return IsEmptyOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar IsEmptySubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(IsEmptySubscriber, _super);\n    function IsEmptySubscriber(destination) {\n        return _super.call(this, destination) || this;\n    }\n    IsEmptySubscriber.prototype.notifyComplete = function (isEmpty) {\n        var destination = this.destination;\n        destination.next(isEmpty);\n        destination.complete();\n    };\n    IsEmptySubscriber.prototype._next = function (value) {\n        this.notifyComplete(false);\n    };\n    IsEmptySubscriber.prototype._complete = function () {\n        this.notifyComplete(true);\n    };\n    return IsEmptySubscriber;\n}(Subscriber));\n//# sourceMappingURL=isEmpty.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError,_observable_empty PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.pipe(takeLast(3));\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nexport function takeLast(count) {\n    return function takeLastOperatorFunction(source) {\n        if (count === 0) {\n            return empty();\n        }\n        else {\n            return source.lift(new TakeLastOperator(count));\n        }\n    };\n}\nvar TakeLastOperator = /*@__PURE__*/ (function () {\n    function TakeLastOperator(total) {\n        this.total = total;\n        if (this.total < 0) {\n            throw new ArgumentOutOfRangeError;\n        }\n    }\n    TakeLastOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n    };\n    return TakeLastOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeLastSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(TakeLastSubscriber, _super);\n    function TakeLastSubscriber(destination, total) {\n        var _this = _super.call(this, destination) || this;\n        _this.total = total;\n        _this.ring = new Array();\n        _this.count = 0;\n        return _this;\n    }\n    TakeLastSubscriber.prototype._next = function (value) {\n        var ring = this.ring;\n        var total = this.total;\n        var count = this.count++;\n        if (ring.length < total) {\n            ring.push(value);\n        }\n        else {\n            var index = count % total;\n            ring[index] = value;\n        }\n    };\n    TakeLastSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        var count = this.count;\n        if (count > 0) {\n            var total = this.count >= this.total ? this.total : this.count;\n            var ring = this.ring;\n            for (var i = 0; i < total; i++) {\n                var idx = (count++) % total;\n                destination.next(ring[idx]);\n            }\n        }\n        destination.complete();\n    };\n    return TakeLastSubscriber;\n}(Subscriber));\n//# sourceMappingURL=takeLast.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo(value) {\n    return function (source) { return source.lift(new MapToOperator(value)); };\n}\nvar MapToOperator = /*@__PURE__*/ (function () {\n    function MapToOperator(value) {\n        this.value = value;\n    }\n    MapToOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MapToSubscriber(subscriber, this.value));\n    };\n    return MapToOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MapToSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MapToSubscriber, _super);\n    function MapToSubscriber(destination, value) {\n        var _this = _super.call(this, destination) || this;\n        _this.value = value;\n        return _this;\n    }\n    MapToSubscriber.prototype._next = function (x) {\n        this.destination.next(this.value);\n    };\n    return MapToSubscriber;\n}(Subscriber));\n//# sourceMappingURL=mapTo.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_Notification PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * <img src=\"./img/materialize.png\" width=\"100%\">\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * @example <caption>Convert a faulty Observable to an Observable of Notifications</caption>\n * var letters = Rx.Observable.of('a', 'b', 13, 'd');\n * var upperCase = letters.map(x => x.toUpperCase());\n * var materialized = upperCase.materialize();\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return {Observable<Notification<T>>} An Observable that emits\n * {@link Notification} objects that wrap the original emissions from the source\n * Observable with metadata.\n * @method materialize\n * @owner Observable\n */\nexport function materialize() {\n    return function materializeOperatorFunction(source) {\n        return source.lift(new MaterializeOperator());\n    };\n}\nvar MaterializeOperator = /*@__PURE__*/ (function () {\n    function MaterializeOperator() {\n    }\n    MaterializeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MaterializeSubscriber(subscriber));\n    };\n    return MaterializeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MaterializeSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MaterializeSubscriber, _super);\n    function MaterializeSubscriber(destination) {\n        return _super.call(this, destination) || this;\n    }\n    MaterializeSubscriber.prototype._next = function (value) {\n        this.destination.next(Notification.createNext(value));\n    };\n    MaterializeSubscriber.prototype._error = function (err) {\n        var destination = this.destination;\n        destination.next(Notification.createError(err));\n        destination.complete();\n    };\n    MaterializeSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        destination.next(Notification.createComplete());\n        destination.complete();\n    };\n    return MaterializeSubscriber;\n}(Subscriber));\n//# sourceMappingURL=materialize.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/* tslint:enable:max-line-length */\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nexport function scan(accumulator, seed) {\n    var hasSeed = false;\n    // providing a seed of `undefined` *should* be valid and trigger\n    // hasSeed! so don't use `seed !== undefined` checks!\n    // For this reason, we have to check it here at the original call site\n    // otherwise inside Operator/Subscriber we won't know if `undefined`\n    // means they didn't provide anything or if they literally provided `undefined`\n    if (arguments.length >= 2) {\n        hasSeed = true;\n    }\n    return function scanOperatorFunction(source) {\n        return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n    };\n}\nvar ScanOperator = /*@__PURE__*/ (function () {\n    function ScanOperator(accumulator, seed, hasSeed) {\n        if (hasSeed === void 0) {\n            hasSeed = false;\n        }\n        this.accumulator = accumulator;\n        this.seed = seed;\n        this.hasSeed = hasSeed;\n    }\n    ScanOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n    };\n    return ScanOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ScanSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ScanSubscriber, _super);\n    function ScanSubscriber(destination, accumulator, _seed, hasSeed) {\n        var _this = _super.call(this, destination) || this;\n        _this.accumulator = accumulator;\n        _this._seed = _seed;\n        _this.hasSeed = hasSeed;\n        _this.index = 0;\n        return _this;\n    }\n    Object.defineProperty(ScanSubscriber.prototype, \"seed\", {\n        get: function () {\n            return this._seed;\n        },\n        set: function (value) {\n            this.hasSeed = true;\n            this._seed = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ScanSubscriber.prototype._next = function (value) {\n        if (!this.hasSeed) {\n            this.seed = value;\n            this.destination.next(value);\n        }\n        else {\n            return this._tryNext(value);\n        }\n    };\n    ScanSubscriber.prototype._tryNext = function (value) {\n        var index = this.index++;\n        var result;\n        try {\n            result = this.accumulator(this.seed, value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n        this.seed = result;\n        this.destination.next(result);\n    };\n    return ScanSubscriber;\n}(Subscriber));\n//# sourceMappingURL=scan.js.map\n","/** PURE_IMPORTS_START tslib,_util_tryCatch,_util_errorObject,_util_subscribeToResult,_OuterSubscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * @example <caption>Count the number of click events</caption>\n * const click$ = Rx.Observable.fromEvent(document, 'click');\n * const one$ = click$.mapTo(1);\n * const seed = 0;\n * const count$ = one$.mergeScan((acc, one) => Rx.Observable.of(acc + one), seed);\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * 1\n * 2\n * 3\n * 4\n * // ...and so on for each click\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method mergeScan\n * @owner Observable\n */\nexport function mergeScan(accumulator, seed, concurrent) {\n    if (concurrent === void 0) {\n        concurrent = Number.POSITIVE_INFINITY;\n    }\n    return function (source) { return source.lift(new MergeScanOperator(accumulator, seed, concurrent)); };\n}\nvar MergeScanOperator = /*@__PURE__*/ (function () {\n    function MergeScanOperator(accumulator, seed, concurrent) {\n        this.accumulator = accumulator;\n        this.seed = seed;\n        this.concurrent = concurrent;\n    }\n    MergeScanOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));\n    };\n    return MergeScanOperator;\n}());\nexport { MergeScanOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MergeScanSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MergeScanSubscriber, _super);\n    function MergeScanSubscriber(destination, accumulator, acc, concurrent) {\n        var _this = _super.call(this, destination) || this;\n        _this.accumulator = accumulator;\n        _this.acc = acc;\n        _this.concurrent = concurrent;\n        _this.hasValue = false;\n        _this.hasCompleted = false;\n        _this.buffer = [];\n        _this.active = 0;\n        _this.index = 0;\n        return _this;\n    }\n    MergeScanSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            var index = this.index++;\n            var ish = tryCatch(this.accumulator)(this.acc, value);\n            var destination = this.destination;\n            if (ish === errorObject) {\n                destination.error(errorObject.e);\n            }\n            else {\n                this.active++;\n                this._innerSub(ish, value, index);\n            }\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeScanSubscriber.prototype._innerSub = function (ish, value, index) {\n        this.add(subscribeToResult(this, ish, value, index));\n    };\n    MergeScanSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            if (this.hasValue === false) {\n                this.destination.next(this.acc);\n            }\n            this.destination.complete();\n        }\n    };\n    MergeScanSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var destination = this.destination;\n        this.acc = innerValue;\n        this.hasValue = true;\n        destination.next(innerValue);\n    };\n    MergeScanSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            if (this.hasValue === false) {\n                this.destination.next(this.acc);\n            }\n            this.destination.complete();\n        }\n    };\n    return MergeScanSubscriber;\n}(OuterSubscriber));\nexport { MergeScanSubscriber };\n//# sourceMappingURL=mergeScan.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function refCount() {\n    return function refCountOperatorFunction(source) {\n        return source.lift(new RefCountOperator(source));\n    };\n}\nvar RefCountOperator = /*@__PURE__*/ (function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        var _this = _super.call(this, destination) || this;\n        _this.connectable = connectable;\n        return _this;\n    }\n    RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        ///\n        // Compare the local RefCountSubscriber's connection Subscription to the\n        // connection Subscription on the shared ConnectableObservable. In cases\n        // where the ConnectableObservable source synchronously emits values, and\n        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n        // execution continues to here before the RefCountOperator has a chance to\n        // supply the RefCountSubscriber with the shared connection Subscription.\n        // For example:\n        // ```\n        // Observable.range(0, 10)\n        //   .publish()\n        //   .refCount()\n        //   .take(5)\n        //   .subscribe();\n        // ```\n        // In order to account for this case, RefCountSubscriber should only dispose\n        // the ConnectableObservable's shared connection Subscription if the\n        // connection Subscription exists, *and* either:\n        //   a. RefCountSubscriber doesn't have a reference to the shared connection\n        //      Subscription yet, or,\n        //   b. RefCountSubscriber's connection Subscription reference is identical\n        //      to the shared connection Subscription\n        ///\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=refCount.js.map\n","/** PURE_IMPORTS_START tslib,_Subject,_Observable,_Subscriber,_Subscription,_operators_refCount PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { SubjectSubscriber } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\n/**\n * @class ConnectableObservable<T>\n */\nvar ConnectableObservable = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ConnectableObservable, _super);\n    function ConnectableObservable(source, subjectFactory) {\n        var _this = _super.call(this) || this;\n        _this.source = source;\n        _this.subjectFactory = subjectFactory;\n        _this._refCount = 0;\n        /** @internal */\n        _this._isComplete = false;\n        return _this;\n    }\n    /** @deprecated This is an internal implementation detail, do not use. */\n    ConnectableObservable.prototype._subscribe = function (subscriber) {\n        return this.getSubject().subscribe(subscriber);\n    };\n    ConnectableObservable.prototype.getSubject = function () {\n        var subject = this._subject;\n        if (!subject || subject.isStopped) {\n            this._subject = this.subjectFactory();\n        }\n        return this._subject;\n    };\n    ConnectableObservable.prototype.connect = function () {\n        var connection = this._connection;\n        if (!connection) {\n            this._isComplete = false;\n            connection = this._connection = new Subscription();\n            connection.add(this.source\n                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n            if (connection.closed) {\n                this._connection = null;\n                connection = Subscription.EMPTY;\n            }\n            else {\n                this._connection = connection;\n            }\n        }\n        return connection;\n    };\n    ConnectableObservable.prototype.refCount = function () {\n        return higherOrderRefCount()(this);\n    };\n    return ConnectableObservable;\n}(Observable));\nexport { ConnectableObservable };\nvar connectableProto = ConnectableObservable.prototype;\nexport var connectableObservableDescriptor = {\n    operator: { value: null },\n    _refCount: { value: 0, writable: true },\n    _subject: { value: null, writable: true },\n    _connection: { value: null, writable: true },\n    _subscribe: { value: connectableProto._subscribe },\n    _isComplete: { value: connectableProto._isComplete, writable: true },\n    getSubject: { value: connectableProto.getSubject },\n    connect: { value: connectableProto.connect },\n    refCount: { value: connectableProto.refCount }\n};\nvar ConnectableSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ConnectableSubscriber, _super);\n    function ConnectableSubscriber(destination, connectable) {\n        var _this = _super.call(this, destination) || this;\n        _this.connectable = connectable;\n        return _this;\n    }\n    ConnectableSubscriber.prototype._error = function (err) {\n        this._unsubscribe();\n        _super.prototype._error.call(this, err);\n    };\n    ConnectableSubscriber.prototype._complete = function () {\n        this.connectable._isComplete = true;\n        this._unsubscribe();\n        _super.prototype._complete.call(this);\n    };\n    ConnectableSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (connectable) {\n            this.connectable = null;\n            var connection = connectable._connection;\n            connectable._refCount = 0;\n            connectable._subject = null;\n            connectable._connection = null;\n            if (connection) {\n                connection.unsubscribe();\n            }\n        }\n    };\n    return ConnectableSubscriber;\n}(SubjectSubscriber));\nvar RefCountOperator = /*@__PURE__*/ (function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        var _this = _super.call(this, destination) || this;\n        _this.connectable = connectable;\n        return _this;\n    }\n    RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        ///\n        // Compare the local RefCountSubscriber's connection Subscription to the\n        // connection Subscription on the shared ConnectableObservable. In cases\n        // where the ConnectableObservable source synchronously emits values, and\n        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n        // execution continues to here before the RefCountOperator has a chance to\n        // supply the RefCountSubscriber with the shared connection Subscription.\n        // For example:\n        // ```\n        // Observable.range(0, 10)\n        //   .publish()\n        //   .refCount()\n        //   .take(5)\n        //   .subscribe();\n        // ```\n        // In order to account for this case, RefCountSubscriber should only dispose\n        // the ConnectableObservable's shared connection Subscription if the\n        // connection Subscription exists, *and* either:\n        //   a. RefCountSubscriber doesn't have a reference to the shared connection\n        //      Subscription yet, or,\n        //   b. RefCountSubscriber's connection Subscription reference is identical\n        //      to the shared connection Subscription\n        ///\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=ConnectableObservable.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_Notification PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {SchedulerLike} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn(scheduler, delay) {\n    if (delay === void 0) {\n        delay = 0;\n    }\n    return function observeOnOperatorFunction(source) {\n        return source.lift(new ObserveOnOperator(scheduler, delay));\n    };\n}\nvar ObserveOnOperator = /*@__PURE__*/ (function () {\n    function ObserveOnOperator(scheduler, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    ObserveOnOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n    };\n    return ObserveOnOperator;\n}());\nexport { ObserveOnOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ObserveOnSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ObserveOnSubscriber, _super);\n    function ObserveOnSubscriber(destination, scheduler, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        var _this = _super.call(this, destination) || this;\n        _this.scheduler = scheduler;\n        _this.delay = delay;\n        return _this;\n    }\n    /** @nocollapse */\n    ObserveOnSubscriber.dispatch = function (arg) {\n        var notification = arg.notification, destination = arg.destination;\n        notification.observe(destination);\n        this.unsubscribe();\n    };\n    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {\n        this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));\n    };\n    ObserveOnSubscriber.prototype._next = function (value) {\n        this.scheduleMessage(Notification.createNext(value));\n    };\n    ObserveOnSubscriber.prototype._error = function (err) {\n        this.scheduleMessage(Notification.createError(err));\n    };\n    ObserveOnSubscriber.prototype._complete = function () {\n        this.scheduleMessage(Notification.createComplete());\n    };\n    return ObserveOnSubscriber;\n}(Subscriber));\nexport { ObserveOnSubscriber };\nvar ObserveOnMessage = /*@__PURE__*/ (function () {\n    function ObserveOnMessage(notification, destination) {\n        this.notification = notification;\n        this.destination = destination;\n    }\n    return ObserveOnMessage;\n}());\nexport { ObserveOnMessage };\n//# sourceMappingURL=observeOn.js.map\n","/** PURE_IMPORTS_START tslib,_observable_from,_util_isArray,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { from } from '../observable/from';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/* tslint:enable:max-line-length */\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * <img src=\"./img/onErrorResumeNext.png\" width=\"100%\">\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catch} instead.\n *\n *\n * @example <caption>Subscribe to the next Observable after map fails</caption>\n * Rx.Observable.of(1, 2, 3, 0)\n *   .map(x => {\n *       if (x === 0) { throw Error(); }\n         return 10 / x;\n *   })\n *   .onErrorResumeNext(Rx.Observable.of(1, 2, 3))\n *   .subscribe(\n *     val => console.log(val),\n *     err => console.log(err),          // Will never be called.\n *     () => console.log('that\\'s it!')\n *   );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n *\n * @see {@link concat}\n * @see {@link catch}\n *\n * @param {...ObservableInput} observables Observables passed either directly or as an array.\n * @return {Observable} An Observable that emits values from source Observable, but - if it errors - subscribes\n * to the next passed Observable and so on, until it completes or runs out of Observables.\n * @method onErrorResumeNext\n * @owner Observable\n */\nexport function onErrorResumeNext() {\n    var nextSources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        nextSources[_i] = arguments[_i];\n    }\n    if (nextSources.length === 1 && isArray(nextSources[0])) {\n        nextSources = nextSources[0];\n    }\n    return function (source) { return source.lift(new OnErrorResumeNextOperator(nextSources)); };\n}\n/* tslint:enable:max-line-length */\nexport function onErrorResumeNextStatic() {\n    var nextSources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        nextSources[_i] = arguments[_i];\n    }\n    var source = null;\n    if (nextSources.length === 1 && isArray(nextSources[0])) {\n        nextSources = nextSources[0];\n    }\n    source = nextSources.shift();\n    return from(source, null).lift(new OnErrorResumeNextOperator(nextSources));\n}\nvar OnErrorResumeNextOperator = /*@__PURE__*/ (function () {\n    function OnErrorResumeNextOperator(nextSources) {\n        this.nextSources = nextSources;\n    }\n    OnErrorResumeNextOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n    };\n    return OnErrorResumeNextOperator;\n}());\nvar OnErrorResumeNextSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(OnErrorResumeNextSubscriber, _super);\n    function OnErrorResumeNextSubscriber(destination, nextSources) {\n        var _this = _super.call(this, destination) || this;\n        _this.destination = destination;\n        _this.nextSources = nextSources;\n        return _this;\n    }\n    OnErrorResumeNextSubscriber.prototype.notifyError = function (error, innerSub) {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype._error = function (err) {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype._complete = function () {\n        this.subscribeToNextSource();\n    };\n    OnErrorResumeNextSubscriber.prototype.subscribeToNextSource = function () {\n        var next = this.nextSources.shift();\n        if (next) {\n            this.add(subscribeToResult(this, next));\n        }\n        else {\n            this.destination.complete();\n        }\n    };\n    return OnErrorResumeNextSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=onErrorResumeNext.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise() {\n    return function (source) { return source.lift(new PairwiseOperator()); };\n}\nvar PairwiseOperator = /*@__PURE__*/ (function () {\n    function PairwiseOperator() {\n    }\n    PairwiseOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new PairwiseSubscriber(subscriber));\n    };\n    return PairwiseOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar PairwiseSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(PairwiseSubscriber, _super);\n    function PairwiseSubscriber(destination) {\n        var _this = _super.call(this, destination) || this;\n        _this.hasPrev = false;\n        return _this;\n    }\n    PairwiseSubscriber.prototype._next = function (value) {\n        if (this.hasPrev) {\n            this.destination.next([this.prev, value]);\n        }\n        else {\n            this.hasPrev = true;\n        }\n        this.prev = value;\n    };\n    return PairwiseSubscriber;\n}(Subscriber));\n//# sourceMappingURL=pairwise.js.map\n","/** PURE_IMPORTS_START tslib,_Subject,_util_ObjectUnsubscribedError PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from './Subject';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\n/**\n * @class BehaviorSubject<T>\n */\nvar BehaviorSubject = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(BehaviorSubject, _super);\n    function BehaviorSubject(_value) {\n        var _this = _super.call(this) || this;\n        _this._value = _value;\n        return _this;\n    }\n    Object.defineProperty(BehaviorSubject.prototype, \"value\", {\n        get: function () {\n            return this.getValue();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** @deprecated This is an internal implementation detail, do not use. */\n    BehaviorSubject.prototype._subscribe = function (subscriber) {\n        var subscription = _super.prototype._subscribe.call(this, subscriber);\n        if (subscription && !subscription.closed) {\n            subscriber.next(this._value);\n        }\n        return subscription;\n    };\n    BehaviorSubject.prototype.getValue = function () {\n        if (this.hasError) {\n            throw this.thrownError;\n        }\n        else if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else {\n            return this._value;\n        }\n    };\n    BehaviorSubject.prototype.next = function (value) {\n        _super.prototype.next.call(this, this._value = value);\n    };\n    return BehaviorSubject;\n}(Subject));\nexport { BehaviorSubject };\n//# sourceMappingURL=BehaviorSubject.js.map\n","/** PURE_IMPORTS_START tslib,_Subject,_Subscription PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from './Subject';\nimport { Subscription } from './Subscription';\n/**\n * @class AsyncSubject<T>\n */\nvar AsyncSubject = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(AsyncSubject, _super);\n    function AsyncSubject() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.value = null;\n        _this.hasNext = false;\n        _this.hasCompleted = false;\n        return _this;\n    }\n    /** @deprecated This is an internal implementation detail, do not use. */\n    AsyncSubject.prototype._subscribe = function (subscriber) {\n        if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription.EMPTY;\n        }\n        else if (this.hasCompleted && this.hasNext) {\n            subscriber.next(this.value);\n            subscriber.complete();\n            return Subscription.EMPTY;\n        }\n        return _super.prototype._subscribe.call(this, subscriber);\n    };\n    AsyncSubject.prototype.next = function (value) {\n        if (!this.hasCompleted) {\n            this.value = value;\n            this.hasNext = true;\n        }\n    };\n    AsyncSubject.prototype.error = function (error) {\n        if (!this.hasCompleted) {\n            _super.prototype.error.call(this, error);\n        }\n    };\n    AsyncSubject.prototype.complete = function () {\n        this.hasCompleted = true;\n        if (this.hasNext) {\n            _super.prototype.next.call(this, this.value);\n        }\n        _super.prototype.complete.call(this);\n    };\n    return AsyncSubject;\n}(Subject));\nexport { AsyncSubject };\n//# sourceMappingURL=AsyncSubject.js.map\n","/** PURE_IMPORTS_START tslib,_AsyncAction PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { AsyncAction } from './AsyncAction';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar QueueAction = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(QueueAction, _super);\n    function QueueAction(scheduler, work) {\n        var _this = _super.call(this, scheduler, work) || this;\n        _this.scheduler = scheduler;\n        _this.work = work;\n        return _this;\n    }\n    QueueAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        if (delay > 0) {\n            return _super.prototype.schedule.call(this, state, delay);\n        }\n        this.delay = delay;\n        this.state = state;\n        this.scheduler.flush(this);\n        return this;\n    };\n    QueueAction.prototype.execute = function (state, delay) {\n        return (delay > 0 || this.closed) ?\n            _super.prototype.execute.call(this, state, delay) :\n            this._execute(state, delay);\n    };\n    QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        // If delay exists and is greater than 0, or if the delay is null (the\n        // action wasn't rescheduled) but was originally scheduled as an async\n        // action, then recycle as an async action.\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n        }\n        // Otherwise flush the scheduler starting with this action.\n        return scheduler.flush(this);\n    };\n    return QueueAction;\n}(AsyncAction));\nexport { QueueAction };\n//# sourceMappingURL=QueueAction.js.map\n","/** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { AsyncScheduler } from './AsyncScheduler';\nvar QueueScheduler = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(QueueScheduler, _super);\n    function QueueScheduler() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return QueueScheduler;\n}(AsyncScheduler));\nexport { QueueScheduler };\n//# sourceMappingURL=QueueScheduler.js.map\n","/** PURE_IMPORTS_START _QueueAction,_QueueScheduler PURE_IMPORTS_END */\nimport { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * @examples <caption>Schedule recursively first, then do something</caption>\n *\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n *\n *\n * @example <caption>Reschedule itself recursively</caption>\n *\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n *\n *\n * @static true\n * @name queue\n * @owner Scheduler\n */\nexport var queue = /*@__PURE__*/ new QueueScheduler(QueueAction);\n//# sourceMappingURL=queue.js.map\n","/** PURE_IMPORTS_START tslib,_Subject,_scheduler_queue,_Subscription,_operators_observeOn,_util_ObjectUnsubscribedError,_SubjectSubscription PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from './Subject';\nimport { queue } from './scheduler/queue';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operators/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\n/**\n * @class ReplaySubject<T>\n */\nvar ReplaySubject = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ReplaySubject, _super);\n    function ReplaySubject(bufferSize, windowTime, scheduler) {\n        if (bufferSize === void 0) {\n            bufferSize = Number.POSITIVE_INFINITY;\n        }\n        if (windowTime === void 0) {\n            windowTime = Number.POSITIVE_INFINITY;\n        }\n        var _this = _super.call(this) || this;\n        _this.scheduler = scheduler;\n        _this._events = [];\n        _this._infiniteTimeWindow = false;\n        _this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n        _this._windowTime = windowTime < 1 ? 1 : windowTime;\n        if (windowTime === Number.POSITIVE_INFINITY) {\n            _this._infiniteTimeWindow = true;\n            _this.next = _this.nextInfiniteTimeWindow;\n        }\n        else {\n            _this.next = _this.nextTimeWindow;\n        }\n        return _this;\n    }\n    ReplaySubject.prototype.nextInfiniteTimeWindow = function (value) {\n        var _events = this._events;\n        _events.push(value);\n        // Since this method is invoked in every next() call than the buffer\n        // can overgrow the max size only by one item\n        if (_events.length > this._bufferSize) {\n            _events.shift();\n        }\n        _super.prototype.next.call(this, value);\n    };\n    ReplaySubject.prototype.nextTimeWindow = function (value) {\n        this._events.push(new ReplayEvent(this._getNow(), value));\n        this._trimBufferThenGetEvents();\n        _super.prototype.next.call(this, value);\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    ReplaySubject.prototype._subscribe = function (subscriber) {\n        // When `_infiniteTimeWindow === true` then the buffer is already trimmed\n        var _infiniteTimeWindow = this._infiniteTimeWindow;\n        var _events = _infiniteTimeWindow ? this._events : this._trimBufferThenGetEvents();\n        var scheduler = this.scheduler;\n        var len = _events.length;\n        var subscription;\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else if (this.isStopped || this.hasError) {\n            subscription = Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            subscription = new SubjectSubscription(this, subscriber);\n        }\n        if (scheduler) {\n            subscriber.add(subscriber = new ObserveOnSubscriber(subscriber, scheduler));\n        }\n        if (_infiniteTimeWindow) {\n            for (var i = 0; i < len && !subscriber.closed; i++) {\n                subscriber.next(_events[i]);\n            }\n        }\n        else {\n            for (var i = 0; i < len && !subscriber.closed; i++) {\n                subscriber.next(_events[i].value);\n            }\n        }\n        if (this.hasError) {\n            subscriber.error(this.thrownError);\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n        }\n        return subscription;\n    };\n    ReplaySubject.prototype._getNow = function () {\n        return (this.scheduler || queue).now();\n    };\n    ReplaySubject.prototype._trimBufferThenGetEvents = function () {\n        var now = this._getNow();\n        var _bufferSize = this._bufferSize;\n        var _windowTime = this._windowTime;\n        var _events = this._events;\n        var eventsCount = _events.length;\n        var spliceCount = 0;\n        // Trim events that fall out of the time window.\n        // Start at the front of the list. Break early once\n        // we encounter an event that falls within the window.\n        while (spliceCount < eventsCount) {\n            if ((now - _events[spliceCount].time) < _windowTime) {\n                break;\n            }\n            spliceCount++;\n        }\n        if (eventsCount > _bufferSize) {\n            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n        }\n        if (spliceCount > 0) {\n            _events.splice(0, spliceCount);\n        }\n        return _events;\n    };\n    return ReplaySubject;\n}(Subject));\nexport { ReplaySubject };\nvar ReplayEvent = /*@__PURE__*/ (function () {\n    function ReplayEvent(time, value) {\n        this.time = time;\n        this.value = value;\n    }\n    return ReplayEvent;\n}());\n//# sourceMappingURL=ReplaySubject.js.map\n","/** PURE_IMPORTS_START tslib,_util_isArray,_fromArray,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { isArray } from '../util/isArray';\nimport { fromArray } from './fromArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function race() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i] = arguments[_i];\n    }\n    // if the only argument is an array, it was most likely called with\n    // `race([obs1, obs2, ...])`\n    if (observables.length === 1) {\n        if (isArray(observables[0])) {\n            observables = observables[0];\n        }\n        else {\n            return observables[0];\n        }\n    }\n    return fromArray(observables, undefined).lift(new RaceOperator());\n}\nvar RaceOperator = /*@__PURE__*/ (function () {\n    function RaceOperator() {\n    }\n    RaceOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RaceSubscriber(subscriber));\n    };\n    return RaceOperator;\n}());\nexport { RaceOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RaceSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RaceSubscriber, _super);\n    function RaceSubscriber(destination) {\n        var _this = _super.call(this, destination) || this;\n        _this.hasFirst = false;\n        _this.observables = [];\n        _this.subscriptions = [];\n        return _this;\n    }\n    RaceSubscriber.prototype._next = function (observable) {\n        this.observables.push(observable);\n    };\n    RaceSubscriber.prototype._complete = function () {\n        var observables = this.observables;\n        var len = observables.length;\n        if (len === 0) {\n            this.destination.complete();\n        }\n        else {\n            for (var i = 0; i < len && !this.hasFirst; i++) {\n                var observable = observables[i];\n                var subscription = subscribeToResult(this, observable, observable, i);\n                if (this.subscriptions) {\n                    this.subscriptions.push(subscription);\n                }\n                this.add(subscription);\n            }\n            this.observables = null;\n        }\n    };\n    RaceSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (!this.hasFirst) {\n            this.hasFirst = true;\n            for (var i = 0; i < this.subscriptions.length; i++) {\n                if (i !== outerIndex) {\n                    var subscription = this.subscriptions[i];\n                    subscription.unsubscribe();\n                    this.remove(subscription);\n                }\n            }\n            this.subscriptions = null;\n        }\n        this.destination.next(innerValue);\n    };\n    return RaceSubscriber;\n}(OuterSubscriber));\nexport { RaceSubscriber };\n//# sourceMappingURL=race.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_observable_empty PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { empty } from '../observable/empty';\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nexport function repeat(count) {\n    if (count === void 0) {\n        count = -1;\n    }\n    return function (source) {\n        if (count === 0) {\n            return empty();\n        }\n        else if (count < 0) {\n            return source.lift(new RepeatOperator(-1, source));\n        }\n        else {\n            return source.lift(new RepeatOperator(count - 1, source));\n        }\n    };\n}\nvar RepeatOperator = /*@__PURE__*/ (function () {\n    function RepeatOperator(count, source) {\n        this.count = count;\n        this.source = source;\n    }\n    RepeatOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));\n    };\n    return RepeatOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RepeatSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RepeatSubscriber, _super);\n    function RepeatSubscriber(destination, count, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.count = count;\n        _this.source = source;\n        return _this;\n    }\n    RepeatSubscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            var _a = this, source = _a.source, count = _a.count;\n            if (count === 0) {\n                return _super.prototype.complete.call(this);\n            }\n            else if (count > -1) {\n                this.count = count - 1;\n            }\n            source.subscribe(this._unsubscribeAndRecycle());\n        }\n    };\n    return RepeatSubscriber;\n}(Subscriber));\n//# sourceMappingURL=repeat.js.map\n","/** PURE_IMPORTS_START tslib,_Subject,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen(notifier) {\n    return function (source) { return source.lift(new RepeatWhenOperator(notifier)); };\n}\nvar RepeatWhenOperator = /*@__PURE__*/ (function () {\n    function RepeatWhenOperator(notifier) {\n        this.notifier = notifier;\n    }\n    RepeatWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n    };\n    return RepeatWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RepeatWhenSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RepeatWhenSubscriber, _super);\n    function RepeatWhenSubscriber(destination, notifier, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.notifier = notifier;\n        _this.source = source;\n        _this.sourceIsBeingSubscribedTo = true;\n        return _this;\n    }\n    RepeatWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.sourceIsBeingSubscribedTo = true;\n        this.source.subscribe(this);\n    };\n    RepeatWhenSubscriber.prototype.notifyComplete = function (innerSub) {\n        if (this.sourceIsBeingSubscribedTo === false) {\n            return _super.prototype.complete.call(this);\n        }\n    };\n    RepeatWhenSubscriber.prototype.complete = function () {\n        this.sourceIsBeingSubscribedTo = false;\n        if (!this.isStopped) {\n            if (!this.retries) {\n                this.subscribeToRetries();\n            }\n            if (!this.retriesSubscription || this.retriesSubscription.closed) {\n                return _super.prototype.complete.call(this);\n            }\n            this._unsubscribeAndRecycle();\n            this.notifications.next();\n        }\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    RepeatWhenSubscriber.prototype._unsubscribe = function () {\n        var _a = this, notifications = _a.notifications, retriesSubscription = _a.retriesSubscription;\n        if (notifications) {\n            notifications.unsubscribe();\n            this.notifications = null;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = null;\n        }\n        this.retries = null;\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    RepeatWhenSubscriber.prototype._unsubscribeAndRecycle = function () {\n        var _unsubscribe = this._unsubscribe;\n        this._unsubscribe = null;\n        _super.prototype._unsubscribeAndRecycle.call(this);\n        this._unsubscribe = _unsubscribe;\n        return this;\n    };\n    RepeatWhenSubscriber.prototype.subscribeToRetries = function () {\n        this.notifications = new Subject();\n        var retries = tryCatch(this.notifier)(this.notifications);\n        if (retries === errorObject) {\n            return _super.prototype.complete.call(this);\n        }\n        this.retries = retries;\n        this.retriesSubscription = subscribeToResult(this, retries);\n    };\n    return RepeatWhenSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=repeatWhen.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * <img src=\"./img/retry.png\" width=\"100%\">\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n * @param {number} count - Number of retry attempts before failing.\n * @return {Observable} The source Observable modified with the retry logic.\n * @method retry\n * @owner Observable\n */\nexport function retry(count) {\n    if (count === void 0) {\n        count = -1;\n    }\n    return function (source) { return source.lift(new RetryOperator(count, source)); };\n}\nvar RetryOperator = /*@__PURE__*/ (function () {\n    function RetryOperator(count, source) {\n        this.count = count;\n        this.source = source;\n    }\n    RetryOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));\n    };\n    return RetryOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RetrySubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RetrySubscriber, _super);\n    function RetrySubscriber(destination, count, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.count = count;\n        _this.source = source;\n        return _this;\n    }\n    RetrySubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _a = this, source = _a.source, count = _a.count;\n            if (count === 0) {\n                return _super.prototype.error.call(this, err);\n            }\n            else if (count > -1) {\n                this.count = count - 1;\n            }\n            source.subscribe(this._unsubscribeAndRecycle());\n        }\n    };\n    return RetrySubscriber;\n}(Subscriber));\n//# sourceMappingURL=retry.js.map\n","/** PURE_IMPORTS_START tslib,_Subject,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/retryWhen.png\" width=\"100%\">\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return {Observable} The source Observable modified with retry logic.\n * @method retryWhen\n * @owner Observable\n */\nexport function retryWhen(notifier) {\n    return function (source) { return source.lift(new RetryWhenOperator(notifier, source)); };\n}\nvar RetryWhenOperator = /*@__PURE__*/ (function () {\n    function RetryWhenOperator(notifier, source) {\n        this.notifier = notifier;\n        this.source = source;\n    }\n    RetryWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n    };\n    return RetryWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RetryWhenSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RetryWhenSubscriber, _super);\n    function RetryWhenSubscriber(destination, notifier, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.notifier = notifier;\n        _this.source = source;\n        return _this;\n    }\n    RetryWhenSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var errors = this.errors;\n            var retries = this.retries;\n            var retriesSubscription = this.retriesSubscription;\n            if (!retries) {\n                errors = new Subject();\n                retries = tryCatch(this.notifier)(errors);\n                if (retries === errorObject) {\n                    return _super.prototype.error.call(this, errorObject.e);\n                }\n                retriesSubscription = subscribeToResult(this, retries);\n            }\n            else {\n                this.errors = null;\n                this.retriesSubscription = null;\n            }\n            this._unsubscribeAndRecycle();\n            this.errors = errors;\n            this.retries = retries;\n            this.retriesSubscription = retriesSubscription;\n            errors.next(err);\n        }\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    RetryWhenSubscriber.prototype._unsubscribe = function () {\n        var _a = this, errors = _a.errors, retriesSubscription = _a.retriesSubscription;\n        if (errors) {\n            errors.unsubscribe();\n            this.errors = null;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = null;\n        }\n        this.retries = null;\n    };\n    RetryWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var _unsubscribe = this._unsubscribe;\n        this._unsubscribe = null;\n        this._unsubscribeAndRecycle();\n        this._unsubscribe = _unsubscribe;\n        this.source.subscribe(this);\n    };\n    return RetryWhenSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=retryWhen.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample(notifier) {\n    return function (source) { return source.lift(new SampleOperator(notifier)); };\n}\nvar SampleOperator = /*@__PURE__*/ (function () {\n    function SampleOperator(notifier) {\n        this.notifier = notifier;\n    }\n    SampleOperator.prototype.call = function (subscriber, source) {\n        var sampleSubscriber = new SampleSubscriber(subscriber);\n        var subscription = source.subscribe(sampleSubscriber);\n        subscription.add(subscribeToResult(sampleSubscriber, this.notifier));\n        return subscription;\n    };\n    return SampleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SampleSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SampleSubscriber, _super);\n    function SampleSubscriber() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.hasValue = false;\n        return _this;\n    }\n    SampleSubscriber.prototype._next = function (value) {\n        this.value = value;\n        this.hasValue = true;\n    };\n    SampleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.emitValue();\n    };\n    SampleSubscriber.prototype.notifyComplete = function () {\n        this.emitValue();\n    };\n    SampleSubscriber.prototype.emitValue = function () {\n        if (this.hasValue) {\n            this.hasValue = false;\n            this.destination.next(this.value);\n        }\n    };\n    return SampleSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=sample.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * <img src=\"./img/sampleTime.png\" width=\"100%\">\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * @example <caption>Every second, emit the most recent click at most once</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.sampleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the sampling.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable at the specified time interval.\n * @method sampleTime\n * @owner Observable\n */\nexport function sampleTime(period, scheduler) {\n    if (scheduler === void 0) {\n        scheduler = async;\n    }\n    return function (source) { return source.lift(new SampleTimeOperator(period, scheduler)); };\n}\nvar SampleTimeOperator = /*@__PURE__*/ (function () {\n    function SampleTimeOperator(period, scheduler) {\n        this.period = period;\n        this.scheduler = scheduler;\n    }\n    SampleTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n    };\n    return SampleTimeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SampleTimeSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SampleTimeSubscriber, _super);\n    function SampleTimeSubscriber(destination, period, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.period = period;\n        _this.scheduler = scheduler;\n        _this.hasValue = false;\n        _this.add(scheduler.schedule(dispatchNotification, period, { subscriber: _this, period: period }));\n        return _this;\n    }\n    SampleTimeSubscriber.prototype._next = function (value) {\n        this.lastValue = value;\n        this.hasValue = true;\n    };\n    SampleTimeSubscriber.prototype.notifyNext = function () {\n        if (this.hasValue) {\n            this.hasValue = false;\n            this.destination.next(this.lastValue);\n        }\n    };\n    return SampleTimeSubscriber;\n}(Subscriber));\nfunction dispatchNotification(state) {\n    var subscriber = state.subscriber, period = state.period;\n    subscriber.notifyNext();\n    this.schedule(state, period);\n}\n//# sourceMappingURL=sampleTime.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_util_tryCatch,_util_errorObject PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nexport function sequenceEqual(compareTo, comparor) {\n    return function (source) { return source.lift(new SequenceEqualOperator(compareTo, comparor)); };\n}\nvar SequenceEqualOperator = /*@__PURE__*/ (function () {\n    function SequenceEqualOperator(compareTo, comparor) {\n        this.compareTo = compareTo;\n        this.comparor = comparor;\n    }\n    SequenceEqualOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n    };\n    return SequenceEqualOperator;\n}());\nexport { SequenceEqualOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SequenceEqualSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SequenceEqualSubscriber, _super);\n    function SequenceEqualSubscriber(destination, compareTo, comparor) {\n        var _this = _super.call(this, destination) || this;\n        _this.compareTo = compareTo;\n        _this.comparor = comparor;\n        _this._a = [];\n        _this._b = [];\n        _this._oneComplete = false;\n        _this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, _this)));\n        return _this;\n    }\n    SequenceEqualSubscriber.prototype._next = function (value) {\n        if (this._oneComplete && this._b.length === 0) {\n            this.emit(false);\n        }\n        else {\n            this._a.push(value);\n            this.checkValues();\n        }\n    };\n    SequenceEqualSubscriber.prototype._complete = function () {\n        if (this._oneComplete) {\n            this.emit(this._a.length === 0 && this._b.length === 0);\n        }\n        else {\n            this._oneComplete = true;\n        }\n    };\n    SequenceEqualSubscriber.prototype.checkValues = function () {\n        var _c = this, _a = _c._a, _b = _c._b, comparor = _c.comparor;\n        while (_a.length > 0 && _b.length > 0) {\n            var a = _a.shift();\n            var b = _b.shift();\n            var areEqual = false;\n            if (comparor) {\n                areEqual = tryCatch(comparor)(a, b);\n                if (areEqual === errorObject) {\n                    this.destination.error(errorObject.e);\n                }\n            }\n            else {\n                areEqual = a === b;\n            }\n            if (!areEqual) {\n                this.emit(false);\n            }\n        }\n    };\n    SequenceEqualSubscriber.prototype.emit = function (value) {\n        var destination = this.destination;\n        destination.next(value);\n        destination.complete();\n    };\n    SequenceEqualSubscriber.prototype.nextB = function (value) {\n        if (this._oneComplete && this._a.length === 0) {\n            this.emit(false);\n        }\n        else {\n            this._b.push(value);\n            this.checkValues();\n        }\n    };\n    return SequenceEqualSubscriber;\n}(Subscriber));\nexport { SequenceEqualSubscriber };\nvar SequenceEqualCompareToSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SequenceEqualCompareToSubscriber, _super);\n    function SequenceEqualCompareToSubscriber(destination, parent) {\n        var _this = _super.call(this, destination) || this;\n        _this.parent = parent;\n        return _this;\n    }\n    SequenceEqualCompareToSubscriber.prototype._next = function (value) {\n        this.parent.nextB(value);\n    };\n    SequenceEqualCompareToSubscriber.prototype._error = function (err) {\n        this.parent.error(err);\n    };\n    SequenceEqualCompareToSubscriber.prototype._complete = function () {\n        this.parent._complete();\n    };\n    return SequenceEqualCompareToSubscriber;\n}(Subscriber));\n//# sourceMappingURL=sequenceEqual.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_util_EmptyError PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { EmptyError } from '../util/EmptyError';\n/**\n * Returns an Observable that emits the single item emitted by the source Observable that matches a specified\n * predicate, if that Observable emits one such item. If the source Observable emits more than one such item or no\n * items, notify of an IllegalArgumentException or NoSuchElementException respectively. If the source Observable\n * emits items but none match the specified predicate then `undefined` is emiited.\n *\n * <img src=\"./img/single.png\" width=\"100%\">\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits the single item emitted by the source Observable that matches\n * the predicate or `undefined` when no items match.\n *\n * @method single\n * @owner Observable\n */\nexport function single(predicate) {\n    return function (source) { return source.lift(new SingleOperator(predicate, source)); };\n}\nvar SingleOperator = /*@__PURE__*/ (function () {\n    function SingleOperator(predicate, source) {\n        this.predicate = predicate;\n        this.source = source;\n    }\n    SingleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));\n    };\n    return SingleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SingleSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SingleSubscriber, _super);\n    function SingleSubscriber(destination, predicate, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.source = source;\n        _this.seenValue = false;\n        _this.index = 0;\n        return _this;\n    }\n    SingleSubscriber.prototype.applySingleValue = function (value) {\n        if (this.seenValue) {\n            this.destination.error('Sequence contains more than one element');\n        }\n        else {\n            this.seenValue = true;\n            this.singleValue = value;\n        }\n    };\n    SingleSubscriber.prototype._next = function (value) {\n        var index = this.index++;\n        if (this.predicate) {\n            this.tryNext(value, index);\n        }\n        else {\n            this.applySingleValue(value);\n        }\n    };\n    SingleSubscriber.prototype.tryNext = function (value, index) {\n        try {\n            if (this.predicate(value, index, this.source)) {\n                this.applySingleValue(value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    SingleSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        if (this.index > 0) {\n            destination.next(this.seenValue ? this.singleValue : undefined);\n            destination.complete();\n        }\n        else {\n            destination.error(new EmptyError);\n        }\n    };\n    return SingleSubscriber;\n}(Subscriber));\n//# sourceMappingURL=single.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip(count) {\n    return function (source) { return source.lift(new SkipOperator(count)); };\n}\nvar SkipOperator = /*@__PURE__*/ (function () {\n    function SkipOperator(total) {\n        this.total = total;\n    }\n    SkipOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SkipSubscriber(subscriber, this.total));\n    };\n    return SkipOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SkipSubscriber, _super);\n    function SkipSubscriber(destination, total) {\n        var _this = _super.call(this, destination) || this;\n        _this.total = total;\n        _this.count = 0;\n        return _this;\n    }\n    SkipSubscriber.prototype._next = function (x) {\n        if (++this.count > this.total) {\n            this.destination.next(x);\n        }\n    };\n    return SkipSubscriber;\n}(Subscriber));\n//# sourceMappingURL=skip.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_util_ArgumentOutOfRangeError PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\n/**\n * Skip the last `count` values emitted by the source Observable.\n *\n * <img src=\"./img/skipLast.png\" width=\"100%\">\n *\n * `skipLast` returns an Observable that accumulates a queue with a length\n * enough to store the first `count` values. As more values are received,\n * values are taken from the front of the queue and produced on the result\n * sequence. This causes values to be delayed.\n *\n * @example <caption>Skip the last 2 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 5);\n * var skipLastTwo = many.skipLast(2);\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `skipLast(i)`, it throws\n * ArgumentOutOrRangeError if `i < 0`.\n *\n * @param {number} count Number of elements to skip from the end of the source Observable.\n * @returns {Observable<T>} An Observable that skips the last count values\n * emitted by the source Observable.\n * @method skipLast\n * @owner Observable\n */\nexport function skipLast(count) {\n    return function (source) { return source.lift(new SkipLastOperator(count)); };\n}\nvar SkipLastOperator = /*@__PURE__*/ (function () {\n    function SkipLastOperator(_skipCount) {\n        this._skipCount = _skipCount;\n        if (this._skipCount < 0) {\n            throw new ArgumentOutOfRangeError;\n        }\n    }\n    SkipLastOperator.prototype.call = function (subscriber, source) {\n        if (this._skipCount === 0) {\n            // If we don't want to skip any values then just subscribe\n            // to Subscriber without any further logic.\n            return source.subscribe(new Subscriber(subscriber));\n        }\n        else {\n            return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));\n        }\n    };\n    return SkipLastOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipLastSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SkipLastSubscriber, _super);\n    function SkipLastSubscriber(destination, _skipCount) {\n        var _this = _super.call(this, destination) || this;\n        _this._skipCount = _skipCount;\n        _this._count = 0;\n        _this._ring = new Array(_skipCount);\n        return _this;\n    }\n    SkipLastSubscriber.prototype._next = function (value) {\n        var skipCount = this._skipCount;\n        var count = this._count++;\n        if (count < skipCount) {\n            this._ring[count] = value;\n        }\n        else {\n            var currentIndex = count % skipCount;\n            var ring = this._ring;\n            var oldValue = ring[currentIndex];\n            ring[currentIndex] = value;\n            this.destination.next(oldValue);\n        }\n    };\n    return SkipLastSubscriber;\n}(Subscriber));\n//# sourceMappingURL=skipLast.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * <img src=\"./img/skipUntil.png\" width=\"100%\">\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return {Observable<T>} An Observable that skips items from the source Observable until the second Observable emits\n * an item, then emits the remaining items.\n * @method skipUntil\n * @owner Observable\n */\nexport function skipUntil(notifier) {\n    return function (source) { return source.lift(new SkipUntilOperator(notifier)); };\n}\nvar SkipUntilOperator = /*@__PURE__*/ (function () {\n    function SkipUntilOperator(notifier) {\n        this.notifier = notifier;\n    }\n    SkipUntilOperator.prototype.call = function (destination, source) {\n        return source.subscribe(new SkipUntilSubscriber(destination, this.notifier));\n    };\n    return SkipUntilOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipUntilSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SkipUntilSubscriber, _super);\n    function SkipUntilSubscriber(destination, notifier) {\n        var _this = _super.call(this, destination) || this;\n        _this.hasValue = false;\n        _this.add(_this.innerSubscription = subscribeToResult(_this, notifier));\n        return _this;\n    }\n    SkipUntilSubscriber.prototype._next = function (value) {\n        if (this.hasValue) {\n            _super.prototype._next.call(this, value);\n        }\n    };\n    SkipUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.hasValue = true;\n        if (this.innerSubscription) {\n            this.innerSubscription.unsubscribe();\n        }\n    };\n    SkipUntilSubscriber.prototype.notifyComplete = function () {\n        /* do nothing */\n    };\n    return SkipUntilSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=skipUntil.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile(predicate) {\n    return function (source) { return source.lift(new SkipWhileOperator(predicate)); };\n}\nvar SkipWhileOperator = /*@__PURE__*/ (function () {\n    function SkipWhileOperator(predicate) {\n        this.predicate = predicate;\n    }\n    SkipWhileOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n    };\n    return SkipWhileOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipWhileSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SkipWhileSubscriber, _super);\n    function SkipWhileSubscriber(destination, predicate) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.skipping = true;\n        _this.index = 0;\n        return _this;\n    }\n    SkipWhileSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        if (this.skipping) {\n            this.tryCallPredicate(value);\n        }\n        if (!this.skipping) {\n            destination.next(value);\n        }\n    };\n    SkipWhileSubscriber.prototype.tryCallPredicate = function (value) {\n        try {\n            var result = this.predicate(value, this.index++);\n            this.skipping = Boolean(result);\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    return SkipWhileSubscriber;\n}(Subscriber));\n//# sourceMappingURL=skipWhile.js.map\n","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar nextHandle = 1;\nvar tasksByHandle = {};\nfunction runIfPresent(handle) {\n    var cb = tasksByHandle[handle];\n    if (cb) {\n        cb();\n    }\n}\nexport var Immediate = {\n    setImmediate: function (cb) {\n        var handle = nextHandle++;\n        tasksByHandle[handle] = cb;\n        Promise.resolve().then(function () { return runIfPresent(handle); });\n        return handle;\n    },\n    clearImmediate: function (handle) {\n        delete tasksByHandle[handle];\n    },\n};\n//# sourceMappingURL=Immediate.js.map\n","/** PURE_IMPORTS_START tslib,_util_Immediate,_AsyncAction PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Immediate } from '../util/Immediate';\nimport { AsyncAction } from './AsyncAction';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AsapAction = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(AsapAction, _super);\n    function AsapAction(scheduler, work) {\n        var _this = _super.call(this, scheduler, work) || this;\n        _this.scheduler = scheduler;\n        _this.work = work;\n        return _this;\n    }\n    AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        // If delay is greater than 0, request as an async action.\n        if (delay !== null && delay > 0) {\n            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n        }\n        // Push the action to the end of the scheduler queue.\n        scheduler.actions.push(this);\n        // If a microtask has already been scheduled, don't schedule another\n        // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n        // the current scheduled microtask id.\n        return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));\n    };\n    AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        // If delay exists and is greater than 0, or if the delay is null (the\n        // action wasn't rescheduled) but was originally scheduled as an async\n        // action, then recycle as an async action.\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);\n        }\n        // If the scheduler queue is empty, cancel the requested microtask and\n        // set the scheduled flag to undefined so the next AsapAction will schedule\n        // its own.\n        if (scheduler.actions.length === 0) {\n            Immediate.clearImmediate(id);\n            scheduler.scheduled = undefined;\n        }\n        // Return undefined so the action knows to request a new async id if it's rescheduled.\n        return undefined;\n    };\n    return AsapAction;\n}(AsyncAction));\nexport { AsapAction };\n//# sourceMappingURL=AsapAction.js.map\n","/** PURE_IMPORTS_START tslib,_AsyncScheduler PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { AsyncScheduler } from './AsyncScheduler';\nvar AsapScheduler = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(AsapScheduler, _super);\n    function AsapScheduler() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    AsapScheduler.prototype.flush = function (action) {\n        this.active = true;\n        this.scheduled = undefined;\n        var actions = this.actions;\n        var error;\n        var index = -1;\n        var count = actions.length;\n        action = action || actions.shift();\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (++index < count && (action = actions.shift()));\n        this.active = false;\n        if (error) {\n            while (++index < count && (action = actions.shift())) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AsapScheduler;\n}(AsyncScheduler));\nexport { AsapScheduler };\n//# sourceMappingURL=AsapScheduler.js.map\n","/** PURE_IMPORTS_START _AsapAction,_AsapScheduler PURE_IMPORTS_END */\nimport { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\n/**\n *\n * Asap Scheduler\n *\n * <span class=\"informal\">Perform task as fast as it can be performed asynchronously</span>\n *\n * `asap` scheduler behaves the same as {@link async} scheduler when you use it to delay task\n * in time. If however you set delay to `0`, `asap` will wait for current synchronously executing\n * code to end and then it will try to execute given task as fast as possible.\n *\n * `asap` scheduler will do its best to minimize time between end of currently executing code\n * and start of scheduled task. This makes it best candidate for performing so called \"deferring\".\n * Traditionally this was achieved by calling `setTimeout(deferredTask, 0)`, but that technique involves\n * some (although minimal) unwanted delay.\n *\n * Note that using `asap` scheduler does not necessarily mean that your task will be first to process\n * after currently executing code. In particular, if some task was also scheduled with `asap` before,\n * that task will execute first. That being said, if you need to schedule task asynchronously, but\n * as soon as possible, `asap` scheduler is your best bet.\n *\n * @example <caption>Compare async and asap scheduler</caption>\n *\n * Rx.Scheduler.async.schedule(() => console.log('async')); // scheduling 'async' first...\n * Rx.Scheduler.asap.schedule(() => console.log('asap'));\n *\n * // Logs:\n * // \"asap\"\n * // \"async\"\n * // ... but 'asap' goes first!\n *\n * @static true\n * @name asap\n * @owner Scheduler\n */\nexport var asap = /*@__PURE__*/ new AsapScheduler(AsapAction);\n//# sourceMappingURL=asap.js.map\n","/** PURE_IMPORTS_START tslib,_Observable,_scheduler_asap,_util_isNumeric PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Observable } from '../Observable';\nimport { asap } from '../scheduler/asap';\nimport { isNumeric } from '../util/isNumeric';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar SubscribeOnObservable = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SubscribeOnObservable, _super);\n    function SubscribeOnObservable(source, delayTime, scheduler) {\n        if (delayTime === void 0) {\n            delayTime = 0;\n        }\n        if (scheduler === void 0) {\n            scheduler = asap;\n        }\n        var _this = _super.call(this) || this;\n        _this.source = source;\n        _this.delayTime = delayTime;\n        _this.scheduler = scheduler;\n        if (!isNumeric(delayTime) || delayTime < 0) {\n            _this.delayTime = 0;\n        }\n        if (!scheduler || typeof scheduler.schedule !== 'function') {\n            _this.scheduler = asap;\n        }\n        return _this;\n    }\n    /** @nocollapse */\n    SubscribeOnObservable.create = function (source, delay, scheduler) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        if (scheduler === void 0) {\n            scheduler = asap;\n        }\n        return new SubscribeOnObservable(source, delay, scheduler);\n    };\n    /** @nocollapse */\n    SubscribeOnObservable.dispatch = function (arg) {\n        var source = arg.source, subscriber = arg.subscriber;\n        return this.add(source.subscribe(subscriber));\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    SubscribeOnObservable.prototype._subscribe = function (subscriber) {\n        var delay = this.delayTime;\n        var source = this.source;\n        var scheduler = this.scheduler;\n        return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {\n            source: source, subscriber: subscriber\n        });\n    };\n    return SubscribeOnObservable;\n}(Observable));\nexport { SubscribeOnObservable };\n//# sourceMappingURL=SubscribeOnObservable.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult,_map,_observable_from PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { map } from './map';\nimport { from } from '../observable/from';\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap(project, resultSelector) {\n    if (typeof resultSelector === 'function') {\n        return function (source) { return source.pipe(switchMap(function (a, i) { return from(project(a, i)).pipe(map(function (b, ii) { return resultSelector(a, b, i, ii); })); })); };\n    }\n    return function (source) { return source.lift(new SwitchMapOperator(project)); };\n}\nvar SwitchMapOperator = /*@__PURE__*/ (function () {\n    function SwitchMapOperator(project) {\n        this.project = project;\n    }\n    SwitchMapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SwitchMapSubscriber(subscriber, this.project));\n    };\n    return SwitchMapOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchMapSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SwitchMapSubscriber, _super);\n    function SwitchMapSubscriber(destination, project) {\n        var _this = _super.call(this, destination) || this;\n        _this.project = project;\n        _this.index = 0;\n        return _this;\n    }\n    SwitchMapSubscriber.prototype._next = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (error) {\n            this.destination.error(error);\n            return;\n        }\n        this._innerSub(result, value, index);\n    };\n    SwitchMapSubscriber.prototype._innerSub = function (result, value, index) {\n        var innerSubscription = this.innerSubscription;\n        if (innerSubscription) {\n            innerSubscription.unsubscribe();\n        }\n        this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n    };\n    SwitchMapSubscriber.prototype._complete = function () {\n        var innerSubscription = this.innerSubscription;\n        if (!innerSubscription || innerSubscription.closed) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapSubscriber.prototype._unsubscribe = function () {\n        this.innerSubscription = null;\n    };\n    SwitchMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.innerSubscription = null;\n        if (this.isStopped) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    };\n    return SwitchMapSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=switchMap.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits a value. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value, the output Observable stops mirroring the source Observable\n * and completes. If the `notifier` doesn't emit any value and completes\n * then `takeUntil` will pass all values.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil(notifier) {\n    return function (source) { return source.lift(new TakeUntilOperator(notifier)); };\n}\nvar TakeUntilOperator = /*@__PURE__*/ (function () {\n    function TakeUntilOperator(notifier) {\n        this.notifier = notifier;\n    }\n    TakeUntilOperator.prototype.call = function (subscriber, source) {\n        var takeUntilSubscriber = new TakeUntilSubscriber(subscriber);\n        var notifierSubscription = subscribeToResult(takeUntilSubscriber, this.notifier);\n        if (notifierSubscription && !notifierSubscription.closed) {\n            takeUntilSubscriber.add(notifierSubscription);\n            return source.subscribe(takeUntilSubscriber);\n        }\n        return takeUntilSubscriber;\n    };\n    return TakeUntilOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeUntilSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(TakeUntilSubscriber, _super);\n    function TakeUntilSubscriber(destination) {\n        return _super.call(this, destination) || this;\n    }\n    TakeUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.complete();\n    };\n    TakeUntilSubscriber.prototype.notifyComplete = function () {\n        // noop\n    };\n    return TakeUntilSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=takeUntil.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * <img src=\"./img/takeWhile.png\" width=\"100%\">\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * @example <caption>Emit click events only while the clientX property is greater than 200</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.takeWhile(ev => ev.clientX > 200);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable so long as each value satisfies the condition defined by the\n * `predicate`, then completes.\n * @method takeWhile\n * @owner Observable\n */\nexport function takeWhile(predicate) {\n    return function (source) { return source.lift(new TakeWhileOperator(predicate)); };\n}\nvar TakeWhileOperator = /*@__PURE__*/ (function () {\n    function TakeWhileOperator(predicate) {\n        this.predicate = predicate;\n    }\n    TakeWhileOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate));\n    };\n    return TakeWhileOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeWhileSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(TakeWhileSubscriber, _super);\n    function TakeWhileSubscriber(destination, predicate) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.index = 0;\n        return _this;\n    }\n    TakeWhileSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        var result;\n        try {\n            result = this.predicate(value, this.index++);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        this.nextOrComplete(value, result);\n    };\n    TakeWhileSubscriber.prototype.nextOrComplete = function (value, predicateResult) {\n        var destination = this.destination;\n        if (Boolean(predicateResult)) {\n            destination.next(value);\n        }\n        else {\n            destination.complete();\n        }\n    };\n    return TakeWhileSubscriber;\n}(Subscriber));\n//# sourceMappingURL=takeWhile.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport var defaultThrottleConfig = {\n    leading: true,\n    trailing: false\n};\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/throttle.png\" width=\"100%\">\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value or completes, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttle(ev => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {function(value: T): SubscribableOrPromise} durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param {Object} config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttle\n * @owner Observable\n */\nexport function throttle(durationSelector, config) {\n    if (config === void 0) {\n        config = defaultThrottleConfig;\n    }\n    return function (source) { return source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing)); };\n}\nvar ThrottleOperator = /*@__PURE__*/ (function () {\n    function ThrottleOperator(durationSelector, leading, trailing) {\n        this.durationSelector = durationSelector;\n        this.leading = leading;\n        this.trailing = trailing;\n    }\n    ThrottleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing));\n    };\n    return ThrottleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc\n * @ignore\n * @extends {Ignored}\n */\nvar ThrottleSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ThrottleSubscriber, _super);\n    function ThrottleSubscriber(destination, durationSelector, _leading, _trailing) {\n        var _this = _super.call(this, destination) || this;\n        _this.destination = destination;\n        _this.durationSelector = durationSelector;\n        _this._leading = _leading;\n        _this._trailing = _trailing;\n        _this._hasValue = false;\n        return _this;\n    }\n    ThrottleSubscriber.prototype._next = function (value) {\n        this._hasValue = true;\n        this._sendValue = value;\n        if (!this._throttled) {\n            if (this._leading) {\n                this.send();\n            }\n            else {\n                this.throttle(value);\n            }\n        }\n    };\n    ThrottleSubscriber.prototype.send = function () {\n        var _a = this, _hasValue = _a._hasValue, _sendValue = _a._sendValue;\n        if (_hasValue) {\n            this.destination.next(_sendValue);\n            this.throttle(_sendValue);\n        }\n        this._hasValue = false;\n        this._sendValue = null;\n    };\n    ThrottleSubscriber.prototype.throttle = function (value) {\n        var duration = this.tryDurationSelector(value);\n        if (duration) {\n            this.add(this._throttled = subscribeToResult(this, duration));\n        }\n    };\n    ThrottleSubscriber.prototype.tryDurationSelector = function (value) {\n        try {\n            return this.durationSelector(value);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return null;\n        }\n    };\n    ThrottleSubscriber.prototype.throttlingDone = function () {\n        var _a = this, _throttled = _a._throttled, _trailing = _a._trailing;\n        if (_throttled) {\n            _throttled.unsubscribe();\n        }\n        this._throttled = null;\n        if (_trailing) {\n            this.send();\n        }\n    };\n    ThrottleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.throttlingDone();\n    };\n    ThrottleSubscriber.prototype.notifyComplete = function () {\n        this.throttlingDone();\n    };\n    return ThrottleSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=throttle.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async,_throttle PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\nimport { defaultThrottleConfig } from './throttle';\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @param {Object} config a configuration object to define `leading` and\n * `trailing` behavior. Defaults to `{ leading: true, trailing: false }`.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nexport function throttleTime(duration, scheduler, config) {\n    if (scheduler === void 0) {\n        scheduler = async;\n    }\n    if (config === void 0) {\n        config = defaultThrottleConfig;\n    }\n    return function (source) { return source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing)); };\n}\nvar ThrottleTimeOperator = /*@__PURE__*/ (function () {\n    function ThrottleTimeOperator(duration, scheduler, leading, trailing) {\n        this.duration = duration;\n        this.scheduler = scheduler;\n        this.leading = leading;\n        this.trailing = trailing;\n    }\n    ThrottleTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing));\n    };\n    return ThrottleTimeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ThrottleTimeSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ThrottleTimeSubscriber, _super);\n    function ThrottleTimeSubscriber(destination, duration, scheduler, leading, trailing) {\n        var _this = _super.call(this, destination) || this;\n        _this.duration = duration;\n        _this.scheduler = scheduler;\n        _this.leading = leading;\n        _this.trailing = trailing;\n        _this._hasTrailingValue = false;\n        _this._trailingValue = null;\n        return _this;\n    }\n    ThrottleTimeSubscriber.prototype._next = function (value) {\n        if (this.throttled) {\n            if (this.trailing) {\n                this._trailingValue = value;\n                this._hasTrailingValue = true;\n            }\n        }\n        else {\n            this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n            if (this.leading) {\n                this.destination.next(value);\n            }\n        }\n    };\n    ThrottleTimeSubscriber.prototype._complete = function () {\n        if (this._hasTrailingValue) {\n            this.destination.next(this._trailingValue);\n            this.destination.complete();\n        }\n        else {\n            this.destination.complete();\n        }\n    };\n    ThrottleTimeSubscriber.prototype.clearThrottle = function () {\n        var throttled = this.throttled;\n        if (throttled) {\n            if (this.trailing && this._hasTrailingValue) {\n                this.destination.next(this._trailingValue);\n                this._trailingValue = null;\n                this._hasTrailingValue = false;\n            }\n            throttled.unsubscribe();\n            this.remove(throttled);\n            this.throttled = null;\n        }\n    };\n    return ThrottleTimeSubscriber;\n}(Subscriber));\nfunction dispatchNext(arg) {\n    var subscriber = arg.subscriber;\n    subscriber.clearThrottle();\n}\n//# sourceMappingURL=throttleTime.js.map\n","/** PURE_IMPORTS_START tslib PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\n/**\n * An error thrown when duetime elapses.\n *\n * @see {@link timeout}\n *\n * @class TimeoutError\n */\nvar TimeoutError = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(TimeoutError, _super);\n    function TimeoutError() {\n        var _this = _super.call(this, 'Timeout has occurred') || this;\n        _this.name = 'TimeoutError';\n        Object.setPrototypeOf(_this, TimeoutError.prototype);\n        return _this;\n    }\n    return TimeoutError;\n}(Error));\nexport { TimeoutError };\n//# sourceMappingURL=TimeoutError.js.map\n","/** PURE_IMPORTS_START tslib,_scheduler_async,_util_isDate,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/* tslint:enable:max-line-length */\n/**\n *\n * Errors if Observable does not emit a value in given time span, in case of which\n * subscribes to the second Observable.\n *\n * <span class=\"informal\">It's a version of `timeout` operator that let's you specify fallback Observable.</span>\n *\n * <img src=\"./img/timeoutWith.png\" width=\"100%\">\n *\n * `timeoutWith` is a variation of `timeout` operator. It behaves exactly the same,\n * still accepting as a first argument either a number or a Date, which control - respectively -\n * when values of source Observable should be emitted or when it should complete.\n *\n * The only difference is that it accepts a second, required parameter. This parameter\n * should be an Observable which will be subscribed when source Observable fails any timeout check.\n * So whenever regular `timeout` would emit an error, `timeoutWith` will instead start re-emitting\n * values from second Observable. Note that this fallback Observable is not checked for timeouts\n * itself, so it can emit values and complete at arbitrary points in time. From the moment of a second\n * subscription, Observable returned from `timeoutWith` simply mirrors fallback stream. When that\n * stream completes, it completes as well.\n *\n * Scheduler, which in case of `timeout` is provided as as second argument, can be still provided\n * here - as a third, optional parameter. It still is used to schedule timeout checks and -\n * as a consequence - when second Observable will be subscribed, since subscription happens\n * immediately after failing check.\n *\n * @example <caption>Add fallback observable</caption>\n * const seconds = Rx.Observable.interval(1000);\n * const minutes = Rx.Observable.interval(60 * 1000);\n *\n * seconds.timeoutWith(900, minutes)\n *     .subscribe(\n *         value => console.log(value), // After 900ms, will start emitting `minutes`,\n *                                      // since first value of `seconds` will not arrive fast enough.\n *         err => console.log(err) // Would be called after 900ms in case of `timeout`,\n *                                 // but here will never be called.\n *     );\n *\n * @param {number|Date} due Number specifying period within which Observable must emit values\n *                          or Date specifying before when Observable should complete\n * @param {Observable<T>} withObservable Observable which will be subscribed if source fails timeout check.\n * @param {Scheduler} [scheduler] Scheduler controlling when timeout checks occur.\n * @return {Observable<T>} Observable that mirrors behaviour of source or, when timeout check fails, of an Observable\n *                          passed as a second parameter.\n * @method timeoutWith\n * @owner Observable\n */\nexport function timeoutWith(due, withObservable, scheduler) {\n    if (scheduler === void 0) {\n        scheduler = async;\n    }\n    return function (source) {\n        var absoluteTimeout = isDate(due);\n        var waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(due);\n        return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));\n    };\n}\nvar TimeoutWithOperator = /*@__PURE__*/ (function () {\n    function TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler) {\n        this.waitFor = waitFor;\n        this.absoluteTimeout = absoluteTimeout;\n        this.withObservable = withObservable;\n        this.scheduler = scheduler;\n    }\n    TimeoutWithOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TimeoutWithSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler));\n    };\n    return TimeoutWithOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TimeoutWithSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(TimeoutWithSubscriber, _super);\n    function TimeoutWithSubscriber(destination, absoluteTimeout, waitFor, withObservable, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.absoluteTimeout = absoluteTimeout;\n        _this.waitFor = waitFor;\n        _this.withObservable = withObservable;\n        _this.scheduler = scheduler;\n        _this.action = null;\n        _this.scheduleTimeout();\n        return _this;\n    }\n    TimeoutWithSubscriber.dispatchTimeout = function (subscriber) {\n        var withObservable = subscriber.withObservable;\n        subscriber._unsubscribeAndRecycle();\n        subscriber.add(subscribeToResult(subscriber, withObservable));\n    };\n    TimeoutWithSubscriber.prototype.scheduleTimeout = function () {\n        var action = this.action;\n        if (action) {\n            // Recycle the action if we've already scheduled one. All the production\n            // Scheduler Actions mutate their state/delay time and return themeselves.\n            // VirtualActions are immutable, so they create and return a clone. In this\n            // case, we need to set the action reference to the most recent VirtualAction,\n            // to ensure that's the one we clone from next time.\n            this.action = action.schedule(this, this.waitFor);\n        }\n        else {\n            this.add(this.action = this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this));\n        }\n    };\n    TimeoutWithSubscriber.prototype._next = function (value) {\n        if (!this.absoluteTimeout) {\n            this.scheduleTimeout();\n        }\n        _super.prototype._next.call(this, value);\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    TimeoutWithSubscriber.prototype._unsubscribe = function () {\n        this.action = null;\n        this.scheduler = null;\n        this.withObservable = null;\n    };\n    return TimeoutWithSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=timeoutWith.js.map\n","/** PURE_IMPORTS_START tslib,_Subject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * <img src=\"./img/window.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * @example <caption>In every window of 1 second each, emit at most 2 click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var interval = Rx.Observable.interval(1000);\n * var result = clicks.window(interval)\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return {Observable<Observable<T>>} An Observable of windows, which are\n * Observables emitting values of the source Observable.\n * @method window\n * @owner Observable\n */\nexport function window(windowBoundaries) {\n    return function windowOperatorFunction(source) {\n        return source.lift(new WindowOperator(windowBoundaries));\n    };\n}\nvar WindowOperator = /*@__PURE__*/ (function () {\n    function WindowOperator(windowBoundaries) {\n        this.windowBoundaries = windowBoundaries;\n    }\n    WindowOperator.prototype.call = function (subscriber, source) {\n        var windowSubscriber = new WindowSubscriber(subscriber);\n        var sourceSubscription = source.subscribe(windowSubscriber);\n        if (!sourceSubscription.closed) {\n            windowSubscriber.add(subscribeToResult(windowSubscriber, this.windowBoundaries));\n        }\n        return sourceSubscription;\n    };\n    return WindowOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(WindowSubscriber, _super);\n    function WindowSubscriber(destination) {\n        var _this = _super.call(this, destination) || this;\n        _this.window = new Subject();\n        destination.next(_this.window);\n        return _this;\n    }\n    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.openWindow();\n    };\n    WindowSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    WindowSubscriber.prototype.notifyComplete = function (innerSub) {\n        this._complete();\n    };\n    WindowSubscriber.prototype._next = function (value) {\n        this.window.next(value);\n    };\n    WindowSubscriber.prototype._error = function (err) {\n        this.window.error(err);\n        this.destination.error(err);\n    };\n    WindowSubscriber.prototype._complete = function () {\n        this.window.complete();\n        this.destination.complete();\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    WindowSubscriber.prototype._unsubscribe = function () {\n        this.window = null;\n    };\n    WindowSubscriber.prototype.openWindow = function () {\n        var prevWindow = this.window;\n        if (prevWindow) {\n            prevWindow.complete();\n        }\n        var destination = this.destination;\n        var newWindow = this.window = new Subject();\n        destination.next(newWindow);\n    };\n    return WindowSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=window.js.map\n","/** PURE_IMPORTS_START tslib,_Subscriber,_Subject PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { Subject } from '../Subject';\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nexport function windowCount(windowSize, startWindowEvery) {\n    if (startWindowEvery === void 0) {\n        startWindowEvery = 0;\n    }\n    return function windowCountOperatorFunction(source) {\n        return source.lift(new WindowCountOperator(windowSize, startWindowEvery));\n    };\n}\nvar WindowCountOperator = /*@__PURE__*/ (function () {\n    function WindowCountOperator(windowSize, startWindowEvery) {\n        this.windowSize = windowSize;\n        this.startWindowEvery = startWindowEvery;\n    }\n    WindowCountOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n    };\n    return WindowCountOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowCountSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(WindowCountSubscriber, _super);\n    function WindowCountSubscriber(destination, windowSize, startWindowEvery) {\n        var _this = _super.call(this, destination) || this;\n        _this.destination = destination;\n        _this.windowSize = windowSize;\n        _this.startWindowEvery = startWindowEvery;\n        _this.windows = [new Subject()];\n        _this.count = 0;\n        destination.next(_this.windows[0]);\n        return _this;\n    }\n    WindowCountSubscriber.prototype._next = function (value) {\n        var startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n        var destination = this.destination;\n        var windowSize = this.windowSize;\n        var windows = this.windows;\n        var len = windows.length;\n        for (var i = 0; i < len && !this.closed; i++) {\n            windows[i].next(value);\n        }\n        var c = this.count - windowSize + 1;\n        if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n            windows.shift().complete();\n        }\n        if (++this.count % startWindowEvery === 0 && !this.closed) {\n            var window_1 = new Subject();\n            windows.push(window_1);\n            destination.next(window_1);\n        }\n    };\n    WindowCountSubscriber.prototype._error = function (err) {\n        var windows = this.windows;\n        if (windows) {\n            while (windows.length > 0 && !this.closed) {\n                windows.shift().error(err);\n            }\n        }\n        this.destination.error(err);\n    };\n    WindowCountSubscriber.prototype._complete = function () {\n        var windows = this.windows;\n        if (windows) {\n            while (windows.length > 0 && !this.closed) {\n                windows.shift().complete();\n            }\n        }\n        this.destination.complete();\n    };\n    WindowCountSubscriber.prototype._unsubscribe = function () {\n        this.count = 0;\n        this.windows = null;\n    };\n    return WindowCountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=windowCount.js.map\n","/** PURE_IMPORTS_START tslib,_Subject,_scheduler_async,_Subscriber,_util_isNumeric,_util_isScheduler PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nexport function windowTime(windowTimeSpan) {\n    var scheduler = async;\n    var windowCreationInterval = null;\n    var maxWindowSize = Number.POSITIVE_INFINITY;\n    if (isScheduler(arguments[3])) {\n        scheduler = arguments[3];\n    }\n    if (isScheduler(arguments[2])) {\n        scheduler = arguments[2];\n    }\n    else if (isNumeric(arguments[2])) {\n        maxWindowSize = arguments[2];\n    }\n    if (isScheduler(arguments[1])) {\n        scheduler = arguments[1];\n    }\n    else if (isNumeric(arguments[1])) {\n        windowCreationInterval = arguments[1];\n    }\n    return function windowTimeOperatorFunction(source) {\n        return source.lift(new WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));\n    };\n}\nvar WindowTimeOperator = /*@__PURE__*/ (function () {\n    function WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {\n        this.windowTimeSpan = windowTimeSpan;\n        this.windowCreationInterval = windowCreationInterval;\n        this.maxWindowSize = maxWindowSize;\n        this.scheduler = scheduler;\n    }\n    WindowTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowTimeSubscriber(subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler));\n    };\n    return WindowTimeOperator;\n}());\nvar CountedSubject = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(CountedSubject, _super);\n    function CountedSubject() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._numberOfNextedValues = 0;\n        return _this;\n    }\n    CountedSubject.prototype.next = function (value) {\n        this._numberOfNextedValues++;\n        _super.prototype.next.call(this, value);\n    };\n    Object.defineProperty(CountedSubject.prototype, \"numberOfNextedValues\", {\n        get: function () {\n            return this._numberOfNextedValues;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return CountedSubject;\n}(Subject));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowTimeSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(WindowTimeSubscriber, _super);\n    function WindowTimeSubscriber(destination, windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.destination = destination;\n        _this.windowTimeSpan = windowTimeSpan;\n        _this.windowCreationInterval = windowCreationInterval;\n        _this.maxWindowSize = maxWindowSize;\n        _this.scheduler = scheduler;\n        _this.windows = [];\n        var window = _this.openWindow();\n        if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n            var closeState = { subscriber: _this, window: window, context: null };\n            var creationState = { windowTimeSpan: windowTimeSpan, windowCreationInterval: windowCreationInterval, subscriber: _this, scheduler: scheduler };\n            _this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));\n            _this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));\n        }\n        else {\n            var timeSpanOnlyState = { subscriber: _this, window: window, windowTimeSpan: windowTimeSpan };\n            _this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));\n        }\n        return _this;\n    }\n    WindowTimeSubscriber.prototype._next = function (value) {\n        var windows = this.windows;\n        var len = windows.length;\n        for (var i = 0; i < len; i++) {\n            var window_1 = windows[i];\n            if (!window_1.closed) {\n                window_1.next(value);\n                if (window_1.numberOfNextedValues >= this.maxWindowSize) {\n                    this.closeWindow(window_1);\n                }\n            }\n        }\n    };\n    WindowTimeSubscriber.prototype._error = function (err) {\n        var windows = this.windows;\n        while (windows.length > 0) {\n            windows.shift().error(err);\n        }\n        this.destination.error(err);\n    };\n    WindowTimeSubscriber.prototype._complete = function () {\n        var windows = this.windows;\n        while (windows.length > 0) {\n            var window_2 = windows.shift();\n            if (!window_2.closed) {\n                window_2.complete();\n            }\n        }\n        this.destination.complete();\n    };\n    WindowTimeSubscriber.prototype.openWindow = function () {\n        var window = new CountedSubject();\n        this.windows.push(window);\n        var destination = this.destination;\n        destination.next(window);\n        return window;\n    };\n    WindowTimeSubscriber.prototype.closeWindow = function (window) {\n        window.complete();\n        var windows = this.windows;\n        windows.splice(windows.indexOf(window), 1);\n    };\n    return WindowTimeSubscriber;\n}(Subscriber));\nfunction dispatchWindowTimeSpanOnly(state) {\n    var subscriber = state.subscriber, windowTimeSpan = state.windowTimeSpan, window = state.window;\n    if (window) {\n        subscriber.closeWindow(window);\n    }\n    state.window = subscriber.openWindow();\n    this.schedule(state, windowTimeSpan);\n}\nfunction dispatchWindowCreation(state) {\n    var windowTimeSpan = state.windowTimeSpan, subscriber = state.subscriber, scheduler = state.scheduler, windowCreationInterval = state.windowCreationInterval;\n    var window = subscriber.openWindow();\n    var action = this;\n    var context = { action: action, subscription: null };\n    var timeSpanState = { subscriber: subscriber, window: window, context: context };\n    context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);\n    action.add(context.subscription);\n    action.schedule(state, windowCreationInterval);\n}\nfunction dispatchWindowClose(state) {\n    var subscriber = state.subscriber, window = state.window, context = state.context;\n    if (context && context.action && context.subscription) {\n        context.action.remove(context.subscription);\n    }\n    subscriber.closeWindow(window);\n}\n//# sourceMappingURL=windowTime.js.map\n","/** PURE_IMPORTS_START tslib,_Subject,_Subscription,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowToggle.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * @example <caption>Every other second, emit the click events from the next 500ms</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var openings = Rx.Observable.interval(1000);\n * var result = clicks.windowToggle(openings, i =>\n *   i % 2 ? Rx.Observable.interval(500) : Rx.Observable.empty()\n * ).mergeAll();\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits (either `next` or `complete`), signals that the\n * associated window should complete.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowToggle\n * @owner Observable\n */\nexport function windowToggle(openings, closingSelector) {\n    return function (source) { return source.lift(new WindowToggleOperator(openings, closingSelector)); };\n}\nvar WindowToggleOperator = /*@__PURE__*/ (function () {\n    function WindowToggleOperator(openings, closingSelector) {\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n    }\n    WindowToggleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));\n    };\n    return WindowToggleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowToggleSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(WindowToggleSubscriber, _super);\n    function WindowToggleSubscriber(destination, openings, closingSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.openings = openings;\n        _this.closingSelector = closingSelector;\n        _this.contexts = [];\n        _this.add(_this.openSubscription = subscribeToResult(_this, openings, openings));\n        return _this;\n    }\n    WindowToggleSubscriber.prototype._next = function (value) {\n        var contexts = this.contexts;\n        if (contexts) {\n            var len = contexts.length;\n            for (var i = 0; i < len; i++) {\n                contexts[i].window.next(value);\n            }\n        }\n    };\n    WindowToggleSubscriber.prototype._error = function (err) {\n        var contexts = this.contexts;\n        this.contexts = null;\n        if (contexts) {\n            var len = contexts.length;\n            var index = -1;\n            while (++index < len) {\n                var context_1 = contexts[index];\n                context_1.window.error(err);\n                context_1.subscription.unsubscribe();\n            }\n        }\n        _super.prototype._error.call(this, err);\n    };\n    WindowToggleSubscriber.prototype._complete = function () {\n        var contexts = this.contexts;\n        this.contexts = null;\n        if (contexts) {\n            var len = contexts.length;\n            var index = -1;\n            while (++index < len) {\n                var context_2 = contexts[index];\n                context_2.window.complete();\n                context_2.subscription.unsubscribe();\n            }\n        }\n        _super.prototype._complete.call(this);\n    };\n    /** @deprecated This is an internal implementation detail, do not use. */\n    WindowToggleSubscriber.prototype._unsubscribe = function () {\n        var contexts = this.contexts;\n        this.contexts = null;\n        if (contexts) {\n            var len = contexts.length;\n            var index = -1;\n            while (++index < len) {\n                var context_3 = contexts[index];\n                context_3.window.unsubscribe();\n                context_3.subscription.unsubscribe();\n            }\n        }\n    };\n    WindowToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (outerValue === this.openings) {\n            var closingSelector = this.closingSelector;\n            var closingNotifier = tryCatch(closingSelector)(innerValue);\n            if (closingNotifier === errorObject) {\n                return this.error(errorObject.e);\n            }\n            else {\n                var window_1 = new Subject();\n                var subscription = new Subscription();\n                var context_4 = { window: window_1, subscription: subscription };\n                this.contexts.push(context_4);\n                var innerSubscription = subscribeToResult(this, closingNotifier, context_4);\n                if (innerSubscription.closed) {\n                    this.closeWindow(this.contexts.length - 1);\n                }\n                else {\n                    innerSubscription.context = context_4;\n                    subscription.add(innerSubscription);\n                }\n                this.destination.next(window_1);\n            }\n        }\n        else {\n            this.closeWindow(this.contexts.indexOf(outerValue));\n        }\n    };\n    WindowToggleSubscriber.prototype.notifyError = function (err) {\n        this.error(err);\n    };\n    WindowToggleSubscriber.prototype.notifyComplete = function (inner) {\n        if (inner !== this.openSubscription) {\n            this.closeWindow(this.contexts.indexOf(inner.context));\n        }\n    };\n    WindowToggleSubscriber.prototype.closeWindow = function (index) {\n        if (index === -1) {\n            return;\n        }\n        var contexts = this.contexts;\n        var context = contexts[index];\n        var window = context.window, subscription = context.subscription;\n        contexts.splice(index, 1);\n        window.complete();\n        subscription.unsubscribe();\n    };\n    return WindowToggleSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=windowToggle.js.map\n","/** PURE_IMPORTS_START tslib,_Subject,_util_tryCatch,_util_errorObject,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowWhen.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * @example <caption>Emit only the first two clicks events in every window of [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks\n *   .windowWhen(() => Rx.Observable.interval(1000 + Math.random() * 4000))\n *   .map(win => win.take(2)) // each window has at most 2 emissions\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return {Observable<Observable<T>>} An observable of windows, which in turn\n * are Observables.\n * @method windowWhen\n * @owner Observable\n */\nexport function windowWhen(closingSelector) {\n    return function windowWhenOperatorFunction(source) {\n        return source.lift(new WindowOperator(closingSelector));\n    };\n}\nvar WindowOperator = /*@__PURE__*/ (function () {\n    function WindowOperator(closingSelector) {\n        this.closingSelector = closingSelector;\n    }\n    WindowOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));\n    };\n    return WindowOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(WindowSubscriber, _super);\n    function WindowSubscriber(destination, closingSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.destination = destination;\n        _this.closingSelector = closingSelector;\n        _this.openWindow();\n        return _this;\n    }\n    WindowSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.openWindow(innerSub);\n    };\n    WindowSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    WindowSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.openWindow(innerSub);\n    };\n    WindowSubscriber.prototype._next = function (value) {\n        this.window.next(value);\n    };\n    WindowSubscriber.prototype._error = function (err) {\n        this.window.error(err);\n        this.destination.error(err);\n        this.unsubscribeClosingNotification();\n    };\n    WindowSubscriber.prototype._complete = function () {\n        this.window.complete();\n        this.destination.complete();\n        this.unsubscribeClosingNotification();\n    };\n    WindowSubscriber.prototype.unsubscribeClosingNotification = function () {\n        if (this.closingNotification) {\n            this.closingNotification.unsubscribe();\n        }\n    };\n    WindowSubscriber.prototype.openWindow = function (innerSub) {\n        if (innerSub === void 0) {\n            innerSub = null;\n        }\n        if (innerSub) {\n            this.remove(innerSub);\n            innerSub.unsubscribe();\n        }\n        var prevWindow = this.window;\n        if (prevWindow) {\n            prevWindow.complete();\n        }\n        var window = this.window = new Subject();\n        this.destination.next(window);\n        var closingNotifier = tryCatch(this.closingSelector)();\n        if (closingNotifier === errorObject) {\n            var err = errorObject.e;\n            this.destination.error(err);\n            this.window.error(err);\n        }\n        else {\n            this.add(this.closingNotification = subscribeToResult(this, closingNotifier));\n        }\n    };\n    return WindowSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=windowWhen.js.map\n","/** PURE_IMPORTS_START tslib,_OuterSubscriber,_util_subscribeToResult PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/* tslint:enable:max-line-length */\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    return function (source) {\n        var project;\n        if (typeof args[args.length - 1] === 'function') {\n            project = args.pop();\n        }\n        var observables = args;\n        return source.lift(new WithLatestFromOperator(observables, project));\n    };\n}\nvar WithLatestFromOperator = /*@__PURE__*/ (function () {\n    function WithLatestFromOperator(observables, project) {\n        this.observables = observables;\n        this.project = project;\n    }\n    WithLatestFromOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n    };\n    return WithLatestFromOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WithLatestFromSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(WithLatestFromSubscriber, _super);\n    function WithLatestFromSubscriber(destination, observables, project) {\n        var _this = _super.call(this, destination) || this;\n        _this.observables = observables;\n        _this.project = project;\n        _this.toRespond = [];\n        var len = observables.length;\n        _this.values = new Array(len);\n        for (var i = 0; i < len; i++) {\n            _this.toRespond.push(i);\n        }\n        for (var i = 0; i < len; i++) {\n            var observable = observables[i];\n            _this.add(subscribeToResult(_this, observable, observable, i));\n        }\n        return _this;\n    }\n    WithLatestFromSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values[outerIndex] = innerValue;\n        var toRespond = this.toRespond;\n        if (toRespond.length > 0) {\n            var found = toRespond.indexOf(outerIndex);\n            if (found !== -1) {\n                toRespond.splice(found, 1);\n            }\n        }\n    };\n    WithLatestFromSubscriber.prototype.notifyComplete = function () {\n        // noop\n    };\n    WithLatestFromSubscriber.prototype._next = function (value) {\n        if (this.toRespond.length === 0) {\n            var args = [value].concat(this.values);\n            if (this.project) {\n                this._tryProject(args);\n            }\n            else {\n                this.destination.next(args);\n            }\n        }\n    };\n    WithLatestFromSubscriber.prototype._tryProject = function (args) {\n        var result;\n        try {\n            result = this.project.apply(this, args);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return WithLatestFromSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=withLatestFrom.js.map\n","/** PURE_IMPORTS_START tslib,_fromArray,_util_isArray,_Subscriber,_OuterSubscriber,_util_subscribeToResult,_.._internal_symbol_iterator PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { fromArray } from './fromArray';\nimport { isArray } from '../util/isArray';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { iterator as Symbol_iterator } from '../../internal/symbol/iterator';\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the latest parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * @example <caption>Combine age and name from different sources</caption>\n *\n * let age$ = Observable.of<number>(27, 25, 29);\n * let name$ = Observable.of<string>('Foo', 'Bar', 'Beer');\n * let isDev$ = Observable.of<boolean>(true, true, false);\n *\n * Observable\n *     .zip(age$,\n *          name$,\n *          isDev$,\n *          (age: number, name: string, isDev: boolean) => ({ age, name, isDev }))\n *     .subscribe(x => console.log(x));\n *\n * // outputs\n * // { age: 27, name: 'Foo', isDev: true }\n * // { age: 25, name: 'Bar', isDev: true }\n * // { age: 29, name: 'Beer', isDev: false }\n *\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nexport function zip() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i] = arguments[_i];\n    }\n    var resultSelector = observables[observables.length - 1];\n    if (typeof resultSelector === 'function') {\n        observables.pop();\n    }\n    return fromArray(observables, undefined).lift(new ZipOperator(resultSelector));\n}\nvar ZipOperator = /*@__PURE__*/ (function () {\n    function ZipOperator(resultSelector) {\n        this.resultSelector = resultSelector;\n    }\n    ZipOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ZipSubscriber(subscriber, this.resultSelector));\n    };\n    return ZipOperator;\n}());\nexport { ZipOperator };\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ZipSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ZipSubscriber, _super);\n    function ZipSubscriber(destination, resultSelector, values) {\n        if (values === void 0) {\n            values = Object.create(null);\n        }\n        var _this = _super.call(this, destination) || this;\n        _this.iterators = [];\n        _this.active = 0;\n        _this.resultSelector = (typeof resultSelector === 'function') ? resultSelector : null;\n        _this.values = values;\n        return _this;\n    }\n    ZipSubscriber.prototype._next = function (value) {\n        var iterators = this.iterators;\n        if (isArray(value)) {\n            iterators.push(new StaticArrayIterator(value));\n        }\n        else if (typeof value[Symbol_iterator] === 'function') {\n            iterators.push(new StaticIterator(value[Symbol_iterator]()));\n        }\n        else {\n            iterators.push(new ZipBufferIterator(this.destination, this, value));\n        }\n    };\n    ZipSubscriber.prototype._complete = function () {\n        var iterators = this.iterators;\n        var len = iterators.length;\n        if (len === 0) {\n            this.destination.complete();\n            return;\n        }\n        this.active = len;\n        for (var i = 0; i < len; i++) {\n            var iterator = iterators[i];\n            if (iterator.stillUnsubscribed) {\n                this.add(iterator.subscribe(iterator, i));\n            }\n            else {\n                this.active--; // not an observable\n            }\n        }\n    };\n    ZipSubscriber.prototype.notifyInactive = function () {\n        this.active--;\n        if (this.active === 0) {\n            this.destination.complete();\n        }\n    };\n    ZipSubscriber.prototype.checkIterators = function () {\n        var iterators = this.iterators;\n        var len = iterators.length;\n        var destination = this.destination;\n        // abort if not all of them have values\n        for (var i = 0; i < len; i++) {\n            var iterator = iterators[i];\n            if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n                return;\n            }\n        }\n        var shouldComplete = false;\n        var args = [];\n        for (var i = 0; i < len; i++) {\n            var iterator = iterators[i];\n            var result = iterator.next();\n            // check to see if it's completed now that you've gotten\n            // the next value.\n            if (iterator.hasCompleted()) {\n                shouldComplete = true;\n            }\n            if (result.done) {\n                destination.complete();\n                return;\n            }\n            args.push(result.value);\n        }\n        if (this.resultSelector) {\n            this._tryresultSelector(args);\n        }\n        else {\n            destination.next(args);\n        }\n        if (shouldComplete) {\n            destination.complete();\n        }\n    };\n    ZipSubscriber.prototype._tryresultSelector = function (args) {\n        var result;\n        try {\n            result = this.resultSelector.apply(this, args);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return ZipSubscriber;\n}(Subscriber));\nexport { ZipSubscriber };\nvar StaticIterator = /*@__PURE__*/ (function () {\n    function StaticIterator(iterator) {\n        this.iterator = iterator;\n        this.nextResult = iterator.next();\n    }\n    StaticIterator.prototype.hasValue = function () {\n        return true;\n    };\n    StaticIterator.prototype.next = function () {\n        var result = this.nextResult;\n        this.nextResult = this.iterator.next();\n        return result;\n    };\n    StaticIterator.prototype.hasCompleted = function () {\n        var nextResult = this.nextResult;\n        return nextResult && nextResult.done;\n    };\n    return StaticIterator;\n}());\nvar StaticArrayIterator = /*@__PURE__*/ (function () {\n    function StaticArrayIterator(array) {\n        this.array = array;\n        this.index = 0;\n        this.length = 0;\n        this.length = array.length;\n    }\n    StaticArrayIterator.prototype[Symbol_iterator] = function () {\n        return this;\n    };\n    StaticArrayIterator.prototype.next = function (value) {\n        var i = this.index++;\n        var array = this.array;\n        return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n    };\n    StaticArrayIterator.prototype.hasValue = function () {\n        return this.array.length > this.index;\n    };\n    StaticArrayIterator.prototype.hasCompleted = function () {\n        return this.array.length === this.index;\n    };\n    return StaticArrayIterator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ZipBufferIterator = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ZipBufferIterator, _super);\n    function ZipBufferIterator(destination, parent, observable) {\n        var _this = _super.call(this, destination) || this;\n        _this.parent = parent;\n        _this.observable = observable;\n        _this.stillUnsubscribed = true;\n        _this.buffer = [];\n        _this.isComplete = false;\n        return _this;\n    }\n    ZipBufferIterator.prototype[Symbol_iterator] = function () {\n        return this;\n    };\n    // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n    //    this is legit because `next()` will never be called by a subscription in this case.\n    ZipBufferIterator.prototype.next = function () {\n        var buffer = this.buffer;\n        if (buffer.length === 0 && this.isComplete) {\n            return { value: null, done: true };\n        }\n        else {\n            return { value: buffer.shift(), done: false };\n        }\n    };\n    ZipBufferIterator.prototype.hasValue = function () {\n        return this.buffer.length > 0;\n    };\n    ZipBufferIterator.prototype.hasCompleted = function () {\n        return this.buffer.length === 0 && this.isComplete;\n    };\n    ZipBufferIterator.prototype.notifyComplete = function () {\n        if (this.buffer.length > 0) {\n            this.isComplete = true;\n            this.parent.notifyInactive();\n        }\n        else {\n            this.destination.complete();\n        }\n    };\n    ZipBufferIterator.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.buffer.push(innerValue);\n        this.parent.checkIterators();\n    };\n    ZipBufferIterator.prototype.subscribe = function (value, index) {\n        return subscribeToResult(this, this.observable, this, index);\n    };\n    return ZipBufferIterator;\n}(OuterSubscriber));\n//# sourceMappingURL=zip.js.map\n","import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\r\nimport { JoyrideStepService } from \"./joyride-step.service\";\r\nimport { JoyrideOptionsService } from './joyride-options.service';\r\nimport { JoyrideOptions } from '../models/joyride-options.class';\r\nimport { Observable, of } from 'rxjs';\r\nimport { finalize } from \"rxjs/operators\";\r\nimport { JoyrideStepInfo } from '../models/joyride-step-info.class';\r\nimport { isPlatformBrowser } from '@angular/common';\r\n\r\n@Injectable()\r\nexport class JoyrideService {\r\n\r\n    private tourInProgress: boolean = false;\r\n    private tour$: Observable<JoyrideStepInfo>;\r\n\r\n    constructor(\r\n        @Inject(PLATFORM_ID) private platformId: Object,\r\n        private readonly stepService: JoyrideStepService,\r\n        private readonly optionsService: JoyrideOptionsService\r\n    ) { }\r\n\r\n    startTour(options?: JoyrideOptions): Observable<JoyrideStepInfo> {\r\n        if (!isPlatformBrowser(this.platformId)) {\r\n            return of(new JoyrideStepInfo());\r\n        }\r\n        if (!this.tourInProgress) {\r\n            this.tourInProgress = true;\r\n            if (options) {\r\n                this.optionsService.setOptions(options);\r\n            }\r\n            this.tour$ = this.stepService.startTour().pipe(\r\n                finalize(() => this.tourInProgress = false));\r\n            this.tour$.subscribe();\r\n        }\r\n        return this.tour$;\r\n    }\r\n\r\n    isTourInProgress(): boolean {\r\n        return this.tourInProgress;\r\n    }\r\n\r\n}","import { Component, Input, EventEmitter, Output } from \"@angular/core\";\r\n\r\n@Component({\r\n    selector: 'joyride-button',\r\n    templateUrl: './button.component.html',\r\n    styleUrls: ['./button.component.scss']\r\n})\r\nexport class JoyrideButtonComponent {\r\n    hover: boolean;\r\n    \r\n    @Input() \r\n    color: string;\r\n    \r\n    @Output()\r\n    clicked: EventEmitter<any> = new EventEmitter();\r\n\r\n    onClick() {\r\n        this.clicked.emit();\r\n    }\r\n}","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'joy-close-button',\r\n    template: `<svg viewBox=\"0 0 25 25\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <line x1=\"1\" y1=\"24\" \r\n                    x2=\"24\" y2=\"1\" \r\n                    stroke=\"black\" \r\n                    stroke-width=\"3\"/>\r\n                <line x1=\"1\" y1=\"1\" \r\n                    x2=\"24\" y2=\"24\" \r\n                    stroke=\"black\" \r\n                    stroke-width=\"3\"/>\r\n            </svg>`\r\n})\r\n\r\nexport class JoyrideCloseButtonComponent { }","\r\nimport { Component, Input, ViewEncapsulation } from \"@angular/core\";\r\n\r\n@Component({\r\n    selector: 'joyride-arrow',\r\n    templateUrl: './arrow.component.html',\r\n    styleUrls: ['./arrow.component.scss'],\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class JoyrideArrowComponent {\r\n    @Input()\r\n    position: string = 'top';\r\n}","import { NgModule, ModuleWithProviders } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { JoyrideDirective } from './directives/joyride.directive';\r\nimport { JoyrideService } from './services/joyride.service';\r\nimport { JoyrideStepComponent } from \"./components/step/joyride-step.component\";\r\nimport { JoyrideButtonComponent } from \"./components/button/button.component\";\r\nimport { JoyrideCloseButtonComponent } from \"./components/close-button/close-button.component\";\r\nimport { JoyrideStepService } from \"./services/joyride-step.service\";\r\nimport { JoyrideBackdropService } from \"./services/joyride-backdrop.service\";\r\nimport { JoyrideArrowComponent } from \"./components/arrow/arrow.component\";\r\nimport { EventListenerService } from \"./services/event-listener.service\";\r\nimport { JoyrideStepsContainerService } from \"./services/joyride-steps-container.service\";\r\nimport { DocumentService } from \"./services/document.service\";\r\nimport { JoyrideOptionsService } from './services/joyride-options.service';\r\nimport { StepDrawerService } from './services/step-drawer.service';\r\nimport { DomRefService } from './services/dom.service';\r\nimport { LoggerService } from './services/logger.service';\r\nimport { RouterModule } from \"@angular/router\";\r\n\r\nexport const routerModuleForChild: ModuleWithProviders = RouterModule.forChild([]);\r\n\r\n@NgModule({\r\n    imports: [CommonModule, routerModuleForChild],\r\n    declarations: [\r\n        JoyrideDirective,\r\n        JoyrideStepComponent,\r\n        JoyrideArrowComponent,\r\n        JoyrideButtonComponent,\r\n        JoyrideCloseButtonComponent\r\n    ],\r\n    entryComponents: [JoyrideStepComponent],\r\n    exports: [\r\n        JoyrideDirective\r\n    ]\r\n})\r\nexport class JoyrideModule {\r\n    static forRoot(): ModuleWithProviders {\r\n        return {\r\n            ngModule: JoyrideModule,\r\n            providers: [\r\n                JoyrideService,\r\n                JoyrideStepService,\r\n                JoyrideStepsContainerService,\r\n                JoyrideBackdropService,\r\n                EventListenerService,\r\n                DocumentService,\r\n                JoyrideOptionsService,\r\n                StepDrawerService,\r\n                DomRefService,\r\n                LoggerService\r\n            ]\r\n        }\r\n    }\r\n    static forChild(): ModuleWithProviders {\r\n        return {\r\n            ngModule: JoyrideModule,\r\n            providers: []\r\n        }\r\n    }\r\n}\r\n"],"names":["DEFAULT_THEME_COLOR","THEME_COLOR","STEP_DEFAULT_POSITION","JoyrideOptionsService","[object Object]","this","options","stepsOrder","steps","stepDefaultPosition","logsEnabled","showCounter","showPrevButton","themeColor","hexToRgb","hex","replace","m","r","g","b","result","exec","parseInt","Injectable","ROUTE_SEPARATOR","JoyrideStepsContainerService","stepOptions","Subject","stepsOriginal","index","stepID","getStepsOrder","includes","split","step","getStepIndex","stepToAdd","filter","name","length","stepIndexToReplace","findIndex","push","position","stepHasBeenModified","next","forEach","sortSteps","orderedSteps","find","getStepName","s","route","Error","DomRefService","platformId","body","documentElement","document","fakeDocument","isPlatformBrowser","window","fakeWindow","__param","Inject","PLATFORM_ID","Object","NO_POSITION","JoyrideDirective","joyrideStepsContainer","viewContainerRef","domService","router","EventEmitter","windowRef","getNativeWindow","JoyrideStep","stepPosition","targetViewContainer","text","title","stepContent","stepContentParams","nextClicked","prevCliked","prev","tourDone","done","JoyrideError","url","substr","transformCssStyle","getComputedStyle","element","nativeElement","transform","isElementOrAncestorFixed","isElementFixed","isAncestorsFixed","parentElement","addStep","nodeName","__decorate","Input","TemplateRef","Output","Directive","selector","ViewContainerRef","Router","DocumentService","DOMService","setDocumentHeight","elementRef","getBoundingClientRect","top","left","scrollOffsets","getScrollOffsets","y","x","right","documentHeight","calculateDocumentHeight","doc","getNativeDocument","Math","max","scrollHeight","offsetHeight","clientHeight","w","pageXOffset","pageYOffset","d","compatMode","scrollLeft","scrollTop","JoyrideBackdropService","documentService","optionsService","rendererFactory","setRenderer","renderer","createRenderer","targetAbsoluteTop","getTargetTotalTop","targetAbsoluteLeft","getTargetTotalLeft","backdropContainer","createElement","addClass","setStyle","appendChild","backdropContent","backdropTop","lastYScroll","getBackdropColor","backdropMiddleContainer","backdropMiddleContent","leftBackdrop","lastXScroll","targetBackdrop","offsetWidth","rightBackdrop","backdropBottom","removeBackdrop","undefined","handleVerticalScroll","handleHorizontalScroll","targetVC","getElementFixedTop","getElementAbsoluteTop","getElementFixedLeft","getElementAbsoluteLeft","scroll","scrollY","scrollX","newBackdropLeftWidth","handleTargetPartialWidth","visibleTargetWidth","newBackdropTopHeight","handleTargetPartialHeight","visibleTargetHeight","removeChild","RendererFactory2","EventListenerService","scrollUnlisten","listen","evt","scrollEvent","resizeUnlisten","resizeEvent","JOYRIDE","LoggerService","optionService","message","data","areLogsEnabled","console","debug","info","warn","error","STEP_MIN_WIDTH","STEP_MAX_WIDTH","STEP_HEIGHT","ASPECT_RATIO","DEFAULT_DISTANCE_FROM_MARGIN_TOP","DEFAULT_DISTANCE_FROM_MARGIN_LEFT","DEFAULT_DISTANCE_FROM_MARGIN_BOTTOM","DEFAULT_DISTANCE_FROM_MARGIN_RIGHT","JoyrideStepComponent","injector","stepsContainerService","eventListenerService","logger","ARROW_SIZE","joyrideStepService","get","JoyrideStepService","getDocumentHeight","subscriptions","subscribeToResizeEvents","customContent","ctx","counter","getCounter","isCounterVisible","isPrevButtonVisible","getThemeColor","stepWidth","stepContainer","clientWidth","stepHeight","dimensions","getDimensionsByAspectRatio","adjustDimensions","width","height","drawStep","stepHolder","targetWidth","targetHeight","setStepStyle","getStepPosition","getNumberOfSteps","close","isFirstStep","isLastStep","setStyleTop","setStyleBottom","setStyleRight","setStyleLeft","setStyleCenter","setPosition","topPosition","DISTANCE_FROM_TARGET","stepAbsoluteTop","arrowTopPosition","leftPosition","stepAbsoluteLeft","arrowLeftPosition","arrowSize","adjustLeftPosition","adjustRightPosition","arrowPosition","autofixTopPosition","adjustTopPosition","adjustBottomPosition","autofixRightPosition","autofixBottomPosition","autofixLeftPosition","showArrow","currentWindowWidth","newLeftPos","deltaLeftPosition","newTopPos","deltaTopPosition","positionAlreadyFixed","subscribe","aspectRatio","calcHeight","newWidth","newHeight","subscription","unsubscribe","ViewChild","ElementRef","Injector","Renderer2","StepDrawerService","componentFactoryResolver","appRef","resolveComponentFactory","ref","create","attachView","hostView","domElem","rootNodes","instance","changeDetectorRef","detectChanges","stepInstance","mappa","detachView","destroy","ComponentFactoryResolver","ApplicationRef","SCROLLBAR_SIZE","backDropService","eventListener","stepDrawerService","ReplaySubject","initViewportPositions","subscribeToScrollEvents","winTopPosition","winBottomPosition","innerHeight","startListeningScrollEvents","redraw","currentStep","redrawTarget","getStepDefaultPosition","draw","stepsObserver","currentStepIndex","navigateToStepPage","showStep","startListeningResizeEvents","subscribeToStepsUpdates","asObservable","removeCurrentStep","notifyTourIsFinished","scrollTo","stopListeningResizeEvents","emit","stepRoute","getStepRoute","navigate","updatedStep","action","setTimeout","initSteps","show","scrollIfTargetNotVisible","notifyStepClicked","stepInfo","number","actionType","complete","hide","remove","scrollWhenTargetIsHiddenBottom","scrollWhenTargetIsHiddenTop","totalTargetBottom","getTotalTargetBottomPosition","scrollBy","totalTargetTop","getTotalTargetTopPosition","min","extendStatics","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","prototype","tryCatchTarget","errorObject","e","tryCatcher","apply","arguments","tryCatch","fn","isFunction","_enable_super_gross_mode_that_will_cause_bad_things","config","Promise","useDeprecatedSynchronousErrorHandling","value","stack","hostReportError","err","empty","closed","isArray","isObject","UnsubscriptionError","_super","errors","_this","call","map","i","toString","join","tslib_1.__extends","Subscription","_parent","_parents","_subscriptions","_unsubscribe","hasErrors","len","flattenUnsubscriptionErrors","sub","concat","add","teardown","EMPTY","_addParent","tmp","subscriptionIndex","indexOf","splice","parent","reduce","errs","rxSubscriber","Symbol","for","Subscriber","destinationOrNext","syncErrorValue","syncErrorThrown","syncErrorThrowable","isStopped","destination","emptyObserver","isTrustedSubscriber","trustedSubscriber","rxSubscriberSymbol","SafeSubscriber","subscriber","_next","_error","_complete","_unsubscribeAndRecycle","_parentSubscriber","observerOrNext","context","bind","_context","__tryOrSetError","__tryOrUnsub","wrappedComplete","obj","OuterSubscriber","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","notifyError","notifyComplete","InnerSubscriber","toSubscriber","nextOrObserver","observable","noop","pipeFromArray","fns","input","Observable","_isScalar","_subscribe","lift","operator","source","sink","_trySubscribe","promiseCtor","getPromiseCtor","resolve","reject","Symbol_observable","pipe","operations","_i","toPromise","subscribeToArray","array","subscribeToPromise","promise","then","getSymbolIterator","iterator","subscribeToIterable","iterable","Symbol_iterator","item","return","subscribeToObservable","obs","TypeError","isArrayLike","isPromise","subscribeTo","subscribeToResult","outerSubscriber","AuditSubscriber","durationSelector","hasValue","throttled","duration","innerSubscription","clearThrottle","Action","scheduler","work","schedule","state","delay","AsyncAction","pending","id","recycleAsyncId","requestAsyncId","setInterval","flush","clearInterval","execute","_execute","errored","errorValue","actions","Scheduler","SchedulerAction","now","Date","AsyncScheduler","delegate","active","scheduled","shift","async","isNumeric","val","parseFloat","isScheduler","BufferSubscriber","closingNotifier","buffer","BufferCountSubscriber","bufferSize","BufferSkipCountSubscriber","startBufferEvery","buffers","count","Context","BufferTimeSubscriber","bufferTimeSpan","bufferCreationInterval","maxBufferSize","contexts","openContext","timespanOnly","timeSpanOnlyState","closeAction","dispatchBufferTimeSpanOnly","closeState","creationState","dispatchBufferClose","dispatchBufferCreation","filledBufferContext","context_1","onBufferFull","context_2","closeContext","prevContext","arg","BufferToggleSubscriber","openings","closingSelector","closeBuffer","openBuffer","trySubscribe","BufferWhenSubscriber","subscribing","closingSubscription","CatchSubscriber","caught","err2","fromArray","NONE","CombineLatestSubscriber","resultSelector","values","observables","toRespond","unused","oldVal","_tryResultSelector","slice","emptyScheduled","scalar","of","args","pop","MapSubscriber","project","thisArg","MergeMapSubscriber","concurrent","Number","POSITIVE_INFINITY","hasCompleted","_tryNext","_innerSub","ish","CountSubscriber","predicate","_tryPredicate","DebounceSubscriber","durationSubscription","emitValue","DebounceTimeSubscriber","dueTime","debouncedSubscription","lastValue","clearDebounce","dispatchNext","debouncedNext","DefaultIfEmptySubscriber","defaultValue","isEmpty","throwError","dispatch","_a","Notification","kind","observe","observer","do","accept","toObservable","createNext","undefinedValueNotification","createError","createComplete","completeNotification","DelaySubscriber","queue","time","notification","delay_1","_schedule","scheduleNotification","DelayMessage","DelayWhenSubscriber","delayDurationSelector","completed","delayNotifierSubscriptions","removeSubscription","tryComplete","delayNotifier","tryDelay","subscriptionIdx","notifierSubscription","SubscriptionDelayObservable","subscriptionDelay","SubscriptionDelaySubscriber","sourceSubscribed","subscribeToSource","DeMaterializeSubscriber","DistinctSubscriber","keySelector","flushes","Set","clear","_useKeySelector","_finalizeNext","key","has","DistinctUntilChangedSubscriber","compare","hasKey","Boolean","ArgumentOutOfRangeError","FilterSubscriber","TapSubscriber","_tapNext","_tapError","_tapComplete","EmptyError","TakeSubscriber","total","EverySubscriber","everyValueMatch","SwitchFirstSubscriber","hasSubscription","ExhaustMapSubscriber","tryNext","ExpandSubscriber","subscribeToProjection","finalize","callback","FinallyOperator","FinallySubscriber","FindValueSubscriber","yieldIndex","ObjectUnsubscribedError","SubjectSubscription","subject","observers","subscriberIndex","SubjectSubscriber","hasError","thrownError","AnonymousSubject","copy","GroupBySubscriber","elementSelector","subjectSelector","groups","attemptedToUnsubscribe","_group","Map","group","set","groupedObservable","GroupedObservable","GroupDurationSubscriber","removeGroup","delete","groupSubject","refCountSubscription","InnerRefCountSubscription","IgnoreElementsSubscriber","IsEmptySubscriber","TakeLastSubscriber","ring","idx","MapToSubscriber","MaterializeSubscriber","ScanSubscriber","accumulator","_seed","hasSeed","defineProperty","enumerable","configurable","seed","MergeScanSubscriber","acc","refCount","RefCountOperator","connectable","_refCount","refCounter","RefCountSubscriber","connection","connect","sharedConnection","_connection","ConnectableObservable","subjectFactory","_isComplete","getSubject","_subject","ConnectableSubscriber","higherOrderRefCount","ObserveOnSubscriber","scheduleMessage","ObserveOnMessage","OnErrorResumeNextSubscriber","nextSources","subscribeToNextSource","PairwiseSubscriber","hasPrev","BehaviorSubject","_value","getValue","AsyncSubject","hasNext","QueueAction","QueueScheduler","windowTime","_events","_infiniteTimeWindow","_bufferSize","_windowTime","nextInfiniteTimeWindow","nextTimeWindow","ReplayEvent","_getNow","_trimBufferThenGetEvents","eventsCount","spliceCount","RaceSubscriber","hasFirst","RepeatSubscriber","RepeatWhenSubscriber","notifier","sourceIsBeingSubscribedTo","retries","subscribeToRetries","retriesSubscription","notifications","RetrySubscriber","RetryWhenSubscriber","SampleSubscriber","SampleTimeSubscriber","period","dispatchNotification","SequenceEqualSubscriber","compareTo","comparor","_b","_oneComplete","SequenceEqualCompareToSubscriber","checkValues","a","areEqual","nextB","SingleSubscriber","seenValue","applySingleValue","singleValue","SkipSubscriber","SkipLastSubscriber","_skipCount","_count","_ring","skipCount","currentIndex","oldValue","SkipUntilSubscriber","SkipWhileSubscriber","skipping","tryCallPredicate","nextHandle","tasksByHandle","runIfPresent","handle","cb","Immediate","setImmediate","clearImmediate","AsapAction","AsapScheduler","asap","SubscribeOnObservable","delayTime","SwitchMapSubscriber","TakeUntilSubscriber","TakeWhileSubscriber","nextOrComplete","predicateResult","ThrottleSubscriber","_leading","_trailing","_hasValue","_sendValue","_throttled","send","throttle","tryDurationSelector","throttlingDone","ThrottleTimeSubscriber","leading","trailing","_hasTrailingValue","_trailingValue","TimeoutError","TimeoutWithSubscriber","absoluteTimeout","waitFor","withObservable","scheduleTimeout","dispatchTimeout","WindowSubscriber","openWindow","prevWindow","newWindow","WindowCountSubscriber","windowSize","startWindowEvery","windows","c","window_1","CountedSubject","_numberOfNextedValues","WindowTimeSubscriber","windowTimeSpan","windowCreationInterval","maxWindowSize","dispatchWindowClose","dispatchWindowCreation","dispatchWindowTimeSpanOnly","numberOfNextedValues","closeWindow","window_2","timeSpanState","WindowToggleSubscriber","openSubscription","context_3","context_4","inner","unsubscribeClosingNotification","closingNotification","WithLatestFromSubscriber","found","_tryProject","ZipSubscriber","iterators","StaticArrayIterator","StaticIterator","ZipBufferIterator","stillUnsubscribed","notifyInactive","checkIterators","shouldComplete","_tryresultSelector","nextResult","isComplete","JoyrideService","stepService","tourInProgress","setOptions","tour$","startTour","JoyrideStepInfo","JoyrideButtonComponent","clicked","JoyrideCloseButtonComponent","Component","template","JoyrideArrowComponent","routerModuleForChild","RouterModule","forChild","JoyrideModule","ngModule","JoyrideModule_1","providers","NgModule","imports","CommonModule","declarations","entryComponents","exports"],"mappings":"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"}