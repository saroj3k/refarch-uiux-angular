import { NgModule, Injectable, Component, EventEmitter, Output, Inject, Input } from '@angular/core';
import { CommonModule } from '@angular/common';
import { MatToolbarModule, MatSidenavModule, MatButtonModule, MatIconModule, MatListModule, MatMenuModule, MatTooltipModule, MatExpansionModule, MatDialogModule, MatFormFieldModule, MatInputModule, MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';
import { RouterModule } from '@angular/router';
import { JoyrideService, JoyrideModule } from 'ngx-joyride';
import { FlexLayoutModule } from '@angular/flex-layout';
import { FormsModule } from '@angular/forms';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class MaterialModule {
}
MaterialModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    MatToolbarModule,
                    MatButtonModule,
                    MatSidenavModule,
                    MatIconModule,
                    MatListModule,
                    MatMenuModule,
                    MatTooltipModule,
                    MatExpansionModule,
                    MatDialogModule,
                    MatFormFieldModule,
                    MatInputModule
                ],
                exports: [
                    MatToolbarModule,
                    MatSidenavModule,
                    MatButtonModule,
                    MatIconModule,
                    MatListModule,
                    MatMenuModule,
                    MatTooltipModule,
                    MatExpansionModule,
                    MatDialogModule,
                    MatFormFieldModule,
                    MatInputModule
                ],
                declarations: []
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
const /** @type {?} */ routes = [];
class AppRoutingModule {
}
AppRoutingModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    RouterModule.forRoot(routes)
                ],
                exports: [RouterModule],
                declarations: []
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ODJoyrideService {
    constructor() {
        this.steps = [];
    }
}
ODJoyrideService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
ODJoyrideService.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class HeaderService {
    constructor() {
        this.applicationNavList = [];
        this.pageList = [];
    }
}
HeaderService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
HeaderService.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class SidenavListComponent {
    /**
     * @param {?} joyrideService
     * @param {?} dialog
     * @param {?} oDJoyrideService
     * @param {?} headerService
     */
    constructor(joyrideService, dialog, oDJoyrideService, headerService) {
        this.joyrideService = joyrideService;
        this.dialog = dialog;
        this.oDJoyrideService = oDJoyrideService;
        this.headerService = headerService;
        this.closeSidenav = new EventEmitter();
    }
    /**
     * @return {?}
     */
    onClose() {
        this.closeSidenav.emit();
    }
    /**
     * @return {?}
     */
    startJoyride() {
        this.onClose();
        this.joyrideService.startTour({
            steps: this.oDJoyrideService.steps,
            stepDefaultPosition: 'bottom'
        } // Your steps order
        );
    }
    /**
     * @return {?}
     */
    openServiceTicketDialog() {
        this.dialog.open(ServiceTicketDialog, {
            width: '500px'
        });
    }
}
SidenavListComponent.decorators = [
    { type: Component, args: [{
                selector: 'od-internal-header-sidenav-list',
                template: `<mat-nav-list>
  <a mat-list-item (click)="onClose()">
    <mat-icon>
      arrow_forward_ios
    </mat-icon>
    <span class="nav-caption">Close</span>
  </a>

  <mat-accordion>
    <mat-expansion-panel fxHide.gt-sm *ngIf="headerService.pageList.length > 0">
      <mat-expansion-panel-header>
        Links
      </mat-expansion-panel-header>
      <div *ngFor="let page of headerService.pageList">
          <a routerLink={{page.routerLink}} mat-list-item (click)="onClose()">
              <span class="nav-caption ">
              {{page.title}}
              </span>
          </a>
      </div>
    </mat-expansion-panel>

    <mat-expansion-panel *ngIf="headerService.applicationNavList.length > 0">
      <mat-expansion-panel-header>
        <mat-panel-title>
          {{headerService.applicationGroupTitle}}
        </mat-panel-title>
      </mat-expansion-panel-header>
      <div *ngFor="let app of headerService.applicationNavList">

        <a href="{{app.url}}" mat-list-item (click)="onClose()">

          <span class="nav-caption ">
            <span class="fa-stack">
              <div *ngFor="let icon of app.icons">
                <i class="fa {{icon}}"></i>
              </div>
            </span>
            {{app.title}}</span>
        </a>
      </div>
    </mat-expansion-panel>

    <mat-expansion-panel>
      <mat-expansion-panel-header>
        <mat-panel-title>
          Help
        </mat-panel-title>
      </mat-expansion-panel-header>
      <a mat-list-item (click)="openServiceTicketDialog()">
        <mat-icon>local_hospital</mat-icon>
        Service Desk Ticket
      </a>

      <a mat-list-item (click)="startJoyride()">
        <mat-icon>child_care</mat-icon>
        Tutorial
      </a>
    </mat-expansion-panel>
  </mat-accordion>
</mat-nav-list>`,
                styles: [`a{text-decoration:none;color:#fff}a:active,a:hover{color:#d3d3d3}.nav-caption{display:inline-block;padding-left:6px}.mat-nav-list .mat-list-item:hover,mat-expansion-panel:hover{color:#fff}`]
            },] },
];
/** @nocollapse */
SidenavListComponent.ctorParameters = () => [
    { type: JoyrideService },
    { type: MatDialog },
    { type: ODJoyrideService },
    { type: HeaderService }
];
SidenavListComponent.propDecorators = {
    closeSidenav: [{ type: Output, args: ["closeSidenav",] }]
};
class ServiceTicketDialog {
    /**
     * @param {?} dialogRef
     * @param {?} data
     */
    constructor(dialogRef, data) {
        this.dialogRef = dialogRef;
        this.data = data;
    }
    /**
     * @return {?}
     */
    onNoClick() {
        this.dialogRef.close();
    }
    /**
     * @param {?} form
     * @return {?}
     */
    onSubmit(form) {
        console.log(form);
    }
}
ServiceTicketDialog.decorators = [
    { type: Component, args: [{
                selector: 'service-ticket-dialog',
                template: `<div class="container" fxLayout="column"  fxLayoutWrap fxLayoutGap="10px" fxLayoutAlign="center stretch">
    <div fxLayoutAlign="center center">
        <h2>Service Desk Ticket</h2>
    </div>
    <div>
        <form #f="ngForm" (ngSubmit)="onSubmit(f)">
            <div fxLayoutAlign="center stretch">
            <mat-form-field fxFlex="100%">
                <textarea name="serviceArea" ngModel matInput placeholder="Please enter your questions or comments" required></textarea>
            </mat-form-field>
            </div>
            <div fxLayoutAlign="center center">
                <button type="submit" mat-raised-button color="primary" [disabled]="f.invalid">Submit</button>
            </div>
        </form>
    </div>
</div>`,
            },] },
];
/** @nocollapse */
ServiceTicketDialog.ctorParameters = () => [
    { type: MatDialogRef },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class HeaderComponent {
    constructor() { }
}
HeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'header',
                template: `
    <mat-sidenav #sidenav role="navigation" position="end">
        <od-internal-header-sidenav-list (closeSidenav)="sidenav.close()"></od-internal-header-sidenav-list>
    </mat-sidenav>
    <mat-sidenav-content role="main">
       <od-internal-header-topbar (sidenavToggle)="sidenav.toggle()"></od-internal-header-topbar>
        <router-outlet></router-outlet>
    </mat-sidenav-content>

`,
                styles: [``]
            },] },
];
/** @nocollapse */
HeaderComponent.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class TopbarComponent {
    /**
     * @param {?} headerService
     */
    constructor(headerService) {
        this.headerService = headerService;
        this.sidenavToggle = new EventEmitter();
        this.environmentTitle = "";
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.getEnvironmentUrl(window.location.hostname);
    }
    /**
     * @return {?}
     */
    onToggleSidenav() {
        this.sidenavToggle.emit();
    }
    /**
     * @param {?} url
     * @return {?}
     */
    getEnvironmentUrl(url) {
        if (url.match('localhost')) {
            this.environmentTitle = 'LOCAL';
        }
        else if (url.endsWith('d.corp.odfl.com')) {
            this.environmentTitle = 'DEV';
        }
        else if (url.endsWith('l.corp.odfl.com')) {
            this.environmentTitle = 'LOAD';
        }
        else if (url.endsWith('q.corp.odfl.com')) {
            this.environmentTitle = 'QA';
        }
        else {
            this.environmentTitle = 'PROD';
        }
    }
}
TopbarComponent.decorators = [
    { type: Component, args: [{
                selector: 'od-internal-header-topbar',
                template: `<mat-toolbar color="primary">
    <div class="header">
      <img src="./assets/images/logos/OD_Logo.png">
    </div>

    <div fxFlex fxLayout fxFlexOffset="1%" fxLayoutGap="1%" fxLayoutAlign="flex-start center center">
        <div *ngFor="let page of headerService.pageList" fxHide.lt-md>
            <a routerLink={{page.routerLink}}>
                {{page.title}}
            </a>
        </div>
    </div>

    <div fxLayoutAlign="flex-end" fxLayoutGap="20px">
      <button mat-icon-button matTooltip="Version: 1.0.0">
       {{environmentTitle | uppercase}}
      </button>
  
        <button mat-icon-button (click)="onToggleSidenav()">
          <i class="fa fa-bars fa-2x"></i>
        </button>
    </div>

  </mat-toolbar>`,
                styles: [`mat-toolbar{background-color:#000}a{text-decoration:none;color:#fff;cursor:pointer}a:active,a:hover{color:#d3d3d3}.navigation-items{list-style:none;padding:0;margin:0}button,mat-icon{color:#fff}`]
            },] },
];
/** @nocollapse */
TopbarComponent.ctorParameters = () => [
    { type: HeaderService }
];
TopbarComponent.propDecorators = {
    sidenavToggle: [{ type: Output, args: ["sidenavToggle",] }],
    environmentTitle: [{ type: Input, args: ['environmentTitle',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class HeaderModule {
}
HeaderModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    MaterialModule,
                    FlexLayoutModule,
                    AppRoutingModule,
                    JoyrideModule.forRoot(),
                    FormsModule
                ],
                exports: [TopbarComponent, SidenavListComponent, HeaderComponent, ServiceTicketDialog],
                entryComponents: [
                    ServiceTicketDialog
                ],
                providers: [ODJoyrideService, HeaderService],
                declarations: [TopbarComponent, SidenavListComponent, HeaderComponent, ServiceTicketDialog]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class Application {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class Page {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { HeaderModule, ODJoyrideService, HeaderService, Application, Page, AppRoutingModule as ɵb, MaterialModule as ɵa, HeaderComponent as ɵf, ServiceTicketDialog as ɵe, SidenavListComponent as ɵd, TopbarComponent as ɵc };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,