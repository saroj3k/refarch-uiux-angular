/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { JoyrideService } from 'ngx-joyride';
import { Component, EventEmitter, Output, Inject } from '@angular/core';
import { MatDialog, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';
import { ODJoyrideService } from '../../services/od-joyride.service';
import { HeaderService } from '../../services/header.service';
export class SidenavListComponent {
    /**
     * @param {?} joyrideService
     * @param {?} dialog
     * @param {?} oDJoyrideService
     * @param {?} headerService
     */
    constructor(joyrideService, dialog, oDJoyrideService, headerService) {
        this.joyrideService = joyrideService;
        this.dialog = dialog;
        this.oDJoyrideService = oDJoyrideService;
        this.headerService = headerService;
        this.closeSidenav = new EventEmitter();
    }
    /**
     * @return {?}
     */
    onClose() {
        this.closeSidenav.emit();
    }
    /**
     * @return {?}
     */
    startJoyride() {
        this.onClose();
        this.joyrideService.startTour({
            steps: this.oDJoyrideService.steps,
            stepDefaultPosition: 'bottom'
        } // Your steps order
        );
    }
    /**
     * @return {?}
     */
    openServiceTicketDialog() {
        this.dialog.open(ServiceTicketDialog, {
            width: '500px'
        });
    }
}
SidenavListComponent.decorators = [
    { type: Component, args: [{
                selector: 'od-internal-header-sidenav-list',
                template: `<mat-nav-list>
  <a mat-list-item (click)="onClose()">
    <mat-icon>
      arrow_forward_ios
    </mat-icon>
    <span class="nav-caption">Close</span>
  </a>

  <mat-accordion>
    <mat-expansion-panel fxHide.gt-sm *ngIf="headerService.pageList.length > 0">
      <mat-expansion-panel-header>
        Links
      </mat-expansion-panel-header>
      <div *ngFor="let page of headerService.pageList">
          <a routerLink={{page.routerLink}} mat-list-item (click)="onClose()">
              <span class="nav-caption ">
              {{page.title}}
              </span>
          </a>
      </div>
    </mat-expansion-panel>

    <mat-expansion-panel *ngIf="headerService.applicationNavList.length > 0">
      <mat-expansion-panel-header>
        <mat-panel-title>
          {{headerService.applicationGroupTitle}}
        </mat-panel-title>
      </mat-expansion-panel-header>
      <div *ngFor="let app of headerService.applicationNavList">

        <a href="{{app.url}}" mat-list-item (click)="onClose()">

          <span class="nav-caption ">
            <span class="fa-stack">
              <div *ngFor="let icon of app.icons">
                <i class="fa {{icon}}"></i>
              </div>
            </span>
            {{app.title}}</span>
        </a>
      </div>
    </mat-expansion-panel>

    <mat-expansion-panel>
      <mat-expansion-panel-header>
        <mat-panel-title>
          Help
        </mat-panel-title>
      </mat-expansion-panel-header>
      <a mat-list-item (click)="openServiceTicketDialog()">
        <mat-icon>local_hospital</mat-icon>
        Service Desk Ticket
      </a>

      <a mat-list-item (click)="startJoyride()">
        <mat-icon>child_care</mat-icon>
        Tutorial
      </a>
    </mat-expansion-panel>
  </mat-accordion>
</mat-nav-list>`,
                styles: [`a{text-decoration:none;color:#fff}a:active,a:hover{color:#d3d3d3}.nav-caption{display:inline-block;padding-left:6px}.mat-nav-list .mat-list-item:hover,mat-expansion-panel:hover{color:#fff}`]
            },] },
];
/** @nocollapse */
SidenavListComponent.ctorParameters = () => [
    { type: JoyrideService },
    { type: MatDialog },
    { type: ODJoyrideService },
    { type: HeaderService }
];
SidenavListComponent.propDecorators = {
    closeSidenav: [{ type: Output, args: ["closeSidenav",] }]
};
function SidenavListComponent_tsickle_Closure_declarations() {
    /** @type {?} */
    SidenavListComponent.prototype.closeSidenav;
    /** @type {?} */
    SidenavListComponent.prototype.joyrideService;
    /** @type {?} */
    SidenavListComponent.prototype.dialog;
    /** @type {?} */
    SidenavListComponent.prototype.oDJoyrideService;
    /** @type {?} */
    SidenavListComponent.prototype.headerService;
}
export class ServiceTicketDialog {
    /**
     * @param {?} dialogRef
     * @param {?} data
     */
    constructor(dialogRef, data) {
        this.dialogRef = dialogRef;
        this.data = data;
    }
    /**
     * @return {?}
     */
    onNoClick() {
        this.dialogRef.close();
    }
    /**
     * @param {?} form
     * @return {?}
     */
    onSubmit(form) {
        console.log(form);
    }
}
ServiceTicketDialog.decorators = [
    { type: Component, args: [{
                selector: 'service-ticket-dialog',
                template: `<div class="container" fxLayout="column"  fxLayoutWrap fxLayoutGap="10px" fxLayoutAlign="center stretch">
    <div fxLayoutAlign="center center">
        <h2>Service Desk Ticket</h2>
    </div>
    <div>
        <form #f="ngForm" (ngSubmit)="onSubmit(f)">
            <div fxLayoutAlign="center stretch">
            <mat-form-field fxFlex="100%">
                <textarea name="serviceArea" ngModel matInput placeholder="Please enter your questions or comments" required></textarea>
            </mat-form-field>
            </div>
            <div fxLayoutAlign="center center">
                <button type="submit" mat-raised-button color="primary" [disabled]="f.invalid">Submit</button>
            </div>
        </form>
    </div>
</div>`,
            },] },
];
/** @nocollapse */
ServiceTicketDialog.ctorParameters = () => [
    { type: MatDialogRef },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
];
function ServiceTicketDialog_tsickle_Closure_declarations() {
    /** @type {?} */
    ServiceTicketDialog.prototype.dialogRef;
    /** @type {?} */
    ServiceTicketDialog.prototype.data;
}

//# sourceMappingURL=data:application/json;base64,